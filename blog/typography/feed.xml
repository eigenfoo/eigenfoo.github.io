<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>typography on George Ho</title><link>https://www.georgeho.org/blog/typography/</link><description>Recent content in typography on George Ho</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>Copyright Â© 2022, George Ho.</copyright><lastBuildDate>Mon, 21 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.georgeho.org/blog/typography/feed.xml" rel="self" type="application/rss+xml"/><item><title>How to Improve Your Static Site's Typography</title><link>https://www.georgeho.org/static-site-typography/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.georgeho.org/static-site-typography/</guid><description>&lt;p>You&amp;rsquo;ve read that &lt;a href="https://ia.net/topics/the-web-is-all-about-typography-period">web design is 95%
typography&lt;/a>. You
have a static website. You&amp;rsquo;ve wanted to improve its typography but have never
had the time or patience. You&amp;rsquo;ve might&amp;rsquo;ve even heard of Butterick&amp;rsquo;s &lt;a href="https://practicaltypography.com/">&lt;em>Practical
Typography&lt;/em>&lt;/a>. If this sounds like you, you&amp;rsquo;re
in luck!&lt;/p>
&lt;p>A foreword: you can achieve almost everything I describe here by adding CSS in
a &lt;code>&amp;lt;style&amp;gt;&lt;/code> tag at the end of your webpages&amp;rsquo; &lt;code>&amp;lt;head&amp;gt;&lt;/code>s, but the code snippets
I include here aren&amp;rsquo;t meant to be copypasta solutions, but illustrative
examples.&lt;/p>
&lt;div>
&lt;h2>Contents&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#easy-wins">Easy Wins&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#choose-a-font">Choose a font&lt;/a>&lt;/li>
&lt;li>&lt;a href="#adjust-the-line-width-and-point-size">Adjust the line width and point size&lt;/a>&lt;/li>
&lt;li>&lt;a href="#adjust-the-line-height">Adjust the line height&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#low-hanging-fruit">Low-Hanging Fruit&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#adjust-paragraph-and-header-spacing">Adjust paragraph and header spacing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#choose-a-monospaced-font-and-display-font">Choose a monospaced font and display font&lt;/a>&lt;/li>
&lt;li>&lt;a href="#set-a-background-color">Set a background color&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#braver-undertakings">Braver Undertakings&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#format-code-blocks">Format code blocks&lt;/a>&lt;/li>
&lt;li>&lt;a href="#support-sidenotes">Support sidenotes&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;h2 id="easy-wins">Easy Wins&lt;/h2>
&lt;p>Body text &amp;mdash; the text that forms the main content of your website &amp;mdash; is the
most important part of your website. These three things largely determine how
your body text looks, and nailing them can immediately improve your website&amp;rsquo;s
typography.&lt;/p>
&lt;h3 id="choose-a-font">Choose a font&lt;/h3>
&lt;p>Many static sites default to system fonts&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>: that is, fonts that are likely
already installed on readers&amp;rsquo; devices. This putatively boosts performance
(because readers need not download font files), and can give a more comfortable
look, since it can blend in with the fonts of the reader&amp;rsquo;s operating system.&lt;/p>
&lt;p>However, many system fonts aren&amp;rsquo;t good, and many others have become hackneyed
&lt;em>precisely because they are default fonts&lt;/em>. It&amp;rsquo;s also straightforward to use
custom webfonts or font hosting services like &lt;a href="https://fonts.google.com/">Google
Fonts&lt;/a>.&lt;/p>
&lt;p>Obviously you should do what you think is best for your website, but I&amp;rsquo;d point
out that &lt;strong>changing your body font is an easy and effective way to upgrade your
typography and distinguish your writing from the sea of sans-serif on the
Internet.&lt;/strong> Live a little!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* Use your own static font file(s).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> You should have a font face for regular, bold and italics. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>@&lt;span style="color:#66d9ef">font-face&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">font-family&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fira Sans&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">src&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">url&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/assets/fonts/FiraSansRegular.woff2&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">format&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;woff2&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">font-style&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">normal&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">font-weight&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">400&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* Fall back on system fonts. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">body&lt;/span> { &lt;span style="color:#66d9ef">font-family&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Fira Sans&amp;#34;&lt;/span>, Verdana, &lt;span style="color:#66d9ef">sans-serif&lt;/span>; }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* Alternatively, use a font hosting service like Google Fonts.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> Again, have a font face for regular, bold and italics. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#f92672">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;preconnect&amp;#34;&lt;/span> &lt;span style="color:#f92672">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://fonts.googleapis.com&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#f92672">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;preconnect&amp;#34;&lt;/span> &lt;span style="color:#f92672">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://fonts.gstatic.com&amp;#34;&lt;/span> &lt;span style="color:#f92672">crossorigin&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#f92672">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://fonts.googleapis.com/css2?family=Fira+Sans&amp;amp;display=swap&amp;#34;&lt;/span> &lt;span style="color:#f92672">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;stylesheet&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* Fall back on system fonts. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">body&lt;/span> { &lt;span style="color:#66d9ef">font-family&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Fira Sans&amp;#34;&lt;/span>, Verdana, &lt;span style="color:#66d9ef">sans-serif&lt;/span>; }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="adjust-the-line-width-and-point-size">Adjust the line width and point size&lt;/h3>
&lt;p>The ultimate goal is to control the &lt;em>average number of characters per line:&lt;/em>
too many, and lines run on interminably; too few, and you force readers&amp;rsquo; eyes
to dart uncomfortably back and forth. &lt;strong>Aim to fit between two and three full
English alphabets per line.&lt;/strong>&lt;/p>
&lt;p>The twist is that this has to be done regardless of the screen size &amp;mdash; most
obviously, it has to work on both desktop and mobile screens. This leads to
concept of &lt;em>fluid type&lt;/em>, which just means that the font size changes in reponse
to the screen width.&lt;/p>
&lt;p>Try adjusting your window size (or rotating your phone) to see how the line
width and point size adjust to always fit between two and three alphabets in
the following paragraph:&lt;/p>
&lt;p>abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz&lt;/p>
&lt;p>CSS Tricks has an &lt;a href="https://css-tricks.com/simplified-fluid-typography/">excellent
tutorial&lt;/a> for fluid type
with CSS, which boils down to clever use of &lt;code>min&lt;/code>, &lt;code>max&lt;/code> and &lt;code>vw&lt;/code>: the font
sizes goes between 16px on a 320px screen to 22px on a 1000px screen.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">body&lt;/span> { &lt;span style="color:#66d9ef">max-width&lt;/span>: &lt;span style="color:#ae81ff">720&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">html&lt;/span> { &lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#a6e22e">min&lt;/span>(&lt;span style="color:#a6e22e">max&lt;/span>(&lt;span style="color:#ae81ff">16&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#66d9ef">vw&lt;/span>), &lt;span style="color:#ae81ff">22&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>); }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="adjust-the-line-height">Adjust the line height&lt;/h3>
&lt;p>The goal is to control &lt;em>how closely consecutive lines sit next to each other:&lt;/em>
too tightly and you get intimidating walls of text; too loosely and your text
becomes a vaporous jumble of lines. &lt;strong>Aim to space lines between 120% to 145%
of the point size.&lt;/strong> (The text in this paragraph has a spacing of 145%. Just
right!)&lt;/p>
&lt;p style="line-height:1.1">
The goal is to control &lt;i>how closely consecutive lines sit next to each
other:&lt;/i> too tightly and you get intimidating walls of text; too loosely
and your text becomes a vaporous jumble of lines. &lt;b>Aim to space lines
between 120% to 145% of the point size.&lt;/b> (The text in this paragraph has a
spacing of 110%. Too dense.)
&lt;/p>
&lt;p style="line-height:1.6">
The goal is to control &lt;i>how closely consecutive lines sit next to each
other:&lt;/i> too tightly and you get intimidating walls of text; too loosely
and your text becomes a vaporous jumble of lines. &lt;b>Aim to space lines
between 120% to 145% of the point size.&lt;/b> (The text in this paragraph has a
spacing of 160%. Too sparse.)
&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">body&lt;/span> { &lt;span style="color:#66d9ef">line-height&lt;/span>: &lt;span style="color:#ae81ff">1.45&lt;/span>; }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="low-hanging-fruit">Low-Hanging Fruit&lt;/h2>
&lt;h3 id="adjust-paragraph-and-header-spacing">Adjust paragraph and header spacing&lt;/h3>
&lt;p>The goal is to &lt;em>enclose related pieces of text (i.e. sections and paragraphs)
with whitespace.&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/em> Done right, readers are presented with a structured and
scannable hierarchy of sections and paragraphs, instead of a soup of
equally-spaced lines.&lt;/p>
&lt;p>&lt;strong>Aim for paragraph spacing that is just large enough to be easily noticed:&lt;/strong> a
space equal to 50â100% of the body text size usually suffices. &lt;strong>Header spacing
is more of a judgement call.&lt;/strong> However, to quote &lt;a href="https://practicaltypography.com/space-above-and-below.html">Matthew
Butterick&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Semantically, headings relate to the text that follows, not the text before.
Thus youâll probably want the space below to be smaller than the space above
so the heading is visually closer to the text it introduces.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">p&lt;/span> { &lt;span style="color:#66d9ef">margin-top&lt;/span>: &lt;span style="color:#ae81ff">20&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>; &lt;span style="color:#66d9ef">margin-bottom&lt;/span>: &lt;span style="color:#ae81ff">20&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">h1&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h2&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h3&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h4&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h5&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h6&lt;/span> { &lt;span style="color:#66d9ef">margin-top&lt;/span>: &lt;span style="color:#ae81ff">8&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>; &lt;span style="color:#66d9ef">margin-bottom&lt;/span>: &lt;span style="color:#ae81ff">-1&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>; }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="choose-a-monospaced-font-and-display-font">Choose a monospaced font and display font&lt;/h3>
&lt;p>Body text is the most important part of a website, so spend time making it look
good (you&amp;rsquo;ll notice that all three &lt;a href="#easy-wins">Easy Wins&lt;/a> were for the body
text). Once you&amp;rsquo;ve done that though, consider more fonts.&lt;/p>
&lt;p>Monospaced fonts (for code) lets readers easily distinguish between prose and
code, and display fonts (for titles and headers) can have much more color and
character. &lt;strong>Using a monospaced font can make technical, code-heavy text more
readable, and using a display font can lend your website personality.&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">h1&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h2&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h3&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h4&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h5&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h6&lt;/span> { &lt;span style="color:#66d9ef">font-family&lt;/span>: Verdana, &lt;span style="color:#66d9ef">sans-serif&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">code&lt;/span> { &lt;span style="color:#66d9ef">font-family&lt;/span>: Consolas, &lt;span style="color:#66d9ef">monospace&lt;/span>; }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="set-a-background-color">Set a background color&lt;/h3>
&lt;p>(This will involve some aesthetic redesign for your website, which is why it
isn&amp;rsquo;t higher on the list.)&lt;/p>
&lt;p>High contrast between text and background is good for legibility, but the
contrast between pure white (&lt;code>#ffffff&lt;/code>) and pure black (&lt;code>#000000&lt;/code>) can look
harsh and unsettling. &lt;strong>Web pages are better served by off-white and off-black
backgrounds&lt;/strong>, which are easier on the eyes while still retaining high
contrast. &lt;a href="https://edwardtufte.github.io/tufte-css/">Tufte CSS&lt;/a> suggests
&lt;code>#fffff8&lt;/code> and &lt;code>#111111&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* If the reader prefers dark mode, use off-black instead of off-white. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">body&lt;/span> { &lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#ae81ff">#fffff8&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>@&lt;span style="color:#66d9ef">media&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">prefers-color-scheme&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">dark&lt;/span>&lt;span style="color:#f92672">)&lt;/span> { &lt;span style="color:#f92672">body&lt;/span> { &lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#ae81ff">#111111&lt;/span>; } }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="braver-undertakings">Braver Undertakings&lt;/h2>
&lt;h3 id="format-code-blocks">Format code blocks&lt;/h3>
&lt;p>If you&amp;rsquo;re unlucky enough to know something about programming and noisy enough
to want to blog about it (both of which are unfortunately quite likely, if
you&amp;rsquo;re reading this), then &lt;strong>you probably want your code blocks to look good.&lt;/strong>&lt;/p>
&lt;p>CSS Tricks has &lt;a href="https://css-tricks.com/considerations-styling-pre-tag/">a fantastic tutorial on how to style &lt;code>&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;/code>
blocks&lt;/a>, which walks
through code wrapping, code block auto-expansion, syntax highlighting and space
control.&lt;/p>
&lt;p>Frustratingly, there was &lt;a href="https://stackoverflow.com/a/22417120/13372802">one bug that drove me up the
wall&lt;/a>, in which some lines of
code had their font size increased for seemingly no reason:&lt;/p>
&lt;blockquote>
&lt;p>WebKit has the annoying behavior (for a properly designed responsive site) of
trying to enlarge the font size for the &amp;ldquo;primary&amp;rdquo; text on the screen, where
primary is simply its best guess.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">pre&lt;/span> &lt;span style="color:#f92672">code&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* Don&amp;#39;t wrap long lines, force horizontal scrolling. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">white-space&lt;/span>: &lt;span style="color:#66d9ef">pre&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">overflow-x&lt;/span>: &lt;span style="color:#66d9ef">auto&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* https://stackoverflow.com/a/22417120/13372802 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text-size-adjust: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-ms-&lt;/span>text-size-adjust: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-moz-&lt;/span>text-size-adjust: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-webkit-&lt;/span>text-size-adjust: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="support-sidenotes">Support sidenotes&lt;/h3>
&lt;p>&lt;em>Sidenotes&lt;/em> are when footnotes are placed in the margins beside the text they
reference, instead of at the end of the page. They allow readers to instantly
read annotations instead of having to constantly click or scroll to and fro.
&lt;strong>Sidenotes greatly improve footnotes for the web, but are fairly difficult to
implement despite recent efforts.&lt;/strong>&lt;/p>
&lt;p>Gwern has compiled &lt;a href="https://www.gwern.net/Sidenotes">an exhaustive bibliography of sidenote
implementations&lt;/a>, which I recommend skimming
over before turning to &lt;a href="https://edwardtufte.github.io/tufte-css/">Tufte CSS&lt;/a>
for a simpler implementation.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Yeah I know, I&amp;rsquo;m interchanging &lt;em>font&lt;/em> and &lt;em>typeface&lt;/em>, but at least I have
a life.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Graphic designers may call this &lt;em>active whitespace:&lt;/em> whitespace
deliberately added for the sake of emphasis or structure.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Migrating to Hugo</title><link>https://www.georgeho.org/migrating-to-hugo/</link><pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.georgeho.org/migrating-to-hugo/</guid><description>&lt;center>&lt;img src="https://www.georgeho.org/assets/images/blog-rewrite-meme.png">&lt;/center>
&lt;p>This weekend I migrated my blog to Hugo.&lt;/p>
&lt;p>My website is now based on the &lt;a href="https://github.com/janraasch/hugo-bearblog/">Hugo Bear Blog
theme&lt;/a>, generated with
&lt;a href="https://gohugo.io/">Hugo&lt;/a>, hosted by &lt;a href="https://pages.github.com/">GitHub Pages&lt;/a>
and served with &lt;a href="https://www.cloudflare.com/">Cloudflare&lt;/a>. I&amp;rsquo;ve also migrated
from the &lt;code>eigenfoo.xyz&lt;/code> domain to the more creditable-sounding &lt;code>georgeho.org&lt;/code>
(sadly, &lt;code>georgeho.com&lt;/code> and &lt;code>georgeho.net&lt;/code> were already taken). In terms of
typography, the header typeface is &lt;a href="https://www.1001freefonts.com/nicholson-gothic.font">Nicholson
Gothic&lt;/a>, the body typeface
is &lt;a href="https://mbtype.com/fonts/equity/">Equity&lt;/a> and the monospaced typeface for
occasional code snippets is &lt;a href="https://mbtype.com/fonts/triplicate/">Triplicate&lt;/a>.
In all, I probably spend the equivalent of two fancy lattes a year for this
setup.&lt;/p>
&lt;h2 id="why-hugo-why-not-jekyll">Why Hugo? Why Not Jekyll?&lt;/h2>
&lt;p>Honestly, no good reason! &lt;a href="https://vickiboykis.com/2022/01/08/migrating-to-hugo/">Some people point
out&lt;/a> that Jekyll is not
actively maintained or used anymore, and that GitHub Pages doesn&amp;rsquo;t support
Jekyll 4.0. However, those aren&amp;rsquo;t really good enough reasons for migrating a
blogging stack.&lt;/p>
&lt;p>Here&amp;rsquo;s a short list of things I like about Hugo over Jekyll &amp;mdash; but again, none
of these things really should have enticed me to make the jump.&lt;/p>
&lt;ul>
&lt;li>Ease of installation and use (Hugo is a binary executable instead of a Ruby
library), and it was very easy to make changes to the theme (e.g. changing
the font or &lt;a href="https://practicaltypography.com/line-length.html">increasing the font
size&lt;/a>) &amp;mdash; although that
could just be because &lt;a href="https://github.com/janraasch/hugo-bearblog/">the theme that I&amp;rsquo;m
using&lt;/a> is dead simple.&lt;/li>
&lt;li>Automatic generation of a &lt;a href="https://www.georgeho.org/sitemap.xml">sitemap&lt;/a> and &lt;a href="https://www.georgeho.org/feed.xml">RSS feed&lt;/a>
&amp;mdash; with Jekyll, these needed to be done manually (or by your theme).&lt;/li>
&lt;li>Typographical conveniences like automatic &lt;a href="https://practicaltypography.com/straight-and-curly-quotes.html">smart
quotes&lt;/a>,
rendering &lt;code>-&lt;/code>, &lt;code>--&lt;/code> and &lt;code>---&lt;/code> into &lt;a href="https://practicaltypography.com/hyphens-and-dashes.html">the appropriate hyphen or
dash&lt;/a>, and &lt;code>...&lt;/code>
into &lt;a href="https://practicaltypography.com/ellipses.html">an ellipsis&lt;/a>.&lt;/li>
&lt;li>Faster builds of my website&amp;hellip; although this isn&amp;rsquo;t really that helpful for
me, since my blog barely has a few dozen pages.&lt;/li>
&lt;/ul>
&lt;h2 id="the-migration">The Migration&lt;/h2>
&lt;p>&amp;hellip;was surprisingly painless! All I &lt;em>really&lt;/em> needed to do was to &lt;a href="https://themes.gohugo.io/">pick out a
theme&lt;/a>, follow the &lt;a href="https://gohugo.io/getting-started/quick-start/">Hugo Quick
Start&lt;/a>, dump my Markdown blog
posts into the &lt;code>content/&lt;/code> directory and change some of the YAML front matter in
all of my blog posts.&lt;/p>
&lt;p>In reality, I spent a few extra hours fiddling with the typography and making
sure that all my links were back-compatible with my previous website.&lt;/p>
&lt;h2 id="pollen">Pollen&lt;/h2>
&lt;p>This is actually not the first time I tried to rewrite my website: earlier this
year I experimented with writing a
&lt;a href="https://edwardtufte.github.io/tufte-css/">Tufte-inspired&lt;/a> blog using
&lt;a href="https://pollenpub.com">Pollen&lt;/a>. For those unfamiliar, it&amp;rsquo;s like R Markdown (in
that it&amp;rsquo;s a markup language that allows arbitrary R code to be embedded in it),
but instead of R, it&amp;rsquo;s &lt;a href="https://racket-lang.org/">Racket&lt;/a>, and instead of
Markdown, it&amp;rsquo;s your own domain-specific markup language that you build with
Racket.&lt;/p>
&lt;p>This means that I wrote a custom language specifically for formatting
Tufte-style two-column blog posts. It actually worked out pretty well (and the
resulting blog posts looked &lt;em>damn good&lt;/em>), but I couldn&amp;rsquo;t justify maintaining my
own language specifically for writing blog posts. I&amp;rsquo;d probably recommend using
Pollen for large, one-off pieces of writing (like a book), instead of small,
recurring pieces of writing (like a blog).&lt;/p></description></item><item><title>Serif Fonts for Coding</title><link>https://www.georgeho.org/fonts-for-coding/</link><pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.georgeho.org/fonts-for-coding/</guid><description>&lt;p>Sometimes I get sniped by &lt;a href="https://news.ycombinator.com/item?id=25159038">Hacker News
posts&lt;/a>, and this one plunged me
down a rabbit hole for coding fonts.&lt;/p>
&lt;p>Many coding fonts are lightly stressed, monospaced sans serifs: in other words, each glyph takes
the same width, and each glyph looks like a stick figure, with constant stroke
width (a.k.a. &lt;a href="https://designshack.net/articles/typography/is-my-type-stressed-a-primer-on-stressed-typography/">&lt;em>stress&lt;/em>&lt;/a>) throughout the glyph.&lt;/p>
&lt;p>But as &lt;a href="https://news.ycombinator.com/item?id=25167704">the Internet stranger
&lt;code>uncanneyvalley&lt;/code>&lt;/a> pointed out,
there&amp;rsquo;s decent overlap between &amp;ldquo;fonts good for coding&amp;rdquo; and &amp;ldquo;fonts good for
dyslexia&amp;rdquo;: being able to easily distinguish between visually-similar and
repeated characters.&lt;/p>
&lt;link rel="preconnect" href="https://fonts.googleapis.com">
&lt;link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
&lt;link href="https://fonts.googleapis.com/css2?family=Source+Code+Pro&amp;display=swap" rel="stylesheet">
&lt;style>
code.slab-serif {
font-family: "Source Code Pro", monospace;
}
&lt;/style>
&lt;p>&lt;strong>Proportional (&lt;a href="https://mbtype.com/fonts/equity/">Equity&lt;/a>):&lt;/strong>&lt;/p>
&lt;center>([{}]) l1i!|I OQo08 rumn ecoa pqdb -- __ == !! "' :; ,.&lt;/center>
&lt;p>&lt;strong>Monospaced Sans Serif (&lt;a href="https://fonts.google.com/specimen/Source+Code+Pro">Source Code Pro&lt;/a>):&lt;/strong>&lt;/p>
&lt;center>&lt;code class="slab-serif">([{}]) l1i!|I OQo08 rumn ecoa pqdb -- __ == !! "' :; ,.&lt;/code>&lt;/center>
&lt;p>&lt;strong>Monospaced Serif (&lt;a href="https://mbtype.com/fonts/triplicate/">Triplicate&lt;/a>):&lt;/strong>&lt;/p>
&lt;center>&lt;code>([{}]) l1i!|I OQo08 rumn ecoa pqdb -- __ == !! "' :; ,.&lt;/code>&lt;/center>
&lt;p>I think that stressed monospaced serif fonts (i.e. monospaced fonts with serifs that are curved
instead of slab-like, and that are visually thinner than the rest of the glyph)
are generally much better for coding than most default coding typefaces. It turns out
there are very few such fonts: I&amp;rsquo;ve had to scour the Internet for them, but you
can have the fruits of my labor for free!&lt;/p>
&lt;ul>
&lt;li>Libertinus Mono (&lt;a href="https://fontlibrary.org/en/font/libertinus-mono">Font
Library&lt;/a>,
&lt;a href="https://github.com/alerque/libertinus">GitHub&lt;/a>)&lt;/li>
&lt;li>Linux Libertine Mono
(&lt;a href="https://en.wikipedia.org/wiki/Linux_Libertine">Wikipedia&lt;/a>, &lt;a href="https://www.fontsquirrel.com/fonts/linux-libertine">Font
Squirrel&lt;/a>, &lt;a href="https://fontlibrary.org/en/font/linux-libertine">Font
Library&lt;/a>)&lt;/li>
&lt;li>SimSun
(&lt;a href="https://docs.microsoft.com/en-us/typography/font-list/simsun">Microsoft&lt;/a>,
&lt;a href="https://www.dafontfree.io/simsun-font/">Dafont Free&lt;/a>)&lt;/li>
&lt;li>Sun Gallant Demi
&lt;ul>
&lt;li>I can&amp;rsquo;t find any sources for it beyond &lt;a href="https://unix.stackexchange.com/q/307356">this Unix StackExchange
post&lt;/a>. Maybe if you have a Sun
computer? &lt;code>Â¯\_(ã)_/Â¯&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Triplicate (&lt;a href="https://mbtype.com/fonts/triplicate/">MB Type&lt;/a>)&lt;/li>
&lt;li>Xanh Mono (&lt;a href="https://fonts.google.com/specimen/Xanh+Mono">Google Fonts&lt;/a>,
&lt;a href="https://github.com/yellow-type-foundry/xanhmono">GitHub&lt;/a>)&lt;/li>
&lt;/ul></description></item><item><title>Pollen and Digital Publishing (a.k.a. _The Book is a Program_)</title><link>https://www.georgeho.org/pollen-digital-publishing/</link><pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate><guid>https://www.georgeho.org/pollen-digital-publishing/</guid><description>&lt;p>I&amp;rsquo;ve picked up a new hobby (or perhaps just another fleeting fascination) &amp;mdash;
digital publishing. The catalyst was the book &lt;a href="https://practicaltypography.com/">&lt;em>Practical Typography&lt;/em> by
Matthew Butterick&lt;/a>. There were so many
interesting things about it: it is gorgeous, it expounds well-argued (if
slightly controversial) views on how the average writer should think about
typography, it has a little widget that would change the book&amp;rsquo;s typeface to
showcase Buttericks&amp;rsquo; fonts for sale, it is published online but &amp;mdash; and
Butterick makes a big point of this &amp;mdash; is not free.&lt;/p>
&lt;p>Most interesting to me, however, was how the book was written and published
with a tool written specifically for the book &amp;mdash;
&lt;a href="https://docs.racket-lang.org/pollen/">Pollen&lt;/a>. A good explanatory analogy (at
least for those in the data science and engineering world) is that itâs like R
Markdown (in that itâs a markup language that allows arbitrary R code to be
embedded in it), but instead of R, itâs Racket, and instead of Markdown, itâs
your own domain-specific markup language that you build with Racket.&lt;/p>
&lt;p>After playing around with Pollen for a bit, I think I&amp;rsquo;m sold. Two big reasons:&lt;/p>
&lt;ol>
&lt;li>Write your own markup
&lt;ul>
&lt;li>You can write your own &amp;ldquo;HTML tags&amp;rdquo; &amp;mdash; so for example, if you&amp;rsquo;re writing a technical
document and want to emphasize certain jargon upon first mention, you can write a
&lt;code>firstmention&lt;/code> tag, and have it italicize the tagged text and append it to
a glossary with a link to its first mention in your document. The cool
thing is that tags are just functions in Racket, which allow you to
transform the input text arbitrarily.&lt;/li>
&lt;li>As you can imagine, the ability to write your own markup really lets you
tailor it to the content at hand.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Multi-format publishing
&lt;ul>
&lt;li>This lets you write in one input format, and output to multiple formats - so once I
make changes to the source files, I can immediately have an HTML, LaTeX, PDF, and
plain text format of my writing.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;em>But what about Markdown or LaTeX or ReStructured Text or &amp;mdash;&lt;/em> none of them
give you flexibility or extensibility that Pollen does. In the case of Markdown
or ReStructured Text, you just get a subset of HTML features in a way that
looks more palatable to the average developer. If this suffices for your
publishing needs, that&amp;rsquo;s great - but if it doesn&amp;rsquo;t, you&amp;rsquo;re left in a tough
place. LaTeX - as Butterick readily admits - did a lot of things right, but at
the end of the day it&amp;rsquo;s just another format that Pollen can target. (I think
Pollen was named in the spirit of LaTeX by the way - in the sense that people
are commonly allergic to both of them.)&lt;/p>
&lt;p>Now here&amp;rsquo;s the &amp;ldquo;downside&amp;rdquo; - Pollen is written in
&lt;a href="https://racket-lang.org">Racket&lt;/a> (which is a dialect of Lisp), and any
non-trivial applications will probably involve you learning a bit of Racket.
I&amp;rsquo;d say that that&amp;rsquo;s a good thing, if nothing else than for some self-education.&lt;/p>
&lt;p>Here&amp;rsquo;s a very simple example to convince you (if you want a longer form answer,
I&amp;rsquo;d recommend Butterick&amp;rsquo;s &lt;a href="https://beautifulracket.com/appendix/why-racket-why-lisp.html">&lt;em>Why Racket? Why
Lisp?&lt;/em>&lt;/a>)&lt;/p>
&lt;p>Most languages represent HTML as a string (which conceals the semantics of HTML
tags), or as a tree (which conceals the sequential nature of the HTML). Neither
option is great. Lisps, however, could represent a snippet of HTML as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>&lt;span style="color:#f92672">(&lt;/span>span &lt;span style="color:#f92672">((&lt;/span>class &lt;span style="color:#e6db74">&amp;#34;author&amp;#34;&lt;/span>&lt;span style="color:#f92672">)(&lt;/span>id &lt;span style="color:#e6db74">&amp;#34;primary&amp;#34;&lt;/span>&lt;span style="color:#f92672">)(&lt;/span>living &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Prof. Leonard&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Keeping in mind that &lt;code>(f x y)&lt;/code> is Lisp&amp;rsquo;s way of saying &lt;code>f(x, y)&lt;/code> and we see
that Lisps cleanly model HTML as &lt;em>nested function application&lt;/em>, which really
blows open the door to opportunities in marking up your text.&lt;/p>
&lt;p>At any rate, that&amp;rsquo;s probably enough said about Pollen. Let me show you what I
managed to put together with it in one or two spare weekends &amp;mdash;
&lt;a href="https://cooper.georgeho.org/">&lt;code>cooper.georgeho.org&lt;/code>&lt;/a>. I was hunting around for
dummy text that I could use to play around with &amp;mdash; Lorem Ipsum seemed trite,
and the U.S. Constitution seemed overdone, so I reached for some historical
documents of my alma mater. Hope you like it!&lt;/p></description></item><item><title>Best Practice Patterns in Smalltalk</title><link>https://www.georgeho.org/smalltalk/</link><pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.georgeho.org/smalltalk/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://read.amazon.com/kp/embed?asin=B00BBDLIME">Book Preview (Amazon)&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>At &lt;a href="https://twitter.com/avibryant/status/1231677904943058944">Avi Bryant&amp;rsquo;s
recommendation&lt;/a>, I
decided to pick up &lt;em>Smalltalk: Best Practice Patterns&lt;/em> by Kent Beck. I
initially was pretty skeptical of the book: it sounded like a book on Smalltalk
&amp;mdash; not exactly something I know much about (in either sense of the word :P).
But people seemed to be giving it rave reviews on Twitter (just click around
the replies on Avi&amp;rsquo;s quoted tweet!), so I decided to give it a shot.&lt;/p>
&lt;p>First, let&amp;rsquo;s talk about Smalltalk. Smalltalk is an &lt;em>extremely&lt;/em> influential
language with a &lt;a href="https://hackernoon.com/back-to-the-future-with-smalltalk-57c68fab583a">storied
history&lt;/a>.
It was the progenitor of so many ideas that we now take for granted. IDEs.
Test-driven development. The
&lt;a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">model-view-controller&lt;/a>
architecture pattern. Language virtual machines. JIT compilation. I can&amp;rsquo;t
possibly do its legacy justice here, so I&amp;rsquo;ll just focus on one thing.&lt;/p>
&lt;p>Smalltalk was the first &lt;em>purely objected oriented&lt;/em> language: the phrase
&amp;ldquo;everything is an object&amp;rdquo; started with Smalltalk. Objects can have &lt;em>methods&lt;/em>,
and communicate to each other via &lt;em>messages&lt;/em>. This fastidiousness makes it
difficult to translate the book&amp;rsquo;s lessons into Python: most popular languages
today aren&amp;rsquo;t as strict as Smalltalk (i.e. not everything has to be
encapsulated in a object), so I mentally substituted &amp;ldquo;message&amp;rdquo; with &amp;ldquo;function&amp;rdquo;,
and most of the best practice patterns still seemed to make a lot of sense.
However, I&amp;rsquo;m not totally sure that this is the best way to translate it.
Smalltalkers please chime in!&lt;/p>
&lt;p>Despite what the book&amp;rsquo;s title might suggest, I would say that this book is
about &lt;em>best practice patterns&lt;/em> &amp;mdash; design decisions that are made repeatedly by
experienced developers and are generally (but not universally!) helpful &amp;mdash;
that happen to be &lt;em>illustrated&lt;/em> in Smalltalk. In other words, the most
important lessons of the book are language-agnostic.&lt;/p>
&lt;p>At first, I was actually a bit underwhelmed by this book, since it seemed to be
explaining a lot of patterns that I already seemed to know, and I was hoping to
learn more patterns: perhaps my code sucked because I was just shooting myself
in the foot by structuring it wrong!&lt;/p>
&lt;p>Instead, the book focussed on a lot of patterns that I had already seen in
various Python libraries/APIs. It devoted a lot of time to explaining what
problems these patterns solved, what kind of trade-offs they made, and when not
to use these patterns. It forced me to think critically about the patterns I
had already seen (instead of teaching me new patterns) and convinced me to
double down on following these best practices patterns in my code.&lt;/p>
&lt;p>Here are some best practice patterns that I found interesting and
well-explained:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The pattern of &lt;strong>using classes as functions&lt;/strong>.&lt;/p>
&lt;blockquote>
&lt;p>How do you code a method where many lines of code share many arguments
and temporary variables?&lt;/p>
&lt;p>&lt;em>Create a class named after the method. Give it an instance variable for
[&amp;hellip;] each argument and each temporary variable [&amp;hellip;] Give it once instance
method, &lt;code>compute&lt;/code>, implemented by copying the body of the original method.
Replace the method with one which creates an instance of the new class and
sends it &lt;code>compute&lt;/code>.&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>This practice pattern immediately reminded me of &lt;code>scikit-learn&lt;/code>&amp;rsquo;s API,
which exposes machine learning algorithms as classes with a &lt;code>.fit()&lt;/code> and
&lt;code>.predict()&lt;/code> methods. This design made sense to me (there is generally some
state that needs to be saved after training, and a class is the right way
to encapsulate that state), but struck me as a bit unsettling. Most classes
are nouns, and it feels weird to have a class that is a verb. However, Beck
emphasized that the organization and clarity are worth the strange nature
of these objects.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The idea that &lt;strong>the behavior of programs is more important to get right than
its state or representation&lt;/strong>.&lt;/p>
&lt;p>This is best explained with a quote from the book:&lt;/p>
&lt;blockquote>
&lt;p>Objects model the world through behavior and state. Behavior is the
dynamic, active, computational part of the model. State is what is left
after behavior is done, how the model is represented before, after and
during a computation.&lt;/p>
&lt;p>Of the two, behavior is the more important to get right. The primacy of
behavior is one of the odd truths of objects; odd because it flies in the
face of so much accumulated experience. Back in the bad old days, you
wanted to get the representation right as quickly as possible because
every change to the representation bred changes in many different
computations.&lt;/p>
&lt;p>Objects (done right) change all that. No longer is your system a slave of
its representation. Because objects can hide their representation behind
a wall of messages, you are free to change representation and only affect
one object.&lt;/p>
&lt;/blockquote>
&lt;p>I&amp;rsquo;ve anecdotally found this to be true in my own writing, but I only have a
fairly half-baked reason why this should be true in general. For one, state
is the &lt;em>permanent&lt;/em> part of your program and so is much harder to change: it
persists between script executions, program invocations, and function
calls. Secondly, it is incredibly easy to code in implicit assumptions
about state into other parts of the program: when the state representation
changes, all these assumptions must then be weeded out of your code and
modified appropriately.&lt;/p>
&lt;p>The meatiest example I can give is the one below, so let&amp;rsquo;s move along!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The pattern of &lt;strong>refining protocols between two programs&lt;/strong>.&lt;/p>
&lt;blockquote>
&lt;p>How do you code the interaction between two objects that need to remain
independent?&lt;/p>
&lt;p>Refine the protocol between the objects so the words used are consistent.&lt;/p>
&lt;/blockquote>
&lt;p>I actually talked about this best practice pattern in my &lt;a href="https://buttondown.email/eigenfoo/archive/tfp-joint-dists/">last
newsletter&lt;/a>,
where I discussed the design of TFP. The somewhat more concrete problem is
this: if program A constructs some object that program B consumes, then it
is crucially important to get the representation of that object kosher. Any
changes to that object will require significant (and probably painful!)
changes to both programs A and B.&lt;/p>
&lt;p>The best practice pattern here is to refine the protocol between the two
programs and specify a contract for these intermediate objects: all objects
must have such and such properties, so that programs A and B can do whatever
they want, so long as they fulfill the contract. This was exactly the
situation with specifying and constructing joint distributions before
passing them off to inference algorithms: by refining and specifying a
contract for &lt;code>tfp.JointDistribution&lt;/code>s, the TFP team was able to maintain the
independence of the model specification programs and the inference
algorithms.&lt;/p>
&lt;/li>
&lt;/ol></description></item></channel></rss>
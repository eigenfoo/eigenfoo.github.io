<?xml version="1.0" encoding="utf-8" standalone="yes"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><title>George Ho</title><id>https://www.georgeho.org/</id><author><name>George Ho</name><uri>https://www.georgeho.org/</uri></author><generator>Hugo gohugo.io</generator><rights>Copyright © 2022, George Ho.</rights><updated>2022-11-05T07:40:24Z</updated><link rel="alternate" type="text/html" href="https://www.georgeho.org/" hreflang="en-US"/><entry><title>Merriam-Webster and Unstructured Data Processing</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/webster-unstructured-data/"/><id>https://www.georgeho.org/webster-unstructured-data/</id><updated>2022-09-18T00:00:00Z</updated><published>2022-09-18T00:00:00Z</published><content type="html">&lt;p>I recently finished reading &lt;a href="https://bookshop.org/books/word-by-word-the-secret-life-of-dictionaries/9781101970263">&lt;em>Word by Word: The Secret Life of Dictionaries&lt;/em> by
Kory
Stamper&lt;/a>,
which was an unexpected page-turner. What intrigued me most was (perhaps
unsurprisingly) Stamper&amp;rsquo;s description of how Merriam-Webster gets written, and
what a striking resemblance that process has to many successful unstructured
data projects in the wild. I want to use this blog post to ruminate on this.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>First&lt;/strong> it begins with collection and curation of raw, unstructured data.
Stamper describes a fascinating process called &lt;em>&amp;ldquo;reading and marking&amp;rdquo;&lt;/em>, whereby
editors are assigned reading of current magazines, periodicals, blogs &amp;mdash;
almost anything written in English, it seems &amp;mdash; and read and underline any
words that catch their eye: new words, or words that get used in new ways.
(This is, contrary to first impressions, a non-trivial task for which requires
training: good readers-and-markers will pick up on the recent trend of &lt;em>&amp;ldquo;bored
of&amp;rdquo;&lt;/em>, instead of the more historically common &lt;em>&amp;ldquo;bored with&amp;rdquo;&lt;/em> &amp;mdash; this doesn&amp;rsquo;t
imply that &lt;em>bored&lt;/em> is picking up a new meaning, but rather that &lt;em>of&lt;/em> is&amp;hellip;
which as you can imagine, can get lexicographers very excited.)&lt;/p>
&lt;p>Stamper also describes the use of corpora, which are basically large structured
datasets of English being used in the wild &amp;mdash; a dataset of tweets, say, or
transcripts of popular TV shows. As data gets increasingly commoditized, data
projects will increasingly have the luxury of starting with structured data (or
at least, supplementing their raw unstructured data with structured data).&lt;/p>
&lt;p>&lt;strong>Second&lt;/strong> is the actual structuring of the data. This entails a small army of
editors dividing the entire dictionary amongst themselves, and defining (or
revising definitions of) each word by hand. In practice, that means opening up
the database of read-and-marked words (and maybe also the structured corpora),
seeing if the current definition needs to be revised to accommodate new senses
or usage of the word, and potentially writing or rewriting a definition for new
words&amp;hellip; all in the span of maybe 15 minutes per word, on average.&lt;/p>
&lt;p>This seems to be the most labor-intensive step in the &amp;ldquo;Merriam-Webster data
pipeline&amp;rdquo;, but of course is also the one that adds the most value. There&amp;rsquo;s no
reason to think that this phase (or any of these three phases, really!) needs
to be technologically sophisticated &amp;mdash; the dictionary-maker still makes use of
index cards and filing cabinets today. Lucrative products &lt;a href="https://vicki.substack.com/p/neural-nets-are-just-people-all-the">being underpinned by
vast amounts of manual human labor is unfortunately nothing
new&lt;/a>, but
it&amp;rsquo;s good to be reminded of it. The fact that product value and technological
sophistication are unrelated is underappreciated: you don&amp;rsquo;t unlock more value
from your data by writing better code or training better machine learning
models.&lt;/p>
&lt;p>&lt;strong>Finally&lt;/strong> comes any ancillary features or datasets that Merriam-Webster
offers on top of their existing data (a.k.a. the dictionary), simply because
they are best positioned to deliver them. Think of things like etymology,
pronunciations and dates&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>It can seem funny that a dataset&amp;rsquo;s true value to users (or, if you like, the
dataset&amp;rsquo;s &amp;ldquo;product-market fit&amp;rdquo;) might come from one of these subsidiary
datasets or features, instead of &amp;ldquo;the real thing&amp;rdquo;. This makes sense though:
just as companies pivot products and business models to stay relevant, so too
can unstructured datasets &amp;mdash; after all, it&amp;rsquo;s not a huge stretch to think of
unstructured datasets as products in their own right.&lt;/p>
&lt;hr>
&lt;p>So here we have a recipe for a successful data project:&lt;/p>
&lt;ol>
&lt;li>Collect and curate raw, unstructured data,&lt;/li>
&lt;li>Structure it (ideally also adding some value to the data in the process, but
structuring the data is value enough), and&lt;/li>
&lt;li>Offer subsidiary datasets that you are best positioned to offer&lt;/li>
&lt;/ol>
&lt;p>What other data projects have followed this recipe?&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Google Search&lt;/strong>: Google &lt;a href="https://developers.google.com/search/docs/advanced/crawling/googlebot">crawled the
internet&lt;/a>,
and continues to do so on an ongoing basis; they invented
&lt;a href="https://en.wikipedia.org/wiki/PageRank">PageRank&lt;/a> and other methods
algorithms to make searching (a weak form of &amp;ldquo;structuring&amp;rdquo;, I suppose) the
internet possible; and their question-answering and
&lt;a href="https://developers.google.com/search/docs/advanced/structured-data/carousel">carousels&lt;/a>
are good examples of ancillary features on top of their core offering.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://cryptics.georgeho.org/">&lt;code>cryptics.georgeho.org&lt;/code>&lt;/a>&lt;/strong>: my &lt;a href="https://www.georgeho.org/cryptic-clues/">dataset
of cryptic crossword clues&lt;/a> started by indexing several
blogs for cryptic crosswords; I then wrote a ton of &lt;code>BeautifulSoup&lt;/code> to parse
structured clue information out of the blog post HTML; finally, I ran some
simple searches and regular expressions to produce more valuable resources
for constructors of cryptic crosswords.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>I wouldn&amp;rsquo;t be convinced that this is the &lt;em>only&lt;/em> way for data projects succeed,
but it does seem like a helpful pattern to keep in mind!&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>I was surprised to learn that words with multiple definitions are defined
in chronological order of first usage, and not, as I imagined, some kind of
&amp;ldquo;importance&amp;rdquo; of definitions.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></entry><entry><title>Link Bulletin, August 2022</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/link-bulletin-2022-08/"/><id>https://www.georgeho.org/link-bulletin-2022-08/</id><updated>2022-08-04T00:00:00Z</updated><published>2022-08-04T00:00:00Z</published><content type="html">&lt;blockquote>
&lt;p>This is an at-most-monthly link bulletin, where I compile and post a handful
of links that I&amp;rsquo;ve read and thought about with minimal explanation and
commentary, on the theory that the links I find interesting might also be
interesting to others.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://blog.ceejbot.com/posts/reduce-friction/">Reduce Friction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://twitter.com/sh_reya/status/1521903041003225088">&lt;em>&amp;ldquo;Some MLOps principles I think every ML platform should
have&amp;rdquo;&lt;/em>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://twitter.com/seanjtaylor/status/1523096896532664320">&lt;em>&amp;ldquo;It&amp;rsquo;s not uncommon for tech companies to have more employees than people
expect. What’s your best explanation for this
phenomenon?&amp;rdquo;&lt;/em>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jsvine.com/consulting/pdf-data-extraction/">PDF Data Extraction
Consulting&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://joeldueck.com/wiki?name=A+lightweight+Pollen+replacement">A Lightweight Pollen
Replacement&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://begriffs.com/posts/2019-07-19-history-use-vim.html">History and Effective Use of
Vim&lt;/a>&lt;/li>
&lt;/ul></content></entry><entry><title>Datasets and Dictionaries for Crosswords</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/crosswords-datasets-dictionaries/"/><id>https://www.georgeho.org/crosswords-datasets-dictionaries/</id><updated>2022-07-30T00:00:00Z</updated><published>2022-07-30T00:00:00Z</published><content type="html">&lt;p>Lately, I&amp;rsquo;ve become worryingly knowledgeable in datasets for crosswords&amp;hellip; so
I&amp;rsquo;ve written up basically everything I know that might be helpful to crossword
constructors (and makers of other word puzzles, too). However, in writing this,
I realized that this may be helpful to just about anybody who works with words
&amp;mdash; lyricists, poets, marketers, scholars, etc. Hopefully there&amp;rsquo;s something for
everybody! So without further ado,&lt;/p>
&lt;h2 id="dictionaries">Dictionaries&lt;/h2>
&lt;p>I&amp;rsquo;ll assume you know what a dictionary is &amp;mdash; if you&amp;rsquo;re reading this you may
even have a &lt;em>favorite&lt;/em> dictionary (or a favorite dictionary &lt;em>edition!&lt;/em>),
whether it&amp;rsquo;s &lt;a href="https://chambers.co.uk">Chambers&lt;/a>,
&lt;a href="https://www.merriam-webster.com">Merriam-Webster&lt;/a> or &lt;a href="https://en.wikipedia.org/wiki/Google_Dictionary">Google
Dictionary&lt;/a> (which, &lt;a href="https://support.google.com/websearch/answer/10106608">fun
fact&lt;/a>, is mostly sourced
from &lt;a href="https://languages.oup.com/google-dictionary-en/">Oxford Languages&lt;/a>).&lt;/p>
&lt;p>More interesting are dictionaries that allow you to search or query them in
more sophisticated ways: the most popular are &lt;a href="https://onelook.com">OneLook&lt;/a>
and &lt;a href="https://www.onelook.com/thesaurus">OneLook Thesaurus&lt;/a>, where a user can,
for example, search &lt;code>bl????rd&lt;/code> to find words that start with &lt;em>bl&lt;/em>, end with
&lt;em>rd&lt;/em>, and have four letters in between &amp;mdash; so &lt;code>bluebird&lt;/code> would be a result.&lt;/p>
&lt;p>The main asset with these dictionaries is the &lt;em>expressiveness&lt;/em> of the query
language, and in that regard &lt;a href="https://www.quinapalus.com/qat.html">Qat&lt;/a> (which
is also available in French) handily beats OneLook: it can match vowels and
consonants (&lt;code>bl@@#@rd&lt;/code>) and ranges of letters and lengths (&lt;code>8-10:bl*rd&lt;/code>). Qat
is also able to solve &amp;ldquo;word equations&amp;rdquo; (e.g.
&lt;a href="https://www.quinapalus.com/cgi-bin/qat?pat=ABCDE%3D.....%3B!%3DA%3CB%3CC%3CD%3CE">&lt;code>ABCDE=.....;!=A&amp;lt;B&amp;lt;C&amp;lt;D&amp;lt;E&lt;/code>&lt;/a>
finds five-letter words whose letters are in strictly alphabetical order, such
as &lt;code>abhor&lt;/code> and &lt;code>first&lt;/code>), and even &lt;em>simultaneous&lt;/em> word equations (e.g.
&lt;a href="https://www.quinapalus.com/cgi-bin/qat?pat=ACB%3BADB%3BAEB%3B%7CACB%7C%3D5%3B%7CE%7C%3D1%3B!%3DC%3CD%3CE">&lt;code>ACB;ADB;AEB;|ACB|=5;|E|=1;!=C&amp;lt;D&amp;lt;E&lt;/code>&lt;/a>
finds sets of three five-letter words that are all one letter apart, such as
&lt;code>beats, boats, brats&lt;/code> &amp;mdash; useful for finding crossing words!).&lt;/p>
&lt;h2 id="augmented-dictionaries">Augmented Dictionaries&lt;/h2>
&lt;p>Many tools supplement dictionaries with other data, such as etymology,
pronunciation or sets of related words. You might think that your favorite
dictionary would already give you all of those things, but the strength here is
in the ability to easily write very sophisticated queries, such as &lt;a href="https://api.datamuse.com/words?rel_com=car&amp;amp;sp=t*">&lt;em>&amp;ldquo;what
comprises a car that starts with the letter
T?&amp;rdquo;&lt;/em>&lt;/a>, to give you phrases
like &lt;code>trunk, throttle, tailfin, third gear&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>The &lt;a href="https://www.etymonline.com/">Online Etymology Dictionary&lt;/a> looks up word
etymologies, which is helpful for avoiding &lt;em>&amp;ldquo;shared roots&amp;rdquo;&lt;/em> in cryptic
crosswords.&lt;/li>
&lt;li>The &lt;a href="http://www.speech.cs.cmu.edu/cgi-bin/cmudict">Carnegie Mellon University Pronouncing
Dictionary&lt;/a> looks up word
pronunciations, splitting words up into phonemes. This may seem silly
&lt;em>(&amp;ldquo;can&amp;rsquo;t you just Google to learn the pronounciation of words?&amp;rdquo;),&lt;/em> but with a
bit of work, this dataset lets you look up homophones and Spoonerisms, as
some crossword construction software &amp;mdash; such as &lt;a href="https://exet.app">Exet&lt;/a> &amp;mdash; do!&lt;/li>
&lt;li>&lt;a href="https://rhymezone.com/">RhymeZone&lt;/a> and its Spanish cousin
&lt;a href="https://rimar.io/">Rimar.io&lt;/a> let you look up homophones, rhymes or near
rhymes (RhymeZone actually uses the CMU Pronouncing Dictionary, among other
datasets!)&lt;/li>
&lt;li>&lt;a href="https://onelook.com/spruce/">Spruce&lt;/a> looks up &amp;ldquo;inspiring sentences&amp;rdquo; &amp;mdash;
quotes, lyrics, proverbs and jokes, which are indexed from
&lt;a href="https://en.wikiquote.org/wiki/Main_Page">WikiQuote&lt;/a> and &lt;a href="https://commoncrawl.org/">Common
Crawl&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://nutrimatic.org/">Nutrimatic&lt;/a> looks up words or phrases mined from
Wikipedia. This allows you to, for example, find anagrams that form
natural-sounding phrases (e.g. &lt;code>&amp;lt;dictionaries&amp;gt;&lt;/code> finds anagrams like &lt;code>is a direction&lt;/code> or &lt;code>i consider it a&lt;/code>, instead of anagrams that technically work
but are not natural-sounding, such as &lt;code>ratio incised&lt;/code> or &lt;code>tonic dairies&lt;/code>).&lt;/li>
&lt;li>The &lt;a href="https://www.datamuse.com/api/">Datamuse API&lt;/a> is a very expressive search
engine that sits on top of OneLook and RhymeZone. Unfortunately, there isn&amp;rsquo;t
a user-friendly frontend, so it&amp;rsquo;s effectively restricted to people who are
able to make use of programmatic access.&lt;/li>
&lt;/ul>
&lt;p>Here, another shoutout goes to &lt;a href="https://www.onelook.com/thesaurus/">OneLook
Thesaurus&lt;/a> and
&lt;a href="https://www.quinapalus.com/qat.html">Qat&lt;/a>, which use several datasets (such as
the &lt;a href="https://wordnet.princeton.edu/">Princeton WordNet&lt;/a> and Wikipedia category
lists) to search words based on their meaning. For example, in OneLook,
&lt;code>process by which plants eat&lt;/code> gives you &lt;code>photosynthesis&lt;/code> as the top result; in
Qat, &lt;code>{hypo:color}&lt;/code> gives you words that mean &amp;ldquo;color&amp;rdquo;, such as &lt;code>acrylic apricot blacken blueing&lt;/code>; also in Qat, &lt;code>{hyper:agate}&lt;/code> gives you words that &amp;ldquo;agate&amp;rdquo;
means, such as &lt;code>entity matter quartz&lt;/code>. These searches make it easy to find
synonyms, hypernyms, hyponyms and other related words.&lt;/p>
&lt;h2 id="curated-dictionaries">Curated Dictionaries&lt;/h2>
&lt;p>In the other direction are datasets that don&amp;rsquo;t &lt;em>augment&lt;/em> dictionaries, but
rather &lt;em>curate&lt;/em> them: their usefulness comes not just in what you &lt;em>can&lt;/em> find in
them, but equally in what you &lt;em>can&amp;rsquo;t&lt;/em>.&lt;/p>
&lt;p>The most prevalent examples are wordlists and their cousins, seedlists. As far
as I can tell, these are more useful for American-style crosswords, where there
is a hard requirement for fully interlocking grids (and grid-filling
consequently is a more difficult and computer-assisted task).&lt;/p>
&lt;p>Wordlists tend to be personalized by puzzle constructors, and you can find some
wordlists for sale, most notably &lt;a href="https://www.xwordinfo.com/WordList">Jeff Chen&amp;rsquo;s Personal
List&lt;/a>. There are also several
freely-accessible ones such as &lt;a href="https://www.spreadthewordlist.com/">spread the
word(list)&lt;/a>, &lt;a href="https://github.com/Crossword-Nexus/collaborative-word-list">The Collaborative Word
List&lt;/a>, and &lt;a href="https://peterbroda.me/crosswords/wordlist/">Peter
Broda&amp;rsquo;s wordlist&lt;/a>.&lt;/p>
&lt;p>Other examples of curated dictionaries would just be lists of specific things.
One amazing example is the &lt;a href="https://sites.google.com/view/expandedcrosswordnamedatabase/home">Expanded Crossword Name
Database&lt;/a>,
which contains the names of notable women and non-binary people, with an eye to
increasing their representation in crosswords. Aside from that, I&amp;rsquo;ve found
Wikipedia&amp;rsquo;s &amp;ldquo;listicles&amp;rdquo; to be very helpful (e.g. here&amp;rsquo;s a list of &lt;a href="https://en.wikipedia.org/wiki/List_of_Native_Americans_of_the_United_States">notable
Native Americans of the United
States&lt;/a>).&lt;/p>
&lt;h2 id="datasets-of-crosswords">Datasets of Crosswords&lt;/h2>
&lt;p>Finally, let&amp;rsquo;s not neglect the most obvious thing: literal datasets of
crosswords! These datasets are are significant works of crossword archivism,
since acquiring crosswords in bulk and structuring their contents requires
effort and cleaning that few are willing to do for such trivial data. (Fun
fact: according to &lt;a href="https://cryptics.georgeho.org/static/documents/Selection_AppendixE_v2.pdf">this 2004 selection
guide&lt;/a>,
the Library of Congress explicitly does not collect crossword puzzles,
suggesting that they&amp;rsquo;re too trivial for the national library!)&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.xwordinfo.com/">XWord Info&lt;/a> is probably the dataset with largest
following, as it covers the &lt;em>The New York Times&amp;rsquo;&lt;/em> crossword and is actively
maintained.&lt;/li>
&lt;li>Among constructors of American-style crosswords, &lt;a href="https://tiwwdty.com/clue/">Matt Ginsberg&amp;rsquo;s clue
dataset&lt;/a> is the go-to dataset (since it&amp;rsquo;s free and
accessible to download), but it&amp;rsquo;s unfortunately no longer actively
maintained.&lt;/li>
&lt;li>&lt;a href="https://xd.saul.pw/">&lt;code>xd.saul.pw&lt;/code>&lt;/a> is an excellent dataset of American-style
crossword and clues from various publications that is also free and
accessible to download.&lt;/li>
&lt;li>The &lt;a href="https://www.cruciverb.com/data.php">Cruciverb database&lt;/a> is also a
dataset of American-style crossword and clues, but unfortunately requires a
membership to access.&lt;/li>
&lt;li>Finally, to plug my own dataset,
&lt;a href="https://cryptics.georgeho.org/">&lt;code>cryptics.georgeho.org&lt;/code>&lt;/a> is a dataset of
cryptic clues, with auxiliary datasets of cryptic indicators and charades.&lt;/li>
&lt;/ul></content></entry><entry><title>Link Bulletin, April 2022</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/link-bulletin-2022-04/"/><id>https://www.georgeho.org/link-bulletin-2022-04/</id><updated>2022-04-23T00:00:00Z</updated><published>2022-04-23T00:00:00Z</published><content type="html">&lt;p>This is the first of a new kind of blog post that I&amp;rsquo;m trying, on the theory
that the links I find interesting might also be interesting to others: at most
once a month, I&amp;rsquo;ll compile and post a handful of links that I&amp;rsquo;ve read and
thought about, with minimal explanation or commentary. Here we go!&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cdn.ca9.uscourts.gov/datastore/opinions/2022/04/18/17-16783.pdf">Ninth Circuit Court Opinion, &lt;em>hiQ Labs, Inc. v. Linkedin
Corporation&lt;/em>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.courtlistener.com/docket/6071320/hiq-labs-inc-v-linkedin-corporation/">California District Court Case, &lt;em>hiQ Labs, Inc. v. Linkedin
Corporation&lt;/em>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/simonw/shot-scraper">&lt;code>shot-scraper&lt;/code>: a tool for taking automated screenshots of
websites&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://palewi.re/docs/news-homepages/">&lt;code>news-homepages&lt;/code>: a bot that gathers, archives and shares screenshots of
news homepages&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://crosshare.org/">Crosshare: a free, ad-free, and open-source place to create, share and solve
crossword puzzles&lt;/a>&lt;/li>
&lt;/ul></content></entry><entry><title>How to Improve Your Static Site's Typography</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/static-site-typography/"/><id>https://www.georgeho.org/static-site-typography/</id><updated>2022-03-21T00:00:00Z</updated><published>2022-03-21T00:00:00Z</published><content type="html">&lt;p>You&amp;rsquo;ve read that &lt;a href="https://ia.net/topics/the-web-is-all-about-typography-period">web design is 95%
typography&lt;/a>. You
have a static website. You&amp;rsquo;ve wanted to improve its typography but have never
had the time or patience. You&amp;rsquo;ve might&amp;rsquo;ve even heard of Butterick&amp;rsquo;s &lt;a href="https://practicaltypography.com/">&lt;em>Practical
Typography&lt;/em>&lt;/a>. If this sounds like you, you&amp;rsquo;re
in luck!&lt;/p>
&lt;p>A foreword: you can achieve almost everything I describe here by adding CSS in
a &lt;code>&amp;lt;style&amp;gt;&lt;/code> tag at the end of your webpages&amp;rsquo; &lt;code>&amp;lt;head&amp;gt;&lt;/code>s, but the code snippets
I include here aren&amp;rsquo;t meant to be copypasta solutions, but illustrative
examples.&lt;/p>
&lt;div>
&lt;h2>Contents&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#easy-wins">Easy Wins&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#choose-a-font">Choose a font&lt;/a>&lt;/li>
&lt;li>&lt;a href="#adjust-the-line-width-and-point-size">Adjust the line width and point size&lt;/a>&lt;/li>
&lt;li>&lt;a href="#adjust-the-line-height">Adjust the line height&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#low-hanging-fruit">Low-Hanging Fruit&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#adjust-paragraph-and-header-spacing">Adjust paragraph and header spacing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#choose-a-monospaced-font-and-display-font">Choose a monospaced font and display font&lt;/a>&lt;/li>
&lt;li>&lt;a href="#set-a-background-color">Set a background color&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#braver-undertakings">Braver Undertakings&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#format-code-blocks">Format code blocks&lt;/a>&lt;/li>
&lt;li>&lt;a href="#support-sidenotes">Support sidenotes&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;h2 id="easy-wins">Easy Wins&lt;/h2>
&lt;p>Body text &amp;mdash; the text that forms the main content of your website &amp;mdash; is the
most important part of your website. These three things largely determine how
your body text looks, and nailing them can immediately improve your website&amp;rsquo;s
typography.&lt;/p>
&lt;h3 id="choose-a-font">Choose a font&lt;/h3>
&lt;p>Many static sites default to system fonts&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>: that is, fonts that are likely
already installed on readers&amp;rsquo; devices. This putatively boosts performance
(because readers need not download font files), and can give a more comfortable
look, since it can blend in with the fonts of the reader&amp;rsquo;s operating system.&lt;/p>
&lt;p>However, many system fonts aren&amp;rsquo;t good, and many others have become hackneyed
&lt;em>precisely because they are default fonts&lt;/em>. It&amp;rsquo;s also straightforward to use
custom webfonts or font hosting services like &lt;a href="https://fonts.google.com/">Google
Fonts&lt;/a>.&lt;/p>
&lt;p>Obviously you should do what you think is best for your website, but I&amp;rsquo;d point
out that &lt;strong>changing your body font is an easy and effective way to upgrade your
typography and distinguish your writing from the sea of sans-serif on the
Internet.&lt;/strong> Live a little!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* Use your own static font file(s).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> You should have a font face for regular, bold and italics. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>@&lt;span style="color:#66d9ef">font-face&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">font-family&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fira Sans&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">src&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">url&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/assets/fonts/FiraSansRegular.woff2&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">format&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;woff2&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">font-style&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">normal&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">font-weight&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">400&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* Fall back on system fonts. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">body&lt;/span> { &lt;span style="color:#66d9ef">font-family&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Fira Sans&amp;#34;&lt;/span>, Verdana, &lt;span style="color:#66d9ef">sans-serif&lt;/span>; }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* Alternatively, use a font hosting service like Google Fonts.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> Again, have a font face for regular, bold and italics. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#f92672">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;preconnect&amp;#34;&lt;/span> &lt;span style="color:#f92672">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://fonts.googleapis.com&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#f92672">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;preconnect&amp;#34;&lt;/span> &lt;span style="color:#f92672">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://fonts.gstatic.com&amp;#34;&lt;/span> &lt;span style="color:#f92672">crossorigin&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#f92672">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://fonts.googleapis.com/css2?family=Fira+Sans&amp;amp;display=swap&amp;#34;&lt;/span> &lt;span style="color:#f92672">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;stylesheet&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* Fall back on system fonts. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">body&lt;/span> { &lt;span style="color:#66d9ef">font-family&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Fira Sans&amp;#34;&lt;/span>, Verdana, &lt;span style="color:#66d9ef">sans-serif&lt;/span>; }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="adjust-the-line-width-and-point-size">Adjust the line width and point size&lt;/h3>
&lt;p>The ultimate goal is to control the &lt;em>average number of characters per line:&lt;/em>
too many, and lines run on interminably; too few, and you force readers&amp;rsquo; eyes
to dart uncomfortably back and forth. &lt;strong>Aim to fit between two and three full
English alphabets per line.&lt;/strong>&lt;/p>
&lt;p>The twist is that this has to be done regardless of the screen size &amp;mdash; most
obviously, it has to work on both desktop and mobile screens. This leads to
concept of &lt;em>fluid type&lt;/em>, which just means that the font size changes in reponse
to the screen width.&lt;/p>
&lt;p>Try adjusting your window size (or rotating your phone) to see how the line
width and point size adjust to always fit between two and three alphabets in
the following paragraph:&lt;/p>
&lt;p>abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz&lt;/p>
&lt;p>CSS Tricks has an &lt;a href="https://css-tricks.com/simplified-fluid-typography/">excellent
tutorial&lt;/a> for fluid type
with CSS, which boils down to clever use of &lt;code>min&lt;/code>, &lt;code>max&lt;/code> and &lt;code>vw&lt;/code>: the font
sizes goes between 16px on a 320px screen to 22px on a 1000px screen.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">body&lt;/span> { &lt;span style="color:#66d9ef">max-width&lt;/span>: &lt;span style="color:#ae81ff">720&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">html&lt;/span> { &lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#a6e22e">min&lt;/span>(&lt;span style="color:#a6e22e">max&lt;/span>(&lt;span style="color:#ae81ff">16&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#66d9ef">vw&lt;/span>), &lt;span style="color:#ae81ff">22&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>); }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="adjust-the-line-height">Adjust the line height&lt;/h3>
&lt;p>The goal is to control &lt;em>how closely consecutive lines sit next to each other:&lt;/em>
too tightly and you get intimidating walls of text; too loosely and your text
becomes a vaporous jumble of lines. &lt;strong>Aim to space lines between 120% to 145%
of the point size.&lt;/strong> (The text in this paragraph has a spacing of 145%. Just
right!)&lt;/p>
&lt;p style="line-height:1.1">
The goal is to control &lt;i>how closely consecutive lines sit next to each
other:&lt;/i> too tightly and you get intimidating walls of text; too loosely
and your text becomes a vaporous jumble of lines. &lt;b>Aim to space lines
between 120% to 145% of the point size.&lt;/b> (The text in this paragraph has a
spacing of 110%. Too dense.)
&lt;/p>
&lt;p style="line-height:1.6">
The goal is to control &lt;i>how closely consecutive lines sit next to each
other:&lt;/i> too tightly and you get intimidating walls of text; too loosely
and your text becomes a vaporous jumble of lines. &lt;b>Aim to space lines
between 120% to 145% of the point size.&lt;/b> (The text in this paragraph has a
spacing of 160%. Too sparse.)
&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">body&lt;/span> { &lt;span style="color:#66d9ef">line-height&lt;/span>: &lt;span style="color:#ae81ff">1.45&lt;/span>; }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="low-hanging-fruit">Low-Hanging Fruit&lt;/h2>
&lt;h3 id="adjust-paragraph-and-header-spacing">Adjust paragraph and header spacing&lt;/h3>
&lt;p>The goal is to &lt;em>enclose related pieces of text (i.e. sections and paragraphs)
with whitespace.&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/em> Done right, readers are presented with a structured and
scannable hierarchy of sections and paragraphs, instead of a soup of
equally-spaced lines.&lt;/p>
&lt;p>&lt;strong>Aim for paragraph spacing that is just large enough to be easily noticed:&lt;/strong> a
space equal to 50–100% of the body text size usually suffices. &lt;strong>Header spacing
is more of a judgement call.&lt;/strong> However, to quote &lt;a href="https://practicaltypography.com/space-above-and-below.html">Matthew
Butterick&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Semantically, headings relate to the text that follows, not the text before.
Thus you’ll probably want the space below to be smaller than the space above
so the heading is visually closer to the text it introduces.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">p&lt;/span> { &lt;span style="color:#66d9ef">margin-top&lt;/span>: &lt;span style="color:#ae81ff">20&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>; &lt;span style="color:#66d9ef">margin-bottom&lt;/span>: &lt;span style="color:#ae81ff">20&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">h1&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h2&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h3&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h4&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h5&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h6&lt;/span> { &lt;span style="color:#66d9ef">margin-top&lt;/span>: &lt;span style="color:#ae81ff">8&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>; &lt;span style="color:#66d9ef">margin-bottom&lt;/span>: &lt;span style="color:#ae81ff">-1&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>; }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="choose-a-monospaced-font-and-display-font">Choose a monospaced font and display font&lt;/h3>
&lt;p>Body text is the most important part of a website, so spend time making it look
good (you&amp;rsquo;ll notice that all three &lt;a href="#easy-wins">Easy Wins&lt;/a> were for the body
text). Once you&amp;rsquo;ve done that though, consider more fonts.&lt;/p>
&lt;p>Monospaced fonts (for code) lets readers easily distinguish between prose and
code, and display fonts (for titles and headers) can have much more color and
character. &lt;strong>Using a monospaced font can make technical, code-heavy text more
readable, and using a display font can lend your website personality.&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">h1&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h2&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h3&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h4&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h5&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h6&lt;/span> { &lt;span style="color:#66d9ef">font-family&lt;/span>: Verdana, &lt;span style="color:#66d9ef">sans-serif&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">code&lt;/span> { &lt;span style="color:#66d9ef">font-family&lt;/span>: Consolas, &lt;span style="color:#66d9ef">monospace&lt;/span>; }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="set-a-background-color">Set a background color&lt;/h3>
&lt;p>(This will involve some aesthetic redesign for your website, which is why it
isn&amp;rsquo;t higher on the list.)&lt;/p>
&lt;p>High contrast between text and background is good for legibility, but the
contrast between pure white (&lt;code>#ffffff&lt;/code>) and pure black (&lt;code>#000000&lt;/code>) can look
harsh and unsettling. &lt;strong>Web pages are better served by off-white and off-black
backgrounds&lt;/strong>, which are easier on the eyes while still retaining high
contrast. &lt;a href="https://edwardtufte.github.io/tufte-css/">Tufte CSS&lt;/a> suggests
&lt;code>#fffff8&lt;/code> and &lt;code>#111111&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* If the reader prefers dark mode, use off-black instead of off-white. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">body&lt;/span> { &lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#ae81ff">#fffff8&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>@&lt;span style="color:#66d9ef">media&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">prefers-color-scheme&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">dark&lt;/span>&lt;span style="color:#f92672">)&lt;/span> { &lt;span style="color:#f92672">body&lt;/span> { &lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#ae81ff">#111111&lt;/span>; } }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="braver-undertakings">Braver Undertakings&lt;/h2>
&lt;h3 id="format-code-blocks">Format code blocks&lt;/h3>
&lt;p>If you&amp;rsquo;re unlucky enough to know something about programming and noisy enough
to want to blog about it (both of which are unfortunately quite likely, if
you&amp;rsquo;re reading this), then &lt;strong>you probably want your code blocks to look good.&lt;/strong>&lt;/p>
&lt;p>CSS Tricks has &lt;a href="https://css-tricks.com/considerations-styling-pre-tag/">a fantastic tutorial on how to style &lt;code>&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;/code>
blocks&lt;/a>, which walks
through code wrapping, code block auto-expansion, syntax highlighting and space
control.&lt;/p>
&lt;p>Frustratingly, there was &lt;a href="https://stackoverflow.com/a/22417120/13372802">one bug that drove me up the
wall&lt;/a>, in which some lines of
code had their font size increased for seemingly no reason:&lt;/p>
&lt;blockquote>
&lt;p>WebKit has the annoying behavior (for a properly designed responsive site) of
trying to enlarge the font size for the &amp;ldquo;primary&amp;rdquo; text on the screen, where
primary is simply its best guess.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">pre&lt;/span> &lt;span style="color:#f92672">code&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* Don&amp;#39;t wrap long lines, force horizontal scrolling. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">white-space&lt;/span>: &lt;span style="color:#66d9ef">pre&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">overflow-x&lt;/span>: &lt;span style="color:#66d9ef">auto&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* https://stackoverflow.com/a/22417120/13372802 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text-size-adjust: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-ms-&lt;/span>text-size-adjust: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-moz-&lt;/span>text-size-adjust: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-webkit-&lt;/span>text-size-adjust: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="support-sidenotes">Support sidenotes&lt;/h3>
&lt;p>&lt;em>Sidenotes&lt;/em> are when footnotes are placed in the margins beside the text they
reference, instead of at the end of the page. They allow readers to instantly
read annotations instead of having to constantly click or scroll to and fro.
&lt;strong>Sidenotes greatly improve footnotes for the web, but are fairly difficult to
implement despite recent efforts.&lt;/strong>&lt;/p>
&lt;p>Gwern has compiled &lt;a href="https://www.gwern.net/Sidenotes">an exhaustive bibliography of sidenote
implementations&lt;/a>, which I recommend skimming
over before turning to &lt;a href="https://edwardtufte.github.io/tufte-css/">Tufte CSS&lt;/a>
for a simpler implementation.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Yeah I know, I&amp;rsquo;m interchanging &lt;em>font&lt;/em> and &lt;em>typeface&lt;/em>, but at least I have
a life.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Graphic designers may call this &lt;em>active whitespace:&lt;/em> whitespace
deliberately added for the sake of emphasis or structure.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></entry><entry><title>Migrating to Hugo</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/migrating-to-hugo/"/><id>https://www.georgeho.org/migrating-to-hugo/</id><updated>2022-03-05T00:00:00Z</updated><published>2022-03-05T00:00:00Z</published><content type="html">&lt;center>&lt;img src="https://www.georgeho.org/assets/images/blog-rewrite-meme.png">&lt;/center>
&lt;p>This weekend I migrated my blog to Hugo.&lt;/p>
&lt;p>My website is now based on the &lt;a href="https://github.com/janraasch/hugo-bearblog/">Hugo Bear Blog
theme&lt;/a>, generated with
&lt;a href="https://gohugo.io/">Hugo&lt;/a>, hosted by &lt;a href="https://pages.github.com/">GitHub Pages&lt;/a>
and served with &lt;a href="https://www.cloudflare.com/">Cloudflare&lt;/a>. I&amp;rsquo;ve also migrated
from the &lt;code>eigenfoo.xyz&lt;/code> domain to the more creditable-sounding &lt;code>georgeho.org&lt;/code>
(sadly, &lt;code>georgeho.com&lt;/code> and &lt;code>georgeho.net&lt;/code> were already taken). In terms of
typography, the header typeface is &lt;a href="https://www.1001freefonts.com/nicholson-gothic.font">Nicholson
Gothic&lt;/a>, the body typeface
is &lt;a href="https://mbtype.com/fonts/equity/">Equity&lt;/a> and the monospaced typeface for
occasional code snippets is &lt;a href="https://mbtype.com/fonts/triplicate/">Triplicate&lt;/a>.
In all, I probably spend the equivalent of two fancy lattes a year for this
setup.&lt;/p>
&lt;h2 id="why-hugo-why-not-jekyll">Why Hugo? Why Not Jekyll?&lt;/h2>
&lt;p>Honestly, no good reason! &lt;a href="https://vickiboykis.com/2022/01/08/migrating-to-hugo/">Some people point
out&lt;/a> that Jekyll is not
actively maintained or used anymore, and that GitHub Pages doesn&amp;rsquo;t support
Jekyll 4.0. However, those aren&amp;rsquo;t really good enough reasons for migrating a
blogging stack.&lt;/p>
&lt;p>Here&amp;rsquo;s a short list of things I like about Hugo over Jekyll &amp;mdash; but again, none
of these things really should have enticed me to make the jump.&lt;/p>
&lt;ul>
&lt;li>Ease of installation and use (Hugo is a binary executable instead of a Ruby
library), and it was very easy to make changes to the theme (e.g. changing
the font or &lt;a href="https://practicaltypography.com/line-length.html">increasing the font
size&lt;/a>) &amp;mdash; although that
could just be because &lt;a href="https://github.com/janraasch/hugo-bearblog/">the theme that I&amp;rsquo;m
using&lt;/a> is dead simple.&lt;/li>
&lt;li>Automatic generation of a &lt;a href="https://www.georgeho.org/sitemap.xml">sitemap&lt;/a> and &lt;a href="https://www.georgeho.org/feed.xml">RSS feed&lt;/a>
&amp;mdash; with Jekyll, these needed to be done manually (or by your theme).&lt;/li>
&lt;li>Typographical conveniences like automatic &lt;a href="https://practicaltypography.com/straight-and-curly-quotes.html">smart
quotes&lt;/a>,
rendering &lt;code>-&lt;/code>, &lt;code>--&lt;/code> and &lt;code>---&lt;/code> into &lt;a href="https://practicaltypography.com/hyphens-and-dashes.html">the appropriate hyphen or
dash&lt;/a>, and &lt;code>...&lt;/code>
into &lt;a href="https://practicaltypography.com/ellipses.html">an ellipsis&lt;/a>.&lt;/li>
&lt;li>Faster builds of my website&amp;hellip; although this isn&amp;rsquo;t really that helpful for
me, since my blog barely has a few dozen pages.&lt;/li>
&lt;/ul>
&lt;h2 id="the-migration">The Migration&lt;/h2>
&lt;p>&amp;hellip;was surprisingly painless! All I &lt;em>really&lt;/em> needed to do was to &lt;a href="https://themes.gohugo.io/">pick out a
theme&lt;/a>, follow the &lt;a href="https://gohugo.io/getting-started/quick-start/">Hugo Quick
Start&lt;/a>, dump my Markdown blog
posts into the &lt;code>content/&lt;/code> directory and change some of the YAML front matter in
all of my blog posts.&lt;/p>
&lt;p>In reality, I spent a few extra hours fiddling with the typography and making
sure that all my links were back-compatible with my previous website.&lt;/p>
&lt;h2 id="pollen">Pollen&lt;/h2>
&lt;p>This is actually not the first time I tried to rewrite my website: earlier this
year I experimented with writing a
&lt;a href="https://edwardtufte.github.io/tufte-css/">Tufte-inspired&lt;/a> blog using
&lt;a href="https://pollenpub.com">Pollen&lt;/a>. For those unfamiliar, it&amp;rsquo;s like R Markdown (in
that it&amp;rsquo;s a markup language that allows arbitrary R code to be embedded in it),
but instead of R, it&amp;rsquo;s &lt;a href="https://racket-lang.org/">Racket&lt;/a>, and instead of
Markdown, it&amp;rsquo;s your own domain-specific markup language that you build with
Racket.&lt;/p>
&lt;p>This means that I wrote a custom language specifically for formatting
Tufte-style two-column blog posts. It actually worked out pretty well (and the
resulting blog posts looked &lt;em>damn good&lt;/em>), but I couldn&amp;rsquo;t justify maintaining my
own language specifically for writing blog posts. I&amp;rsquo;d probably recommend using
Pollen for large, one-off pieces of writing (like a book), instead of small,
recurring pieces of writing (like a blog).&lt;/p></content></entry><entry><title>Data Collection is Hard. You Should Try It.</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/data-collection-is-hard/"/><id>https://www.georgeho.org/data-collection-is-hard/</id><updated>2022-03-03T00:00:00Z</updated><published>2022-03-03T00:00:00Z</published><content type="html">&lt;p>For people who make careers out of data, data scientists don&amp;rsquo;t have &lt;em>nearly&lt;/em>
enough experience in data collection &amp;mdash; and many data scientists don&amp;rsquo;t seem to
feel much cognitive dissonance from this fact, despite (very persuasive!)
&lt;a href="https://counting.substack.com/p/go-collect-some-and-data">overtures by a few valiant data
professionals&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>With this blog post I want to give a defense of data collection — not as an
activity that&amp;rsquo;s inherently worthwhile pursuing (I assume data professionals
don&amp;rsquo;t need to be convinced of that!), but as something that is worth doing even
for &lt;em>selfish&lt;/em> reasons. Why should you spend time learning about that data
collection system that&amp;rsquo;s being maintained by that other team at work? Why
should you consider collecting some data for your next side project? &lt;em>What&amp;rsquo;s
in it for you?&lt;/em>&lt;/p>
&lt;p>Throughout this blog post, I’ll be making comparisons to a recent project of
mine, &lt;a href="https://cryptics.georgeho.org/">&lt;code>cryptics.georgeho.org&lt;/code>&lt;/a>, a dataset of
cryptic crossword clues which I created and published last year.&lt;/p>
&lt;h2 id="learn-data-adjacent-technologies">Learn Data-Adjacent Technologies&lt;/h2>
&lt;p>The most obvious reason is that &lt;strong>collecting data is a unique opportunity to
learn many staple technologies in data&lt;/strong> &amp;mdash; and there aren&amp;rsquo;t many projects
that run the entire data tech stack.&lt;/p>
&lt;p>To enumerate these technologies:&lt;/p>
&lt;ol>
&lt;li>Compute services
&lt;ul>
&lt;li>Your data collection pipelines will need to run somewhere. Will that be in
the cloud, or on your local computer? How do you think about trading off
cost, compute and convenience?&lt;/li>
&lt;li>I ran most of my web scraping on DigitalOcean Droplets, but I could just
as easily have taken the opportunity to learn more about cloud compute
solutions or serverless functions like AWS EC2 or Lambda. These days, the
project runs incremental scrapes entirely on my laptop.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data storage
&lt;ul>
&lt;li>You’ll need to store your data somewhere, whether it be a relational or
NoSQL database, or just flat files. Since your data will outlive any code
you write, careful design of the data storage solution and schema will pay
dividends in the long run.&lt;/li>
&lt;li>I used SQLite for its simplicity and performance. However, as the scope of
the project expanded, I had to redesign the schema multiple times, which
was painful.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Labeling, annotation or other data transformations
&lt;ul>
&lt;li>After collecting your data, you may want to label, annotate, structure or
otherwise transform your data. For example, perhaps you’ll want to pull
structured tabular data out of unstructured PDFs or HTML tag soups;
another example might be to have humans label the data.&lt;/li>
&lt;li>This is the main “value-add” of your dataset &amp;mdash; while the time and effort
required to collect and store the data constitutes a moat, ultimately what
will distinguish your dataset to &lt;em>users&lt;/em> will be the transformations done
here.&lt;/li>
&lt;li>For me, this involved a lot of &lt;code>BeautifulSoup&lt;/code> to parse structured data
out of HTML pages. This required a &lt;a href="https://cryptics.georgeho.org/datasheet#collection-process">significant amount of development and
engineering
effort&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data licensing and copyright
&lt;ul>
&lt;li>Once you have your dataset, can you license, share or even sell your data?
The legality of data are a huge grey area (especially if there&amp;rsquo;s web
scraping involved), and while navigating these waters will be tricky, it&amp;rsquo;s
instructive to learn about it.&lt;/li>
&lt;li>I feel like the collection and structuring of cryptic crossword clues for
academic/archival purposes was fair use, and so didn&amp;rsquo;t worry too much
about the legality of my project — but it was an educational rabbit hole
to fall down!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Sharing and publishing data
&lt;ul>
&lt;li>The legal nuances of data aside, the technical problem of sharing data is
pretty tricky!&lt;/li>
&lt;li>This problem sits at the intersection of MLOps and information design: you
want to share the data in a standardized way, while having an interface
that making it easy for users to explore your data. Serving a tarball on a
web server technically works, but leaves so much on the table.&lt;/li>
&lt;li>&lt;code>cryptics.georgeho.org&lt;/code> uses &lt;a href="https://datasette.io/">Datasette&lt;/a>, which I
can&amp;rsquo;t recommend highly enough.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Writing documentation
&lt;ul>
&lt;li>If you think it&amp;rsquo;s hard to write and maintain good documentation for
software, imagine how difficult it must be to do the same for data, which
outlives software and is much harder to both create and version control.&lt;/li>
&lt;li>I&amp;rsquo;ve found &lt;a href="https://arxiv.org/abs/1803.09010">Gebru et al.&amp;rsquo;s &lt;em>Datasheets for
Datasets&lt;/em>&lt;/a> to be an excellent template
for documenting data.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="design-a-data-collection-system">Design a Data Collection System&lt;/h2>
&lt;p>Hopefully by now you can appreciate that every part of the data collection
pipeline involves not just technical proficiency with some system or framework,
but also an element sound architecture.&lt;/p>
&lt;p>&lt;strong>Collecting data is a great way to get experience designing an entire data
pipeline from end to end, from creation to delivery.&lt;/strong> This kind of opportunity
doesn&amp;rsquo;t come easily (even in industry!), and while your data pipeline won&amp;rsquo;t be
as sophisticated as the kinds you&amp;rsquo;ll find at data companies, you&amp;rsquo;ll still be
able to take away some valuable lessons from it.&lt;/p>
&lt;p>For &lt;code>cryptics.georgeho.org&lt;/code>, I found that the most valuable pattern for storing
data was to dump raw and unstructured data into a database (a &amp;ldquo;data lake&amp;rdquo;), and
then extract useful and structured data into a separate database (a &amp;ldquo;data
warehouse&amp;rdquo;). I also learnt that the historical backfilling ETL job required a
lot of time and compute, but subsequent incremental ETL jobs could just run off
of my laptop. These best practice patterns around data collection and
management are all applicable far beyond my simple side project, and were
valuable lessons to learn first-hand.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Puzzlingly, this trend doesn&amp;rsquo;t seem to be true of other forms of
unglamorous data work like data cleaning, where people generally accept that
&lt;a href="https://counting.substack.com/p/data-cleaning-is-analysis-not-grunt">data cleaning is not grunt
work&lt;/a>.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></entry><entry><title>Streaming Data with Tornado and WebSockets</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/tornado-websockets/"/><id>https://www.georgeho.org/tornado-websockets/</id><updated>2021-10-05T00:00:00Z</updated><published>2021-10-05T00:00:00Z</published><content type="html">&lt;p>A lot of data science and machine learning practice assumes a static dataset,
maybe with some MLOps tooling for rerunning a model pipeline with the freshest
version of the dataset.&lt;/p>
&lt;p>Working with streaming data is an entirely different ball game, and it wasn&amp;rsquo;t
clear to me what tools a data scientist might reach for when dealing with
streaming data&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>I recently came across a pretty straightforward and robust solution:
&lt;a href="https://datatracker.ietf.org/doc/html/rfc6455">WebSockets&lt;/a> and
&lt;a href="https://www.tornadoweb.org/en/stable/">Tornado&lt;/a>. Tornado is a Python web
framework with strong support for asynchronous networking. WebSockets are a
way for two processes (or apps) to communicate with each other (similar to HTTP
requests with REST endpoints). Of course, Tornado has pretty good support for
WebSockets as well.&lt;/p>
&lt;p>In this blog post I&amp;rsquo;ll give a minimal example of using Tornado and WebSockets
to handle streaming data. The toy example I have is one app (&lt;code>server.py&lt;/code>)
writing samples of a Bernoulli to a WebSocket, and another app (&lt;code>client.py&lt;/code>)
listening to the WebSocket and keeping track of the posterior distribution for
a &lt;a href="https://www.georgeho.org/bayesian-bandits/">Beta-Binomial conjugate model&lt;/a>.
After walking through the code, I&amp;rsquo;ll discuss these tools, and why they&amp;rsquo;re good
choices for working with streaming data.&lt;/p>
&lt;p>For another tutorial on this same topic, you can check out &lt;a href="https://en.proft.me/2014/05/16/realtime-web-application-tornado-and-websocket/">&lt;code>proft&lt;/code>&amp;rsquo;s blog
post&lt;/a>.&lt;/p>
&lt;h2 id="server">Server&lt;/h2>
&lt;ul>
&lt;li>When &lt;code>WebSocketServer&lt;/code> is registered to a REST endpoint (in &lt;code>main&lt;/code>), it keeps
track of any processes who are listening to that endpoint, and pushes
messages to them when &lt;code>send_message&lt;/code> is called.
&lt;ul>
&lt;li>Note that &lt;code>clients&lt;/code> is a class variable, so &lt;code>send_message&lt;/code> is a class
method.&lt;/li>
&lt;li>This class could be extended to also listen to the endpoint, instead of
just blindly pushing messages out &amp;mdash; after all, WebSockets allow for
bidirectional data flow.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The &lt;code>RandomBernoulli&lt;/code> and &lt;code>PeriodicCallback&lt;/code> make a pretty crude example, but
you could write a class that transmits data in real-time to suit your use
case. For example, you could watch a file for any modifications using
&lt;a href="https://pythonhosted.org/watchdog/">&lt;code>watchdog&lt;/code>&lt;/a>, and dump the changes into
the WebSocket.&lt;/li>
&lt;li>The &lt;a href="https://www.tornadoweb.org/en/stable/web.html?highlight=websocket_ping#tornado.web.Application.settings">&lt;code>websocket_ping_interval&lt;/code> and &lt;code>websocket_ping_timeout&lt;/code> arguments to
&lt;code>tornado.Application&lt;/code>&lt;/a>
configure periodic pings of WebSocket connections, keeping connections alive
and allowing dropped connections to be detected and closed.&lt;/li>
&lt;li>It&amp;rsquo;s also worth noting that there&amp;rsquo;s a
&lt;a href="https://www.tornadoweb.org/en/stable/websocket.html?highlight=websocket_max_message_size#tornado.websocket.WebSocketHandler">&lt;code>tornado.websocket.WebSocketHandler.websocket_max_message_size&lt;/code>&lt;/a>
attribute. While this is set to a generous 10 MiB, it&amp;rsquo;s important that the
WebSocket messages don&amp;rsquo;t exceed this limit!&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34; Every 100ms, sample from a Bernoulli and write the value to a WebSocket. &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> random
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> tornado.ioloop
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> tornado.web
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> tornado.websocket
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">WebSocketServer&lt;/span>(tornado&lt;span style="color:#f92672">.&lt;/span>websocket&lt;span style="color:#f92672">.&lt;/span>WebSocketHandler):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;Simple WebSocket handler to serve clients.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Note that `clients` is a class variable and `send_message` is a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># classmethod.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clients &lt;span style="color:#f92672">=&lt;/span> set()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">open&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebSocketServer&lt;span style="color:#f92672">.&lt;/span>clients&lt;span style="color:#f92672">.&lt;/span>add(self)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">on_close&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebSocketServer&lt;span style="color:#f92672">.&lt;/span>clients&lt;span style="color:#f92672">.&lt;/span>remove(self)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@classmethod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">send_message&lt;/span>(cls, message: str):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Sending message &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>message&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> to &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>len(cls&lt;span style="color:#f92672">.&lt;/span>clients)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> client(s).&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> client &lt;span style="color:#f92672">in&lt;/span> cls&lt;span style="color:#f92672">.&lt;/span>clients:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> client&lt;span style="color:#f92672">.&lt;/span>write_message(message)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">RandomBernoulli&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>p &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.72&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;True p = &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>self&lt;span style="color:#f92672">.&lt;/span>p&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">sample&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> int(random&lt;span style="color:#f92672">.&lt;/span>uniform(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Create a web app whose only endpoint is a WebSocket, and start the web&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># app on port 8888.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app &lt;span style="color:#f92672">=&lt;/span> tornado&lt;span style="color:#f92672">.&lt;/span>web&lt;span style="color:#f92672">.&lt;/span>Application(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [(&lt;span style="color:#e6db74">r&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/websocket/&amp;#34;&lt;/span>, WebSocketServer)],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> websocket_ping_interval&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> websocket_ping_timeout&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">30&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app&lt;span style="color:#f92672">.&lt;/span>listen(&lt;span style="color:#ae81ff">8888&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Create an event loop (what Tornado calls an IOLoop).&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io_loop &lt;span style="color:#f92672">=&lt;/span> tornado&lt;span style="color:#f92672">.&lt;/span>ioloop&lt;span style="color:#f92672">.&lt;/span>IOLoop&lt;span style="color:#f92672">.&lt;/span>current()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Before starting the event loop, instantiate a RandomBernoulli and&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># register a periodic callback to write a sampled value to the WebSocket&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># every 100ms.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> random_bernoulli &lt;span style="color:#f92672">=&lt;/span> RandomBernoulli()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> periodic_callback &lt;span style="color:#f92672">=&lt;/span> tornado&lt;span style="color:#f92672">.&lt;/span>ioloop&lt;span style="color:#f92672">.&lt;/span>PeriodicCallback(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">lambda&lt;/span>: WebSocketServer&lt;span style="color:#f92672">.&lt;/span>send_message(str(random_bernoulli&lt;span style="color:#f92672">.&lt;/span>sample())), &lt;span style="color:#ae81ff">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> periodic_callback&lt;span style="color:#f92672">.&lt;/span>start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Start the event loop.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io_loop&lt;span style="color:#f92672">.&lt;/span>start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="client">Client&lt;/h2>
&lt;ul>
&lt;li>&lt;code>WebSocketClient&lt;/code> is a class that:
&lt;ol>
&lt;li>Can be &lt;code>start&lt;/code>ed and &lt;code>stop&lt;/code>ped to connect/disconnect to the WebSocket and
start/stop listening to it in a separate thread&lt;/li>
&lt;li>Can process every message (&lt;code>on_message&lt;/code>) it hears from the WebSocket: in
this case it simply maintains &lt;a href="https://www.georgeho.org/bayesian-bandits/#stochastic-aka-stationary-bandits">a count of the number of trials and
successes&lt;/a>,
but this processing could theoretically be anything. For example, you
could do some further processing of the message and then dump that into a
separate WebSocket for other apps (or even users!) to subscribe to.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>To connect to the WebSocket, we need to use a WebSocket library: thankfully
Tornado has a built-in WebSocket functionality (&lt;code>tornado.websocket&lt;/code>), but
we&amp;rsquo;re also free to use other libraries such as the creatively named
&lt;a href="https://github.com/aaugustin/websockets">&lt;code>websockets&lt;/code>&lt;/a> or
&lt;a href="https://github.com/websocket-client/websocket-client">&lt;code>websocket-client&lt;/code>&lt;/a>.&lt;/li>
&lt;li>Note that we run &lt;code>on_message&lt;/code> on the same thread as we run
&lt;code>connect_and_read&lt;/code>. This isn&amp;rsquo;t a problem so long as &lt;code>on_message&lt;/code> is fast
enough, but a potentially wiser choice would be to offload &lt;code>connect_and_read&lt;/code>
to a separate thread by instantiating a
&lt;a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor">&lt;code>concurrent.futures.ThreadPoolExecutor&lt;/code>&lt;/a>
and calling
&lt;a href="https://www.tornadoweb.org/en/stable/ioloop.html#tornado.ioloop.IOLoop.run_in_executor">&lt;code>tornado.ioloop.IOLoop.run_in_executor&lt;/code>&lt;/a>,
so as not to block the thread where the &lt;code>on_message&lt;/code> processing happens.&lt;/li>
&lt;li>The &lt;code>io_loop&lt;/code> instantiated in &lt;code>main&lt;/code> (as well as in &lt;code>server.py&lt;/code>) is
important: it&amp;rsquo;s how Tornado schedules tasks (a.k.a. &lt;em>callbacks&lt;/em>) for delayed
(a.k.a. &lt;em>asynchronous&lt;/em>) execution. To add a callback, we simply call
&lt;code>io_loop.add_callback()&lt;/code>.&lt;/li>
&lt;li>The &lt;a href="https://www.tornadoweb.org/en/stable/websocket.html?highlight=ping_#tornado.websocket.websocket_connect">&lt;code>ping_interval&lt;/code> and &lt;code>ping_timeout&lt;/code> arguments to
&lt;code>websocket_connect&lt;/code>&lt;/a>
configure periodic pings of the WebSocket connection, keeping connections
alive and allowing dropped connections to be detected and closed.&lt;/li>
&lt;li>The &lt;code>callback=self.maybe_retry_connection&lt;/code> is &lt;a href="https://github.com/tornadoweb/tornado/blob/1db5b45918da8303d2c6958ee03dbbd5dc2709e9/tornado/websocket.py#L1654-L1655">run on a future
&lt;code>WebSocketClientConnection&lt;/code>&lt;/a>.
&lt;code>websocket_connect&lt;/code> doesn&amp;rsquo;t actually establish the connection directly, but
rather returns a future. Hence, we try to get the &lt;code>future.result()&lt;/code> itself
(i.e. the WebSocket client connection) &amp;mdash; I don&amp;rsquo;t actually do anything with
the &lt;code>self.connection&lt;/code>, but you could if you wanted. In the event of an
exception while doing that, we assume there&amp;rsquo;s a problem with the WebSocket
connection and retry &lt;code>connect_and_read&lt;/code> after 3 seconds. This all has the
effect of recovering gracefully if the WebSocket is dropped or &lt;code>server.py&lt;/code>
experiences a brief outage for whatever reason (both of which are probably
inevitable for long-running apps using WebSockets).&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34; Stream data from the WebSocket and update the Beta posterior parameters online. &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> tornado.ioloop
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> tornado.websocket
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">WebSocketClient&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self, io_loop):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>connection &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>io_loop &lt;span style="color:#f92672">=&lt;/span> io_loop
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>num_successes &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>num_trials &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">start&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>connect_and_read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">stop&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>io_loop&lt;span style="color:#f92672">.&lt;/span>stop()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">connect_and_read&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Reading...&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tornado&lt;span style="color:#f92672">.&lt;/span>websocket&lt;span style="color:#f92672">.&lt;/span>websocket_connect(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> url&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ws://localhost:8888/websocket/&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> callback&lt;span style="color:#f92672">=&lt;/span>self&lt;span style="color:#f92672">.&lt;/span>maybe_retry_connection,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> on_message_callback&lt;span style="color:#f92672">=&lt;/span>self&lt;span style="color:#f92672">.&lt;/span>on_message,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ping_interval&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ping_timeout&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">30&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">maybe_retry_connection&lt;/span>(self, future) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>connection &lt;span style="color:#f92672">=&lt;/span> future&lt;span style="color:#f92672">.&lt;/span>result()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Could not reconnect, retrying in 3 seconds...&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>io_loop&lt;span style="color:#f92672">.&lt;/span>call_later(&lt;span style="color:#ae81ff">3&lt;/span>, self&lt;span style="color:#f92672">.&lt;/span>connect_and_read)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">on_message&lt;/span>(self, message):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> message &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Disconnected, reconnecting...&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>connect_and_read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message &lt;span style="color:#f92672">=&lt;/span> int(message)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>num_successes &lt;span style="color:#f92672">+=&lt;/span> message
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>num_trials &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alpha &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">+&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>num_successes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> beta &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">+&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>num_trials &lt;span style="color:#f92672">-&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>num_successes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mean &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>num_successes &lt;span style="color:#f92672">/&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>num_trials
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;α = &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>alpha&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">; β = &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>beta&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">; mean = &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>mean&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Create an event loop (what Tornado calls an IOLoop).&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io_loop &lt;span style="color:#f92672">=&lt;/span> tornado&lt;span style="color:#f92672">.&lt;/span>ioloop&lt;span style="color:#f92672">.&lt;/span>IOLoop&lt;span style="color:#f92672">.&lt;/span>current()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Before starting the event loop, instantiate a WebSocketClient and add a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># callback to the event loop to start it. This way the first thing the&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># event loop does is to start the client.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> client &lt;span style="color:#f92672">=&lt;/span> WebSocketClient(io_loop)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io_loop&lt;span style="color:#f92672">.&lt;/span>add_callback(client&lt;span style="color:#f92672">.&lt;/span>start)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Start the event loop.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io_loop&lt;span style="color:#f92672">.&lt;/span>start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="why-tornado">Why Tornado?&lt;/h2>
&lt;p>Tornado is a Python web framework, but unlike the more popular Python web
frameworks like &lt;a href="https://flask.palletsprojects.com/">Flask&lt;/a> or
&lt;a href="https://www.djangoproject.com/">Django&lt;/a>, it has strong support for
&lt;a href="https://www.tornadoweb.org/en/stable/guide/async.html#blocking">asynchronous networking and non-blocking
calls&lt;/a> &amp;mdash;
essentially, Tornado apps have one (single-threaded) event loop
(&lt;code>tornado.ioloop.IOLoop&lt;/code>), which handles all requests asynchronously,
dispatching incoming requests to the relevant non-blocking function as the
request comes in. As far as I know, Tornado is the only Python web framework
that does this.&lt;/p>
&lt;p>As an aside, Tornado seems to be &lt;a href="https://thehftguy.com/2020/10/27/my-experience-in-production-with-flask-bottle-tornado-and-twisted/">more popular in
finance&lt;/a>,
where streaming real-time data (e.g. market data) is very common.&lt;/p>
&lt;h2 id="why-websockets">Why WebSockets?&lt;/h2>
&lt;p>A sharper question might be, why WebSockets over HTTP requests to a REST
endpoint? After all, both theoretically allow a client to stream data in
real-time from a server.&lt;/p>
&lt;p>&lt;a href="https://stackoverflow.com/a/45464306">A lot can be said&lt;/a> when comparing
WebSockets and RESTful services, but I think the main points are accurately
summarized by &lt;a href="https://www.baeldung.com/rest-vs-websockets#usage">Kumar Chandrakant on
Baeldung&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>[A] WebSocket is more suitable for cases where a push-based and real-time
communication defines the requirement more appropriately. Additionally,
WebSocket works well for scenarios where a message needs to be pushed to
multiple clients simultaneously. These are the cases where client and server
communication over RESTful services will find it difficult if not prohibitive.&lt;/p>
&lt;/blockquote>
&lt;p>Tangentially, there&amp;rsquo;s one alternative that seems to be better than WebSockets
from a protocol standpoint, but unfortunately doesn&amp;rsquo;t seem to have support from
many Python web frameworks, and that is &lt;a href="https://www.smashingmagazine.com/2018/02/sse-websockets-data-flow-http2/">Server-Sent Events (a.k.a.
SSE)&lt;/a>:
it seems to be a cleaner protocol for unidirectional data flow, which is really
all that we need.&lt;/p>
&lt;p>Additionally, &lt;a href="https://lucumr.pocoo.org/2012/9/24/websockets-101/">Armin
Ronacher&lt;/a> has a much
starker view of WebSockets, seeing no value in using WebSockets over TCP/IP
sockets for this application:&lt;/p>
&lt;blockquote>
&lt;p>Websockets make you sad. [&amp;hellip;] Websockets are complex, way more complex than I
anticipated. I can understand that they work that way but I definitely don&amp;rsquo;t
see a value in using websockets instead of regular TCP connections if all you
want is to exchange data between different endpoints and neither is a browser.&lt;/p>
&lt;/blockquote>
&lt;p>My thought after reading these criticisms is that perhaps WebSockets aren&amp;rsquo;t the
ideal technology for handling streaming data (from a maintainability or
architectural point of view), but that doesn&amp;rsquo;t mean that they aren&amp;rsquo;t good
scalable technologies when they do work.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>There is &lt;a href="https://sqlstream.com/real-time-vs-streaming-a-short-explanation/">technically a difference&lt;/a> between &amp;ldquo;real-time&amp;rdquo; and &amp;ldquo;streaming&amp;rdquo;: &amp;ldquo;real-time&amp;rdquo; refers to data that comes in as it is created, whereas &amp;ldquo;streaming&amp;rdquo; refers to a system that processes data continuously. You stream your TV show from Netflix, but since the show was created long before you watched it, you aren&amp;rsquo;t viewing it in real-time.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></entry><entry><title>Joining Flatiron Health</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/joining-flatiron/"/><id>https://www.georgeho.org/joining-flatiron/</id><updated>2021-09-24T00:00:00Z</updated><published>2021-09-24T00:00:00Z</published><content type="html">&lt;p>An exciting professional update: today is my last day at
&lt;a href="https://www.point72.com/">Point72&lt;/a> and next month I’ll be joining &lt;a href="https://flatiron.com/">Flatiron
Health&lt;/a> as a data scientist on their machine learning
team! I&amp;rsquo;ll be working out of their SoHo offices, and will continue to be based
in New York.&lt;/p>
&lt;p>&lt;img src="https://www.georgeho.org/assets/images/flatiron-logo.png" alt="Flatiron Health logo">&lt;/p>
&lt;p>Flatiron Health is a technology company in the healthcare space, trying to
accelerate oncology research and improve quality of cancer care through data
analytics.&lt;/p>
&lt;p>The past two years have been terrific, but needless to say, I&amp;rsquo;m looking forward
to adventures ahead! ⛵&lt;/p></content></entry><entry><title>`cryptics.georgeho.org` — A Dataset of Cryptic Crossword Clues</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/cryptic-clues/"/><id>https://www.georgeho.org/cryptic-clues/</id><updated>2021-09-11T00:00:00Z</updated><published>2021-09-11T00:00:00Z</published><content type="html">&lt;p>&lt;code>cryptics.georgeho.org&lt;/code> is a dataset of cryptic crossword clues&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, collected
from various blogs and publicly available digital archives. I originally
started this project to practice my web scraping and data engineering skills,
but as it&amp;rsquo;s evolved I hope it can be a resource to solvers and constructors of
cryptic crosswords.&lt;/p>
&lt;p>The project scrapes several blogs and digital archives for cryptic crosswords.
Out of these collected web pages, the clues, answers, clue numbers, blogger’s
explanation and commentary, puzzle title and publication date are all parsed
and extracted into a tabular dataset. The result (as of September 2021) is &lt;strong>a
little over half a million clues from cryptic crosswords over the past twelve
years&lt;/strong>, which makes for a rich and peculiar dataset.&lt;/p>
&lt;p>Without further ado, please check out
&lt;a href="https://cryptics.georgeho.org/">&lt;code>cryptics.georgeho.org&lt;/code>&lt;/a>!&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>If you&amp;rsquo;re new to cryptic crosswords, rejoice! A whole new world awaits you! The New Yorker has &lt;a href="https://www.newyorker.com/puzzles-and-games-dept/cryptic-crossword/reintroducing-the-new-yorkers-cryptic-crossword">an excellent introduction to cryptic crosswords&lt;/a>, and Matt Gritzmacher has &lt;a href="https://crosswordlinks.substack.com/">a daily newsletter with links to crosswords&lt;/a>.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></entry><entry><title>How Many Cryptic Crossword Grids Are There?</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/counting-cryptics/"/><id>https://www.georgeho.org/counting-cryptics/</id><updated>2021-05-17T00:00:00Z</updated><published>2021-05-17T00:00:00Z</published><content type="html">&lt;p>Counting the number of valid American-style crossword grids is more or less a
solved problem. For example, see this &lt;a href="https://fivethirtyeight.com/features/how-many-crossword-puzzles-can-you-make/">FiveThirtyEight
Riddler&lt;/a>
and &lt;a href="https://twitter.com/Log3overLog2/status/1092472516571000839">Michael Kleber&amp;rsquo;s answer in a Twitter
thread&lt;/a>.&lt;/p>
&lt;p>However, the same doesn&amp;rsquo;t seem to be true for British-style cryptic crosswords.
Hence this blog post!&lt;/p>
&lt;p>Now, &lt;em>counting&lt;/em> the number of valid grids is a different task from
&lt;em>enumerating&lt;/em> them, and it&amp;rsquo;s a bad idea to do the former by doing the latter,
because the sheer number of grids can be prohibitively expensive to compute.
However, I&amp;rsquo;m mostly interested in grids smaller than 11×11, and I actually
&lt;em>wanted&lt;/em> to see all possible grids, so I went ahead and did the inadvisable.&lt;/p>
&lt;p>So let&amp;rsquo;s jump right in! If you&amp;rsquo;re just interested in the numbers and a list of
all valid grids, feel free to scroll to the very end.&lt;/p>
&lt;h2 id="what-makes-a-valid-cryptic-grid">What Makes A Valid Cryptic Grid?&lt;/h2>
&lt;ol>
&lt;li>The grid must be &lt;strong>rotationally symmetric&lt;/strong>.&lt;/li>
&lt;li>The grid length (i.e. the length of one side of the grid) must be an &lt;strong>odd
number&lt;/strong>.&lt;/li>
&lt;li>All white squares must be &lt;strong>connected&lt;/strong>: that is, there can be only one
contiguous island of white squares.&lt;/li>
&lt;li>All words must have &lt;strong>half their letters checked&lt;/strong>.
&lt;ul>
&lt;li>For words of odd length, there&amp;rsquo;s some ambiguity: depending on who you talk
to, either &amp;ldquo;half rounded up&amp;rdquo; or &amp;ldquo;half rounded up or down&amp;rdquo; must be checked.&lt;/li>
&lt;li>For the purposes of this blog post, I required &amp;ldquo;half rounded up&amp;rdquo;.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>There &lt;strong>cannot be more than two consecutive unchecked squares&lt;/strong>.&lt;/li>
&lt;li>Two consecutive unchecked squares &lt;strong>cannot occur at the start or end of a
word&lt;/strong>.
&lt;ul>
&lt;li>I haven&amp;rsquo;t found much explicit mention of this rule other than &lt;a href="https://www.crosswordunclued.com/2009/09/crossword-grid-checking.html">this blog
post&lt;/a>
saying that it&amp;rsquo;s a &amp;ldquo;house rule&amp;rdquo; at &lt;em>The Times&lt;/em> of London, but all cryptics
I&amp;rsquo;ve seen have hewed to this requirement, so I enforced it.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>It&amp;rsquo;s also worth noting that different constructors and publications have
different &amp;ldquo;house rules&amp;rdquo;. For example:&lt;/p>
&lt;ul>
&lt;li>Some publications have upper and/or lower limits on the number of clues. For
example, &lt;a href="https://www.ft.com/crossword">the &lt;em>Financial Times&lt;/em>&lt;/a> seems to
always have exactly 32 clues.&lt;/li>
&lt;li>Some constructors also restrict the size of black islands: for example, there
cannot be a contiguous black island of more than five squares.&lt;/li>
&lt;/ul>
&lt;p>I didn&amp;rsquo;t enforce these rules, more out of laziness and lack of time than
technical infeasibility.&lt;/p>
&lt;h2 id="generating-cryptic-grids">Generating Cryptic Grids&lt;/h2>
&lt;p>Akshay Ravikumar has an &lt;a href="https://akshayr.xyz/blog/articles/counting-crosswords">excellent blog
post&lt;/a> explaining how he
generated American crosswords, and if you&amp;rsquo;re interested in diving deeper I
highly recommend reading his exposition: my algorithm is more or less directly
lifted from his work, just adapted to cryptic crosswords.&lt;/p>
&lt;p>Here&amp;rsquo;s the final algorithm that I used:&lt;/p>
&lt;ol>
&lt;li>Precompute all &lt;code>valid_rows&lt;/code> and &lt;code>symmetric_rows&lt;/code>: for a cryptic, these are
rows that don&amp;rsquo;t have words below the minimum word length.&lt;/li>
&lt;li>Using &lt;code>valid_rows&lt;/code> and &lt;code>symmetric_rows&lt;/code>, find all sets of valid middle three
rows &amp;mdash; for example, for an 11×11 grid, find all possible fifth, sixth and
seventh rows.
&lt;ul>
&lt;li>Note that the middle row must be symmetric, and the two adjacent rows must
be mirror images of each other.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>From the middle rows outward, build up a grid in a depth-first search.
&lt;ul>
&lt;li>Before adding a new row, make sure that it satisfies the checking
requirement: that it has the correct number of unchecked squares and has
at most two consecutive unchecked squares not at the start or end of
words.&lt;/li>
&lt;li>There is also a trick we can use to limit the search space: if the
previous three rows have a column that is black-white-white, then in the
same column, the next row must be white.&lt;/li>
&lt;li>This is best explained pictorially:
&lt;img src="https://www.georgeho.org/assets/images/counting-cryptics-illustration.png" alt="An illustration of the black-black-whitetrick">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Check that the columns are valid. Specifically:
&lt;ul>
&lt;li>Check that the columns are &lt;code>valid_rows&lt;/code> (this ensures that there are no
words below the minimum word length).&lt;/li>
&lt;li>And also check that the columns don&amp;rsquo;t have two consecutive unchecked
squares at the start or end of the word.&lt;/li>
&lt;li>Note that all other requirements (e.g. the number of checked squares) are
already taken care up while building up the grid.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Check connectedness of the grid using a &lt;a href="https://www.hackerearth.com/practice/algorithms/graphs/depth-first-search/tutorial/">depth-first
search&lt;/a>.&lt;/li>
&lt;/ol>
&lt;p>This algorithm works well and runs reasonably quickly (i.e. in less than a
minute) for 5×5 and 7×7 grids, but at 9×9 the search time becomes significant
(around half an hour on a MacBook Pro). Additionally, some valid grids aren&amp;rsquo;t
very interesting as &amp;ldquo;real&amp;rdquo; crosswords, such as the one below.&lt;/p>
&lt;center>&lt;pre>&lt;code>
⬛⬛⬛⬛⬜⬜⬜
⬛⬛⬛⬛⬜⬛⬜
⬛⬛⬛⬛⬜⬛⬜
⬜⬜⬜⬜⬜⬜⬜
⬜⬛⬜⬛⬛⬛⬛
⬜⬛⬜⬛⬛⬛⬛
⬜⬜⬜⬛⬛⬛⬛
&lt;/code>&lt;/pre>&lt;/center>
&lt;p>It&amp;rsquo;s not very interesting because of the sheer number of black squares (and
correspondingly low number of clues). So to winnow down the grids more, I
filtered &lt;code>valid_rows&lt;/code> before I start: &lt;code>valid_rows&lt;/code> must have a minimum number
of white squares: 2 squares for 5×5 and 3 squares for 7×7 through 13×13.
Anecdotally, this reduces the computation time by a factor of three or four. I
call the grids produced in this reduced search &lt;em>&amp;ldquo;interesting grids&amp;rdquo;,&lt;/em> as
opposed to &lt;em>&amp;ldquo;valid grids&amp;rdquo;&lt;/em>.&lt;/p>
&lt;p>I should note that there are definitely more ways to speed up the search: I
could&amp;rsquo;ve parallelize the search (i.e. assign each worker a subset of the valid
middle rows), I could&amp;rsquo;ve written the program in a language faster than Python
(like Julia), and further algorithmic speedups are possible (e.g. checking
columns after adding each row would prune more grids earlier, instead of
deferring the column checks to after the grid is constructed).&lt;/p>
&lt;p>At any rate, I just ran the program on my laptop, and stopped at 9×9 grids.
Results below!&lt;/p>
&lt;h2 id="results">Results&lt;/h2>
&lt;p>If you&amp;rsquo;ve just scrolled down here, the only thing you need to note is that an
&lt;em>&amp;ldquo;interesting grid&amp;rdquo;&lt;/em> is one in which every row has at least a certain number of
white squares: 2 for 5×5 grids and 3 for 7×7 grids onwards.&lt;/p>
&lt;p>For comparison, I&amp;rsquo;ve added the number of valid American grids, taken from
&lt;a href="https://twitter.com/Log3overLog2/status/1092795679947264000">Michael Kleber&amp;rsquo;s corrected
Tweet&lt;/a>.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Grid Size&lt;/th>
&lt;th style="text-align:right">Valid Grids&lt;/th>
&lt;th style="text-align:right">Interesting Grids&lt;/th>
&lt;th style="text-align:right">American Grids&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">5×5&lt;/td>
&lt;td style="text-align:right">17&lt;/td>
&lt;td style="text-align:right">9&lt;/td>
&lt;td style="text-align:right">12&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">7×7&lt;/td>
&lt;td style="text-align:right">346&lt;/td>
&lt;td style="text-align:right">43&lt;/td>
&lt;td style="text-align:right">312&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">9×9&lt;/td>
&lt;td style="text-align:right">9,381&lt;/td>
&lt;td style="text-align:right">334&lt;/td>
&lt;td style="text-align:right">31,187&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">11×11&lt;/td>
&lt;td style="text-align:right">N/A&lt;/td>
&lt;td style="text-align:right">N/A&lt;/td>
&lt;td style="text-align:right">17,438,702&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">13×13&lt;/td>
&lt;td style="text-align:right">N/A&lt;/td>
&lt;td style="text-align:right">N/A&lt;/td>
&lt;td style="text-align:right">40,575,832,476&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">15×15&lt;/td>
&lt;td style="text-align:right">N/A&lt;/td>
&lt;td style="text-align:right">N/A&lt;/td>
&lt;td style="text-align:right">404,139,015,237,875&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>There are 346 valid 7×7 cryptics &amp;mdash; interestingly, slightly more than the
pleasing 6 × 52 = 312 valid American-style crosswords which inspired &lt;a href="https://www.7xwords.com/why.html">Malaika
Handa&amp;rsquo;s 7xwords&lt;/a>; disappointingly,
factorizing into a not-at-all-auspicious 2 × 173.&lt;/p>
&lt;p>For larger grid lengths, there appear to be far fewer valid cryptic grids than
American grids, probably owing to the more stringent conditions for cryptics.&lt;/p>
&lt;p>It was infeasible for me to run my program for 11×11 grids onwards &amp;mdash; either I
need to put a lot more effort in optimizing my program, or (more likely) it&amp;rsquo;s
simply computationally intractable to enumerate all possible grids, and we can
only count them. If I&amp;rsquo;m inspired to pick up this line of work again, I&amp;rsquo;ll be
sure to post a part two!&lt;/p>
&lt;p>And finally, the code:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/eigenfoo/counting-cryptics">Source code (Python Jupyter Notebook)&lt;/a>&lt;/li>
&lt;li>Valid grids
&lt;ul>
&lt;li>&lt;a href="https://raw.githubusercontent.com/eigenfoo/counting-cryptics/main/valid_5x5_grids.txt">5×5&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://raw.githubusercontent.com/eigenfoo/counting-cryptics/main/valid_7x7_grids.txt">7×7&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://raw.githubusercontent.com/eigenfoo/counting-cryptics/main/valid_9x9_grids.txt">9×9&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Interesting grids
&lt;ul>
&lt;li>&lt;a href="https://raw.githubusercontent.com/eigenfoo/counting-cryptics/main/interesting_5x5_grids.txt">5×5&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://raw.githubusercontent.com/eigenfoo/counting-cryptics/main/interesting_7x7_grids.txt">7×7&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://raw.githubusercontent.com/eigenfoo/counting-cryptics/main/interesting_9x9_grids.txt">9×9&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></content></entry><entry><title>Understanding NUTS and HMC</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/understanding-nuts-hmc/"/><id>https://www.georgeho.org/understanding-nuts-hmc/</id><updated>2021-01-07T00:00:00Z</updated><published>2021-01-07T00:00:00Z</published><content type="html">&lt;p>&lt;em>&amp;ldquo;Bayesian modeling is harder than deep learning&amp;rdquo;&lt;/em> is a sentiment I&amp;rsquo;ve been
hearing a lot lately. While I&amp;rsquo;m skeptical of sweeping statements like that, I
agree when it comes to the central inference algorithm &amp;mdash; how MCMC samplers
work (especially the &lt;em>de facto&lt;/em> standard samplers, NUTS and HMC) is one of the
most difficult concepts I&amp;rsquo;ve tried to learn, and is certainly harder than
autodifferentiation or backpropagation.&lt;/p>
&lt;p>So I thought I&amp;rsquo;d share what worked for me when I tried to teach myself NUTS and
HMC. In chronological order of publication, these are the three resources that
I’d recommend reading to grok NUTS/HMC:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="http://www.mcmchandbook.net/HandbookChapter5.pdf">Radford Neal&amp;rsquo;s chapter in the MCMC
handbook&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://arxiv.org/abs/1111.4246">Matthew Hoffman’s &lt;em>The No-U-Turn Sampler&lt;/em> (a.k.a. the original NUTS
paper)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://arxiv.org/abs/1701.02434">Michael Betancourt’s &lt;em>Conceptual Introduction to Hamiltonian Monte
Carlo&lt;/em>&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>Not only did I find it useful to read these papers several times (as one would
read any sequence of &amp;ldquo;important&amp;rdquo; papers), but also to read them in both
chronological and reverse-chronological order. Reading both forwards and
backwards gave me multiple expositions of important ideas and also let me
mentally &amp;ldquo;diff&amp;rdquo; the papers to see the progression of ideas over time. For
example, Neal&amp;rsquo;s chapter was written before NUTS was discovered, which gives you
a sense of what the MCMC world looked like prior to Hoffman&amp;rsquo;s work: making
progress in fits and starts, but in need of a real leap forward.&lt;/p>
&lt;p>In terms of reading code, I&amp;rsquo;d recommend looking through &lt;a href="https://github.com/ColCarroll/minimc">Colin Carroll’s
&lt;code>minimc&lt;/code>&lt;/a> for a minimal working example
of NUTS in Python, written for pedagogy rather than actual sampling. For a
&amp;ldquo;real world&amp;rdquo; implementation of NUTS/HMC, I’d recommend looking through &lt;a href="https://github.com/eigenfoo/littlemcmc">my
&lt;code>littlemcmc&lt;/code>&lt;/a> for a standalone version
of PyMC3’s NUTS/HMC samplers.&lt;/p>
&lt;p>Finally, for anyone who wants to read around computational methods for Bayesian
inference more generally (i.e. not restricted to HMC, for example), I&amp;rsquo;d
(unashamedly) point to &lt;a href="https://www.georgeho.org/bayesian-inference-reading/">my blog post on
this&lt;/a>.&lt;/p></content></entry><entry><title>What I Wish Someone Had Told Me About Tensor Computation Libraries</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/tensor-computation-libraries/"/><id>https://www.georgeho.org/tensor-computation-libraries/</id><updated>2020-12-15T00:00:00Z</updated><published>2020-12-15T00:00:00Z</published><content type="html">&lt;p>I get confused with tensor computation libraries (or computational graph libraries, or symbolic
algebra libraries, or whatever they&amp;rsquo;re marketing themselves as these days).&lt;/p>
&lt;p>I was first introduced to PyTorch and TensorFlow and, having no other reference, thought they were
prototypical examples of tensor computation libraries. Then I learnt about Theano &amp;mdash; an older and
less popular project, but different from PyTorch and TensorFlow and better in some meaningful ways.
This was followed by JAX, which seemed to be basically NumPy with more bells and whistles (although
I couldn&amp;rsquo;t articulate what exactly they were). Then came &lt;a href="https://pymc-devs.medium.com/the-future-of-pymc3-or-theano-is-dead-long-live-theano-d8005f8a0e9b">the announcement by the PyMC developers
that Theano would have a new JAX
backend&lt;/a>.&lt;/p>
&lt;p>Anyways, this confusion prompted a lot of research and eventually, this blog post.&lt;/p>
&lt;p>Similar to &lt;a href="https://www.georgeho.org/prob-prog-frameworks/">my previous post on the anatomy of probabilistic programming
frameworks&lt;/a>, I’ll first discuss tensor computation
libraries in general &amp;mdash; what they are and how they can differ from one another. Then I&amp;rsquo;ll discuss
some libraries in detail, and finally offer an observation on the future of Theano in the context of
contemporary tensor computation libraries.&lt;/p>
&lt;div>
&lt;h2>Contents&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#dissecting-tensor-computation-libraries">Dissecting Tensor Computation Libraries&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#tensor-computation-library-----maybe-not-the-best-name">&amp;ldquo;Tensor Computation Library&amp;rdquo; &amp;mdash; Maybe Not The Best Name&lt;/a>&lt;/li>
&lt;li>&lt;a href="#some-differences-between-tensor-computation-libraries">(Some) Differences Between Tensor Computation Libraries&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#a-zoo-of-tensor-computation-libraries">A Zoo of Tensor Computation Libraries&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#pytorchhttpspytorchorg">&lt;a href="https://pytorch.org/">PyTorch&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#jaxhttpsjaxreadthedocsioenlatest">&lt;a href="https://jax.readthedocs.io/en/latest/">JAX&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#theanohttpstheano-pymcreadthedocsioenlatest">&lt;a href="https://theano-pymc.readthedocs.io/en/latest/">Theano&lt;/a>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#an-observation-on-static-graphs-and-theano">An Observation on Static Graphs and Theano&lt;/a>&lt;/li>
&lt;li>&lt;a href="#some-follow-ups-a-week-later">Some Follow-Ups, A Week Later&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;h2 id="dissecting-tensor-computation-libraries">Dissecting Tensor Computation Libraries&lt;/h2>
&lt;p>First, a characterization: what do tensor computation libraries even do?&lt;/p>
&lt;ol>
&lt;li>They provide ways of specifying and building computational graphs,&lt;/li>
&lt;li>They run the computation itself (duh), but also run &amp;ldquo;related&amp;rdquo; computations that either (a) &lt;em>use
the computational graph&lt;/em>, or (b) operate &lt;em>directly on the computational graph itself&lt;/em>,
&lt;ul>
&lt;li>The most salient example of the former is computing gradients via
&lt;a href="https://arxiv.org/abs/1502.05767">autodifferentiation&lt;/a>,&lt;/li>
&lt;li>A good example of the latter is optimizing the computation itself: think symbolic
simplifications (e.g. &lt;code>xy/x = y&lt;/code>) or modifications for numerical stability (e.g. &lt;a href="https://cs.stackexchange.com/q/68411">&lt;code>log(1 + x)&lt;/code>
for small values of &lt;code>x&lt;/code>&lt;/a>).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>And they provide &amp;ldquo;best execution&amp;rdquo; for the computation: whether it&amp;rsquo;s changing the execution by JIT
(just-in-time) compiling it, by utilizing special hardware (GPUs/TPUs), by vectorizing the
computation, or in any other way.&lt;/li>
&lt;/ol>
&lt;h3 id="tensor-computation-library-----maybe-not-the-best-name">&amp;ldquo;Tensor Computation Library&amp;rdquo; &amp;mdash; Maybe Not The Best Name&lt;/h3>
&lt;p>As an aside: I realize that the name &amp;ldquo;tensor computation library&amp;rdquo; is too broad, and that the
characterization above precludes some libraries that might also justifiably be called &amp;ldquo;tensor
computation libraries&amp;rdquo;. Better names might be &amp;ldquo;graph computation library&amp;rdquo; (although that might get
mixed up with libraries like &lt;a href="https://networkx.org/">&lt;code>networkx&lt;/code>&lt;/a>) or &amp;ldquo;computational graph management
library&amp;rdquo; or even &amp;ldquo;symbolic tensor algebra libraries&amp;rdquo;.&lt;/p>
&lt;p>So for the avoidance of doubt, here is a list of libraries that this blog post is &lt;em>not&lt;/em> about:&lt;/p>
&lt;ul>
&lt;li>NumPy and SciPy
&lt;ul>
&lt;li>These libraries don&amp;rsquo;t have a concept of a computational graph &amp;mdash; they’re more like a toolbox of
functions, called from Python and executed in C or Fortran.&lt;/li>
&lt;li>However, this might be a controversial distinction &amp;mdash; as we’ll see later, JAX also doesn&amp;rsquo;t build
an explicit computational graph either, and I definitely want to include JAX as a &amp;ldquo;tensor
computation library&amp;rdquo;&amp;hellip; ¯\_(ツ)_/¯&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Numba and Cython
&lt;ul>
&lt;li>These libraries provide best execution for code (and in fact some tensor computation libraries,
such as Theano, make good use them), but like NumPy and SciPy, they do not actually manage the
computational graph itself.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Keras, Trax, Flax and PyTorch-Lightning
&lt;ul>
&lt;li>These libraries are high-level wrappers around tensor computation libraries &amp;mdash; they basically
provide abstractions and a user-facing API to utilize tensor computation libraries in a
friendlier way.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="some-differences-between-tensor-computation-libraries">(Some) Differences Between Tensor Computation Libraries&lt;/h3>
&lt;p>Anyways, back to tensor computation libraries.&lt;/p>
&lt;p>All three aforementioned goals are ambitious undertakings with sophisticated solutions, so it
shouldn&amp;rsquo;t be surprising to learn that decisions in pursuit on goal can have implications for (or
even incur a trade-off with!) other goals. Here&amp;rsquo;s a list of common differences along all three axes:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Tensor computation libraries can differ in how they represent the computational graph, and how it
is built.&lt;/p>
&lt;ul>
&lt;li>Static or dynamic graphs: do we first define the graph completely and then inject data to run
(a.k.a. define-and-run), or is the graph defined on-the-fly via the actual forward computation
(a.k.a. define-by-run)?
&lt;ul>
&lt;li>TensorFlow 1.x was (in)famous for its static graphs, which made users feel like they were
&amp;ldquo;working with their computational graph through a keyhole&amp;rdquo;, especially when &lt;a href="https://news.ycombinator.com/item?id=13429355">compared to
PyTorch&amp;rsquo;s dynamic graphs&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Lazy or eager execution: do we evaluate variables as soon as they are defined, or only when a
dependent variable is evaluated? Usually, tensor computation libraries either choose to support
dynamic graphs with eager execution, or static graphs with lazy execution &amp;mdash; for example,
&lt;a href="https://www.tensorflow.org/guide/eager">TensorFlow 2.0 supports both modes&lt;/a>.&lt;/li>
&lt;li>Interestingly, some tensor computation libraries (e.g. &lt;a href="https://thinc.ai/">Thinc&lt;/a>) don&amp;rsquo;t even
construct an explicit computational graph: they represent it as &lt;a href="https://thinc.ai/docs/concept">chained higher-order
functions&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Tensor computation libraries can also differ in what they want to use the computational graph
&lt;em>for&lt;/em> &amp;mdash; for example, are we aiming to do things that basically amount to running the
computational graph in a &amp;ldquo;different mode&amp;rdquo;, or are we aiming to modify the computational graph
itself?&lt;/p>
&lt;ul>
&lt;li>Almost all tensor computation libraries support autodifferentiation in some capacity (either
forward-mode, backward-mode, or both).&lt;/li>
&lt;li>Obviously, how you represent the computational graph and what you want to use it for are very
related questions! For example, if you want to be able to represent aribtrary computation as a
graph, you&amp;rsquo;ll have to handle control flow like if-else statements or for-loops &amp;mdash; this leads
to common gotchas with &lt;a href="https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#%F0%9F%94%AA-Control-Flow">using Python for-loops in
JAX&lt;/a>
or needing to use &lt;a href="https://discuss.pytorch.org/t/can-you-have-for-loops-in-the-forward-prop/68295">&lt;code>torch.nn.ModuleList&lt;/code> in for-loops with
PyTorch&lt;/a>.&lt;/li>
&lt;li>Some tensor computation libraries (e.g. &lt;a href="https://github.com/Theano/Theano">Theano&lt;/a> and its
fork, &lt;a href="https://theano-pymc.readthedocs.io/en/latest/index.html">Theano-PyMC&lt;/a>) aim to &lt;a href="https://theano-pymc.readthedocs.io/en/latest/extending/optimization.html">optimize
the computational graph
itself&lt;/a>, for which an
&lt;a href="#an-observation-on-static-graphs-and-theano">explicit graph is necessary&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Finally, tensor computation libraries can also differ in how they execute code.&lt;/p>
&lt;ul>
&lt;li>All tensor computation libraries run on CPU, but the strength of GPU and TPU support is a major
differentiator among tensor computation libraries.&lt;/li>
&lt;li>Another differentiator is how tensor computation libraries compile code to be executed on
hardware. For example, do they use JIT compilation or not? Do they use &amp;ldquo;vanilla&amp;rdquo; C or CUDA
compilers, or &lt;a href="https://tensorflow.google.cn/xla">the XLA compiler for machine-learning specific
code&lt;/a>?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="a-zoo-of-tensor-computation-libraries">A Zoo of Tensor Computation Libraries&lt;/h2>
&lt;p>Having outlined the basic similarities and differences of tensor computation libraries, I think
it&amp;rsquo;ll be helpful to go through several of the popular libraries as examples. I&amp;rsquo;ve tried to link to
the relevant documentation where possible.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;h3 id="pytorchhttpspytorchorg">&lt;a href="https://pytorch.org/">PyTorch&lt;/a>&lt;/h3>
&lt;ol>
&lt;li>How is the computational graph represented and built?
&lt;ul>
&lt;li>PyTorch dynamically builds (and eagerly evaluates) an explicit computational graph. For more
detail on how this is done, check out &lt;a href="https://pytorch.org/docs/stable/notes/autograd.html">the PyTorch docs on autograd
mechanics&lt;/a>.&lt;/li>
&lt;li>For more on how PyTorch computational graphs, see &lt;a href="https://jdhao.github.io/2017/11/12/pytorch-computation-graph/">&lt;code>jdhao&lt;/code>&amp;rsquo;s introductory blog post on
computational graphs in
PyTorch&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>What is the computational graph used for?
&lt;ul>
&lt;li>To quote the &lt;a href="https://pytorch.org/docs/stable/index.html">PyTorch docs&lt;/a>, &amp;ldquo;PyTorch is an
optimized tensor library for deep learning using GPUs and CPUs&amp;rdquo; &amp;mdash; as such, the main focus is
on &lt;a href="https://pytorch.org/docs/stable/notes/autograd.html">autodifferentiation&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>How does the library ensure &amp;ldquo;best execution&amp;rdquo; for computation?
&lt;ul>
&lt;li>PyTorch has &lt;a href="https://pytorch.org/docs/stable/notes/cuda.html">native GPU support&lt;/a> via CUDA.&lt;/li>
&lt;li>PyTorch also has support for TPU through projects like
&lt;a href="https://github.com/pytorch/xla">PyTorch/XLA&lt;/a> and
&lt;a href="https://www.pytorchlightning.ai/">PyTorch-Lightning&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="jaxhttpsjaxreadthedocsioenlatest">&lt;a href="https://jax.readthedocs.io/en/latest/">JAX&lt;/a>&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>How is the computational graph represented and built?&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Instead of building an explicit computational graph to compute gradients, JAX simply supplies a
&lt;code>grad()&lt;/code> that returns the gradient function of any supplied function. As such, there is
technically no concept of a computational graph &amp;mdash; only pure (i.e. stateless and
side-effect-free) functions and their gradients.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://sjmielke.com/jax-purify.htm">Sabrina Mielke summarizes the situation very well&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>PyTorch builds up a graph as you compute the forward pass, and one call to &lt;code>backward()&lt;/code> on
some &amp;ldquo;result&amp;rdquo; node then augments each intermediate node in the graph with the gradient of the
result node with respect to that intermediate node. JAX on the other hand makes you express
your computation as a Python function, and by transforming it with &lt;code>grad()&lt;/code> gives you a
gradient function that you can evaluate like your computation function — but instead of the
output it gives you the gradient of the output with respect to (by default) the first
parameter that your function took as input.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>What is the computational graph used for?&lt;/p>
&lt;ul>
&lt;li>According to the &lt;a href="https://jax.readthedocs.io/en/latest/notebooks/quickstart.html">JAX quickstart&lt;/a>,
JAX bills itself as &amp;ldquo;NumPy on the CPU, GPU, and TPU, with great automatic differentiation for
high-performance machine learning research&amp;rdquo;. Hence, its focus is heavily on
autodifferentiation.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>How does the library ensure &amp;ldquo;best execution&amp;rdquo; for computation?&lt;/p>
&lt;ul>
&lt;li>
&lt;p>This is best explained by quoting the &lt;a href="https://jax.readthedocs.io/en/latest/notebooks/quickstart.html">JAX quickstart&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>JAX uses XLA to compile and run your NumPy code on [&amp;hellip;] GPUs and TPUs. Compilation happens
under the hood by default, with library calls getting just-in-time compiled and executed. But
JAX even lets you just-in-time compile your own Python functions into XLA-optimized kernels
[&amp;hellip;] Compilation and automatic differentiation can be composed arbitrarily [&amp;hellip;]&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>For more detail on JAX’s four-function API (&lt;code>grad&lt;/code>, &lt;code>jit&lt;/code>, &lt;code>vmap&lt;/code> and &lt;code>pmap&lt;/code>), see
&lt;a href="http://alexminnaar.com/2020/08/15/jax-overview.html">Alex Minaar&amp;rsquo;s overview of how JAX works&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="theanohttpstheano-pymcreadthedocsioenlatest">&lt;a href="https://theano-pymc.readthedocs.io/en/latest/">Theano&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> the &lt;a href="https://github.com/Theano/Theano">original Theano&lt;/a> (maintained by
&lt;a href="https://mila.quebec/en/">MILA&lt;/a>) has been discontinued, and the PyMC developers have forked the
project: &lt;a href="https://github.com/pymc-devs/Theano-PyMC">Theano-PyMC&lt;/a> (soon to be renamed Aesara). I&amp;rsquo;ll
discuss both the original and forked projects below.&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>How is the computational graph represented and built?
&lt;ul>
&lt;li>Theano statically builds (and lazily evaluates) an explicit computational graph.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>What is the computational graph used for?
&lt;ul>
&lt;li>Theano is unique among tensor computation libraries in that it places more emphasis on
reasoning about the computational graph itself. In other words, while Theano has &lt;a href="https://theano-pymc.readthedocs.io/en/latest/library/gradient.html">strong
support for
autodifferentiation&lt;/a>,
running the computation and computing gradients isn&amp;rsquo;t the be-all and end-all: Theano has an
entire module for &lt;a href="https://theano-pymc.readthedocs.io/en/latest/optimizations.html">optimizing the computational graph
itself&lt;/a>, and makes it fairly
straightforward to compile the Theano graph to different computational backends (by default,
Theano compiles to C or CUDA, but it’s straightforward to compile to JAX).&lt;/li>
&lt;li>Theano is often remembered as a library for deep learning research, but it’s so much more than
that!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>How does the library ensure &amp;ldquo;best execution&amp;rdquo; for computation?
&lt;ul>
&lt;li>The original Theano used the GCC C compiler for CPU computation, and the NVCC CUDA compiler for
GPU computation.&lt;/li>
&lt;li>The Theano-PyMC fork project &lt;a href="https://pymc-devs.medium.com/the-future-of-pymc3-or-theano-is-dead-long-live-theano-d8005f8a0e9b">will use JAX as a
backend&lt;/a>,
which can utilize CPUs, GPUs and TPUs as available.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="an-observation-on-static-graphs-and-theano">An Observation on Static Graphs and Theano&lt;/h2>
&lt;p>Finally, a quick observation on static graphs and the niche that Theano fills that other tensor
computation libraries do not. I had huge help from &lt;a href="https://twiecki.io/">Thomas Wiecki&lt;/a> and
&lt;a href="https://brandonwillard.github.io/">Brandon Willard&lt;/a> with this section.&lt;/p>
&lt;p>There&amp;rsquo;s been a consistent movement in most tensor computation libraries away from static graphs (or
more precisely, statically &lt;em>built&lt;/em> graphs): PyTorch and TensorFlow 2 both support dynamically
generated graphs by default, and JAX forgoes an explicit computational graph entirely.&lt;/p>
&lt;p>This movement is understandable &amp;mdash; building the computational graph dynamically matches people&amp;rsquo;s
programming intuition much better. When I write &lt;code>z = x + y&lt;/code>, I don&amp;rsquo;t mean &lt;em>&amp;ldquo;I want to register a sum
operation with two inputs, which is waiting for data to be injected&amp;rdquo;&lt;/em> &amp;mdash; I mean &lt;em>&amp;ldquo;I want to compute
the sum of &lt;code>x&lt;/code> and &lt;code>y&lt;/code>&amp;rdquo;.&lt;/em> The extra layer of indirection is not helpful to most users, who just want
to run their tensor computation at some reasonable speed.&lt;/p>
&lt;p>So let me speak in defence of statically built graphs.&lt;/p>
&lt;p>Having an explicit representation of the computational graph is immensely useful for certain things,
even if it makes the graph harder to work with. You can modify the graph (e.g. graph optimizations,
simplifications and rewriting), and you can reason about and analyze the graph. Having the
computation as an actual &lt;em>object&lt;/em> helps immeasurably for tasks where you need to think about the
computation itself, instead of just blindly running it.&lt;/p>
&lt;p>On the other hand, with dynamically generated graphs, the computational graph is never actually
defined anywhere: the computation is traced out on the fly and behind the scene. You can no longer
do anything interesting with the computational graph: for example, if the computation is slow, you
can&amp;rsquo;t reason about &lt;em>what&lt;/em> parts of the graph are slow. The end result is that you basically have to
hope that the framework internals are doing the right things, which they might not!&lt;/p>
&lt;p>This is the niche that Theano (or rather, Theano-PyMC/Aesara) fills that other contemporary tensor
computation libraries do not: the promise is that if you take the time to specify your computation
up front and all at once, Theano can optimize the living daylight out of your computation &amp;mdash; whether
by graph manipulation, efficient compilation or something else entirely &amp;mdash; and that this is something
you would only need to do once.&lt;/p>
&lt;hr>
&lt;h2 id="some-follow-ups-a-week-later">Some Follow-Ups, A Week Later&lt;/h2>
&lt;p>&lt;em>2020-12-22&lt;/em>&lt;/p>
&lt;p>The blog post trended &lt;a href="https://news.ycombinator.com/item?id=25435028">on Hacker
News&lt;/a> and got some discussion.
It&amp;rsquo;s stupefying how the most upvoted comments are either unrelated or
self-promotional, but I suppose that&amp;rsquo;s to be expected with the Internet.&lt;/p>
&lt;p>However, one nugget of gold in the junk pit is &lt;a href="https://news.ycombinator.com/item?id=25436656">this comment by Albert
Zeyer&lt;/a> and the &lt;a href="https://news.ycombinator.com/item?id=25439483">response by the
PyMC developer spearheading the Aesara project, Brandon
Willard&lt;/a>. I had two takeaways
from this exchange:&lt;/p>
&lt;ol>
&lt;li>Theano is messy, either in a code hygiene sense, or in an API design sense.
&lt;ul>
&lt;li>For example, the graph optimization/rewriting process can require entire
graphs to be copied at multiple points along the way. This obliterates
performance and was almost entirely due to some design oddities.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The JAX backend arose as a proof-of-concept of how extensible Theano is,
both in terms of &amp;ldquo;hackability&amp;rdquo; and how much mileage we can get out of the
design choices behind Theano (e.g. static graphs). The JAX backend isn&amp;rsquo;t the
focus of the fork, but it&amp;rsquo;s easily the difference that will stand out most
at the user level. The focus of the Aesara is &lt;em>resolving the design
shortcomings of Theano&lt;/em>.&lt;/li>
&lt;/ol>
&lt;p>On the one hand, I&amp;rsquo;m glad that I finally understand the &lt;em>real&lt;/em> focus of the
Aesara fork &amp;mdash; I feel like I have a &lt;em>much&lt;/em> greater appreciation of what Aesara
really is, and it&amp;rsquo;s place in the ecosystem of tensor computation libraries.&lt;/p>
&lt;p>On the other hand, I&amp;rsquo;m discomfited by the implication that meaningful
contributions to Aesara must involve deep expertise on computational graphs and
graph optimizations - neither of which I have experience in (and I suspect are
rare even among the open source community). Moreover, meaningful contributions
to Aesara will probably require deep familiarity with Theano&amp;rsquo;s design and its
shortcomings. This isn&amp;rsquo;t to discourage me (or anyone else!) from contributing
to Aesara, but it&amp;rsquo;s good to acknowledge the bottomless pit of technical
expertise that goes on behind the user-facing Bayesian modelling.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Some readers will notice the conspicuous lack of TensorFlow from this list - its exclusion isn&amp;rsquo;t out of malice, merely a lack of time and effort to do the necessary research to do it justice. Sorry.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></entry><entry><title>Serif Fonts for Coding</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/fonts-for-coding/"/><id>https://www.georgeho.org/fonts-for-coding/</id><updated>2020-11-26T00:00:00Z</updated><published>2020-11-26T00:00:00Z</published><content type="html">&lt;p>Sometimes I get sniped by &lt;a href="https://news.ycombinator.com/item?id=25159038">Hacker News
posts&lt;/a>, and this one plunged me
down a rabbit hole for coding fonts.&lt;/p>
&lt;p>Many coding fonts are lightly stressed, monospaced sans serifs: in other words, each glyph takes
the same width, and each glyph looks like a stick figure, with constant stroke
width (a.k.a. &lt;a href="https://designshack.net/articles/typography/is-my-type-stressed-a-primer-on-stressed-typography/">&lt;em>stress&lt;/em>&lt;/a>) throughout the glyph.&lt;/p>
&lt;p>But as &lt;a href="https://news.ycombinator.com/item?id=25167704">the Internet stranger
&lt;code>uncanneyvalley&lt;/code>&lt;/a> pointed out,
there&amp;rsquo;s decent overlap between &amp;ldquo;fonts good for coding&amp;rdquo; and &amp;ldquo;fonts good for
dyslexia&amp;rdquo;: being able to easily distinguish between visually-similar and
repeated characters.&lt;/p>
&lt;link rel="preconnect" href="https://fonts.googleapis.com">
&lt;link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
&lt;link href="https://fonts.googleapis.com/css2?family=Source+Code+Pro&amp;display=swap" rel="stylesheet">
&lt;style>
code.slab-serif {
font-family: "Source Code Pro", monospace;
}
&lt;/style>
&lt;p>&lt;strong>Proportional (&lt;a href="https://mbtype.com/fonts/equity/">Equity&lt;/a>):&lt;/strong>&lt;/p>
&lt;center>([{}]) l1i!|I OQo08 rumn ecoa pqdb -- __ == !! "' :; ,.&lt;/center>
&lt;p>&lt;strong>Monospaced Sans Serif (&lt;a href="https://fonts.google.com/specimen/Source+Code+Pro">Source Code Pro&lt;/a>):&lt;/strong>&lt;/p>
&lt;center>&lt;code class="slab-serif">([{}]) l1i!|I OQo08 rumn ecoa pqdb -- __ == !! "' :; ,.&lt;/code>&lt;/center>
&lt;p>&lt;strong>Monospaced Serif (&lt;a href="https://mbtype.com/fonts/triplicate/">Triplicate&lt;/a>):&lt;/strong>&lt;/p>
&lt;center>&lt;code>([{}]) l1i!|I OQo08 rumn ecoa pqdb -- __ == !! "' :; ,.&lt;/code>&lt;/center>
&lt;p>I think that stressed monospaced serif fonts (i.e. monospaced fonts with serifs that are curved
instead of slab-like, and that are visually thinner than the rest of the glyph)
are generally much better for coding than most default coding typefaces. It turns out
there are very few such fonts: I&amp;rsquo;ve had to scour the Internet for them, but you
can have the fruits of my labor for free!&lt;/p>
&lt;ul>
&lt;li>Libertinus Mono (&lt;a href="https://fontlibrary.org/en/font/libertinus-mono">Font
Library&lt;/a>,
&lt;a href="https://github.com/alerque/libertinus">GitHub&lt;/a>)&lt;/li>
&lt;li>Linux Libertine Mono
(&lt;a href="https://en.wikipedia.org/wiki/Linux_Libertine">Wikipedia&lt;/a>, &lt;a href="https://www.fontsquirrel.com/fonts/linux-libertine">Font
Squirrel&lt;/a>, &lt;a href="https://fontlibrary.org/en/font/linux-libertine">Font
Library&lt;/a>)&lt;/li>
&lt;li>SimSun
(&lt;a href="https://docs.microsoft.com/en-us/typography/font-list/simsun">Microsoft&lt;/a>,
&lt;a href="https://www.dafontfree.io/simsun-font/">Dafont Free&lt;/a>)&lt;/li>
&lt;li>Sun Gallant Demi
&lt;ul>
&lt;li>I can&amp;rsquo;t find any sources for it beyond &lt;a href="https://unix.stackexchange.com/q/307356">this Unix StackExchange
post&lt;/a>. Maybe if you have a Sun
computer? &lt;code>¯\_(ツ)_/¯&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Triplicate (&lt;a href="https://mbtype.com/fonts/triplicate/">MB Type&lt;/a>)&lt;/li>
&lt;li>Xanh Mono (&lt;a href="https://fonts.google.com/specimen/Xanh+Mono">Google Fonts&lt;/a>,
&lt;a href="https://github.com/yellow-type-foundry/xanhmono">GitHub&lt;/a>)&lt;/li>
&lt;/ul></content></entry><entry><title>`littlemcmc` — A Standalone HMC and NUTS Sampler in Python</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/littlemcmc/"/><id>https://www.georgeho.org/littlemcmc/</id><updated>2020-10-06T00:00:00Z</updated><published>2020-10-06T00:00:00Z</published><content type="html">&lt;center>
&lt;img
src="https://raw.githubusercontent.com/eigenfoo/littlemcmc/master/docs/_static/logo/default-cropped.png"
alt="LittleMCMC logo">
&lt;/center>
&lt;p>Recently there has been a modularization (or, if you&amp;rsquo;re hip with tech-lingo, an
&lt;a href="https://techcrunch.com/2015/04/18/the-unbundling-of-everything/">&lt;em>unbundling&lt;/em>&lt;/a>)
of Bayesian modelling libraries. Whereas before, probability distributions,
model specification, inference and diagnostics were more or less rolled into one
library, it&amp;rsquo;s becoming more and more realistic to specify a model in one
library, accelerate it using another, perform inference with a third and use a
fourth to visualize the results. (For example, Junpeng Lao has recently had
&lt;a href="https://twitter.com/junpenglao/status/1309470970223226882">good success&lt;/a> doing
exactly this!)&lt;/p>
&lt;p>It&amp;rsquo;s in this spirit of unbundling that the PyMC developers wanted to &lt;a href="https://discourse.pymc.io/t/isolate-nuts-into-a-new-library/3974">spin out
the core HMC and NUTS samplers from PyMC3 into a separate
library&lt;/a>.
PyMC3 has a very well-tested and performant Python implementation of HMC and
NUTS, which would be very useful to any users who have their own functions for
computing log-probability and its gradients, and who want to use a lightweight
and reliable sampler.&lt;/p>
&lt;p>So for example, if you&amp;rsquo;re a physical scientist with a Bayesian model who&amp;rsquo;s
written your own functions to compute the log probability and its gradients
(perhaps for performance or interoperability reasons), and need a good MCMC
sampler, then &lt;code>littlemcmc&lt;/code> is for you! As long as you can call your functions
from Python, you can use the same HMC or NUTS sampler that&amp;rsquo;s used by the rest of
the PyMC3 community.&lt;/p>
&lt;p>So without further ado: please check out &lt;code>littlemcmc&lt;/code>!&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/eigenfoo/littlemcmc">GitHub&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://littlemcmc.readthedocs.io/en/latest/">Read the Docs&lt;/a>&lt;/li>
&lt;/ul></content></entry><entry><title>Pollen and Digital Publishing (a.k.a. _The Book is a Program_)</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/pollen-digital-publishing/"/><id>https://www.georgeho.org/pollen-digital-publishing/</id><updated>2020-09-10T00:00:00Z</updated><published>2020-09-10T00:00:00Z</published><content type="html">&lt;p>I&amp;rsquo;ve picked up a new hobby (or perhaps just another fleeting fascination) &amp;mdash;
digital publishing. The catalyst was the book &lt;a href="https://practicaltypography.com/">&lt;em>Practical Typography&lt;/em> by
Matthew Butterick&lt;/a>. There were so many
interesting things about it: it is gorgeous, it expounds well-argued (if
slightly controversial) views on how the average writer should think about
typography, it has a little widget that would change the book&amp;rsquo;s typeface to
showcase Buttericks&amp;rsquo; fonts for sale, it is published online but &amp;mdash; and
Butterick makes a big point of this &amp;mdash; is not free.&lt;/p>
&lt;p>Most interesting to me, however, was how the book was written and published
with a tool written specifically for the book &amp;mdash;
&lt;a href="https://docs.racket-lang.org/pollen/">Pollen&lt;/a>. A good explanatory analogy (at
least for those in the data science and engineering world) is that it’s like R
Markdown (in that it’s a markup language that allows arbitrary R code to be
embedded in it), but instead of R, it’s Racket, and instead of Markdown, it’s
your own domain-specific markup language that you build with Racket.&lt;/p>
&lt;p>After playing around with Pollen for a bit, I think I&amp;rsquo;m sold. Two big reasons:&lt;/p>
&lt;ol>
&lt;li>Write your own markup
&lt;ul>
&lt;li>You can write your own &amp;ldquo;HTML tags&amp;rdquo; &amp;mdash; so for example, if you&amp;rsquo;re writing a
technical document and want to emphasize certain jargon upon first
mention, you can write a &lt;code>firstmention&lt;/code> tag, and have it italicize the
tagged text and append it to a glossary with a link to its first mention
in your document. The cool thing is that tags are just functions in
Racket, which allow you to transform the input text arbitrarily.&lt;/li>
&lt;li>As you can imagine, the ability to write your own markup really lets you
tailor it to the content at hand.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Multi-format publishing
&lt;ul>
&lt;li>This lets you write in one input format, and output to multiple formats -
so once I make changes to the source files, I can immediately have an
HTML, LaTeX, PDF, and plain text format of my writing.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;em>But what about Markdown or LaTeX or ReStructured Text or &amp;mdash;&lt;/em> none of them
give you flexibility or extensibility that Pollen does. In the case of Markdown
or ReStructured Text, you just get a subset of HTML features in a way that
looks more palatable to the average developer. If this suffices for your
publishing needs, that&amp;rsquo;s great - but if it doesn&amp;rsquo;t, you&amp;rsquo;re left in a tough
place. LaTeX - as Butterick readily admits - did a lot of things right, but at
the end of the day it&amp;rsquo;s just another format that Pollen can target. (I think
Pollen was named in the spirit of LaTeX by the way - in the sense that people
are commonly allergic to both of them.)&lt;/p>
&lt;p>Now here&amp;rsquo;s the &amp;ldquo;downside&amp;rdquo; - Pollen is written in
&lt;a href="https://racket-lang.org">Racket&lt;/a> (which is a dialect of Lisp), and any
non-trivial applications will probably involve you learning a bit of Racket.
I&amp;rsquo;d say that that&amp;rsquo;s a good thing, if nothing else than for some self-education.&lt;/p>
&lt;p>Here&amp;rsquo;s a very simple example to convince you (if you want a longer form answer,
I&amp;rsquo;d recommend Butterick&amp;rsquo;s &lt;a href="https://beautifulracket.com/appendix/why-racket-why-lisp.html">&lt;em>Why Racket? Why
Lisp?&lt;/em>&lt;/a>)&lt;/p>
&lt;p>Most languages represent HTML as a string (which conceals the semantics of HTML
tags), or as a tree (which conceals the sequential nature of the HTML). Neither
option is great. Lisps, however, could represent a snippet of HTML as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>&lt;span style="color:#f92672">(&lt;/span>span &lt;span style="color:#f92672">((&lt;/span>class &lt;span style="color:#e6db74">&amp;#34;author&amp;#34;&lt;/span>&lt;span style="color:#f92672">)(&lt;/span>id &lt;span style="color:#e6db74">&amp;#34;primary&amp;#34;&lt;/span>&lt;span style="color:#f92672">)(&lt;/span>living &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Prof. Leonard&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Keeping in mind that &lt;code>(f x y)&lt;/code> is Lisp&amp;rsquo;s way of saying &lt;code>f(x, y)&lt;/code> and we see
that Lisps cleanly model HTML as &lt;em>nested function application&lt;/em>, which really
blows open the door to opportunities in marking up your text.&lt;/p>
&lt;p>At any rate, that&amp;rsquo;s probably enough said about Pollen. Let me show you what I
managed to put together with it in one or two spare weekends &amp;mdash;
&lt;a href="https://cooper.georgeho.org/">&lt;code>cooper.georgeho.org&lt;/code>&lt;/a>. I was hunting around for
dummy text that I could use to play around with &amp;mdash; Lorem Ipsum seemed trite,
and the U.S. Constitution seemed overdone, so I reached for some historical
documents of my alma mater. Hope you like it!&lt;/p></content></entry><entry><title>Floating-Point Formats and Deep Learning</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/floating-point-deep-learning/"/><id>https://www.georgeho.org/floating-point-deep-learning/</id><updated>2020-07-26T00:00:00Z</updated><published>2020-07-26T00:00:00Z</published><content type="html">&lt;p>Floating-point formats are not the most glamorous or (frankly) the important
consideration when working with deep learning models: if your model isn&amp;rsquo;t working well,
then your floating-point format certainly isn&amp;rsquo;t going to save you! However, past a
certain point of model complexity/model size/training time, your choice of
floating-point format can have a significant impact on your model training times and
even performance.&lt;/p>
&lt;p>Here&amp;rsquo;s how the rest of this post is structured:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="#floating-point-in-_my_-deep-learning">Why should you, a deep learning practitioner,
care&lt;/a> about what floating-point format your
model uses?&lt;/li>
&lt;li>&lt;a href="#floating-point-formats">What even &lt;em>is&lt;/em> floating-point&lt;/a>, especially these new
floating-point formats made specifically for deep learning?&lt;/li>
&lt;li>&lt;a href="#advice-for-practitioners">What practical advice is there&lt;/a> on using floating-point
formats for deep learning?&lt;/li>
&lt;/ol>
&lt;h2 id="floating-point-in-_my_-deep-learning">Floating-Point? In &lt;em>My&lt;/em> Deep Learning?&lt;/h2>
&lt;p>&lt;a href="https://knowyourmeme.com/photos/6052-its-more-likely-than-you-think">It&amp;rsquo;s more likely than you
think!&lt;/a>&lt;/p>
&lt;p>It&amp;rsquo;s been known for quite some time that &lt;a href="https://arxiv.org/abs/1502.02551">deep neural networks can
tolerate&lt;/a> &lt;a href="https://arxiv.org/abs/1412.7024">lower numerical
precision&lt;/a>. High-precision calculations turn out not
to be that useful in training or inferencing neural networks: the additional precision
confers no benefit while being slower and less memory-efficient.&lt;/p>
&lt;p>Surprisingly, some models can even reach a higher accuracy with lower precision, which
recent research attributes to the &lt;a href="https://arxiv.org/abs/1809.00095">regularization effects from the lower
precision&lt;/a>.&lt;/p>
&lt;p>Finally (and this is speculation on my part — I haven&amp;rsquo;t seen any experiments or papers
corroborating this), it&amp;rsquo;s possible that certain complicated models &lt;em>cannot converge&lt;/em>
unless you use an appropriately precise format. There&amp;rsquo;s a drift between the analytical
gradient update and what the actual backward propagation looks like: the lower the
precision, the bigger the drift. I&amp;rsquo;d expect that deep learning is particularly
susceptible to an issue here because there&amp;rsquo;s a lot of multiplications, divisions and
reduction operations.&lt;/p>
&lt;h2 id="floating-point-formats">Floating-Point Formats&lt;/h2>
&lt;p>Let&amp;rsquo;s take a quick look at three floating-point formats for deep learning. There are a
lot more floating-point formats, but only a few have gained traction: floating-point
formats require the appropriate hardware and firmware support, which restricts the
introduction and adoption of new formats.&lt;/p>
&lt;p>For a quick overview, Grigory Sapunov wrote a great &lt;a href="https://medium.com/@moocaholic/fp64-fp32-fp16-bfloat16-tf32-and-other-members-of-the-zoo-a1ca7897d407">run-down of various floating-point
formats for deep
learning&lt;/a>.&lt;/p>
&lt;h3 id="ieee-floating-point-formats">IEEE floating-point formats&lt;/h3>
&lt;p>These floating-point formats are probably what most people think of when someone says
&amp;ldquo;floating-point&amp;rdquo;. The IEEE standard 754 sets out several formats, but for the purposes
of deep learning we are only interested three:
&lt;a href="https://en.wikipedia.org/wiki/Half-precision_floating-point_format">FP16&lt;/a>,
&lt;a href="https://en.wikipedia.org/wiki/Single-precision_floating-point_format">FP32&lt;/a> and
&lt;a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format">FP64&lt;/a> (a.k.a.
half-, single- and double-precision floating-point formats)&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Let&amp;rsquo;s take FP32 as an example. Each FP32 number is a sequence of 32 bits,
$b_{31} b_{30} &amp;hellip; b_{0}$. Altogether, this sequence represents the real number&lt;/p>
&lt;p>$$ (-1)^{b_{31}} \cdot 2^{(b_{30} b_{29} &amp;hellip; b_{23}) - 127} \cdot (1.b_{22} b_{21} &amp;hellip; b_{0})_2 $$&lt;/p>
&lt;p>Here, $b_{31}$ (the &lt;em>sign bit&lt;/em>) determines the sign of the represented value.&lt;/p>
&lt;p>$b_{30}$ through $b_{23}$ determine the magnitude or scale of the represented value
(notice that a change in any of these bits drastically changes the size of the
represented value). These bits are called the &lt;em>exponent&lt;/em> or &lt;em>scale bits&lt;/em>.&lt;/p>
&lt;p>Finally, $b_{22}$ through $b_{0}$ determine the precise value of the represented
value. These bits are called the &lt;em>mantissa&lt;/em> or &lt;em>precision bits&lt;/em>.&lt;/p>
&lt;p>Obviously, the more bits you have, the more you can do. Here&amp;rsquo;s how the three formats
break down:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">&lt;/th>
&lt;th style="text-align:right">Sign Bits&lt;/th>
&lt;th style="text-align:right">Exponent (Scale) Bits&lt;/th>
&lt;th style="text-align:right">Mantissa (Precision) Bits&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">FP16&lt;/td>
&lt;td style="text-align:right">1&lt;/td>
&lt;td style="text-align:right">5&lt;/td>
&lt;td style="text-align:right">10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">FP32&lt;/td>
&lt;td style="text-align:right">1&lt;/td>
&lt;td style="text-align:right">8&lt;/td>
&lt;td style="text-align:right">23&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">FP64&lt;/td>
&lt;td style="text-align:right">1&lt;/td>
&lt;td style="text-align:right">11&lt;/td>
&lt;td style="text-align:right">53&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>There are some details that I&amp;rsquo;m leaving out here (e.g. how to represent NaNs, positive
and negative infinities), but this is largely how floating point numbers work. A lot
more detail can be found on the &lt;a href="https://en.wikipedia.org/wiki/Floating-point_arithmetic#IEEE_754:_floating_point_in_modern_computers">Wikipedia
page&lt;/a>
and of course the &lt;a href="https://ieeexplore.ieee.org/document/8766229">latest revision of the IEEE standard
754&lt;/a> itself.&lt;/p>
&lt;p>FP32 and FP64 are widely supported by both software (C/C++, PyTorch, TensorFlow) and
hardware (x86 CPUs and most NVIDIA/AMD GPUs).&lt;/p>
&lt;p>FP16, on the other hand, is not as widely supported in software (you need to use &lt;a href="http://half.sourceforge.net/">a
special library&lt;/a> to use them in C/C++). However, since
deep learning is trending towards favoring FP16 over FP32, it has found support in the
main deep learning frameworks (e.g. &lt;code>tf.float16&lt;/code> and &lt;code>torch.float16&lt;/code>). In terms of
hardware, FP16 is not supported in x86 CPUs as a distinct type, but is well-supported on
modern GPUs.&lt;/p>
&lt;h3 id="google-bfloat16">Google BFloat16&lt;/h3>
&lt;p>BFloat16 (a.k.a. the Brain Floating-Point Format, after Google Brain) is basically the
same as FP16, but 3 mantissa bits become exponent bits (i.e. bfloat16 trades 3 bits'
worth of precision for scale).&lt;/p>
&lt;figure class="align-center">
&lt;img style="float: middle" src="https://www.georgeho.org/assets/images/bfloat16.png" alt="Diagram illustrating the number and type of bits in bfloat16.">
&lt;figcaption>The number and type of bits in bfloat16. Source: &lt;a href="https://cloud.google.com/blog/products/ai-machine-learning/bfloat16-the-secret-to-high-performance-on-cloud-tpus">Google Cloud blog&lt;/a>.&lt;/figcaption>
&lt;/figure>
&lt;p>When it comes to deep learning, there are generally three &amp;ldquo;flavors&amp;rdquo; of values: weights,
activations and gradients. Google suggests storing weights and gradients in FP32, and
storing activations in bfloat16. However, in particularly gracious circumstances,
weights can be stored in bfloat16 without a significant performance degradation.&lt;/p>
&lt;p>You can read a lot more on the &lt;a href="https://cloud.google.com/blog/products/ai-machine-learning/bfloat16-the-secret-to-high-performance-on-cloud-tpus">Google Cloud
blog&lt;/a>,
and &lt;a href="https://arxiv.org/abs/1905.12322">this paper by Intel and Facebook studying the bfloat16
format&lt;/a>.&lt;/p>
&lt;p>In terms of software support, bfloat16 is not supported in C/C++, but is supported in
TensorFlow (&lt;a href="https://www.tensorflow.org/api_docs/python/tf#bfloat16">&lt;code>tf.bfloat16&lt;/code>&lt;/a>) and
PyTorch (&lt;a href="https://www.tensorflow.org/api_docs/python/tf#bfloat16">&lt;code>torch.bfloat16&lt;/code>&lt;/a>).&lt;/p>
&lt;p>In terms of hardware support, it is supported by &lt;a href="https://en.wikipedia.org/wiki/Cooper_Lake_(microarchitecture)">some modern
CPUS&lt;/a>, but the real
support comes out in GPUs and ASICs. At the time of writing, bfloat16 is supported by
the NVIDIA A100 (the first GPU to support it!), and &lt;a href="https://www.techpowerup.com/260344/future-amd-gpu-architecture-to-implement-bfloat16-hardware">will be supported in future AMD
GPUs&lt;/a>.
And of course, it is supported by Google TPU v2/v3.&lt;/p>
&lt;h3 id="nvidia-tensorfloat">NVIDIA TensorFloat&lt;/h3>
&lt;p>Strictly speaking, this isn&amp;rsquo;t really its own floating-point format, just an overzealous
branding of the technique that NVIDIA developed to train in mixed precision on their
Tensor Core hardware&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>An NVIDIA TensorFloat (a.k.a. TF32) is just a 32-bit float that drops 13 precision bits
in order to execute on Tensor Cores. Thus, it has the precision of FP16 (10 bits), with
the range of FP32 (8 bits). However, if you&amp;rsquo;re not using Tensor Cores, it&amp;rsquo;s just a
32-bit float; if you&amp;rsquo;re only thinking about storage, it&amp;rsquo;s just a 32-bit float.&lt;/p>
&lt;figure class="align-center">
&lt;img style="float: middle" src="https://www.georgeho.org/assets/images/tensorfloat32.png" alt="Diagram illustrating the number and type of bits in an NVIDIA TensorFloat">
&lt;figcaption>The number and type of bits in an NVIDIA TensorFloat. Source: &lt;a href="https://blogs.nvidia.com/blog/2020/05/14/tensorfloat-32-precision-format/">NVIDIA blog&lt;/a>.&lt;/figcaption>
&lt;/figure>
&lt;p>One distinct advantage of TF32 is that they&amp;rsquo;re kind of like FP32. To quote from the
NVIDIA developer blog,&lt;/p>
&lt;blockquote>
&lt;p>Applications using NVIDIA libraries enable users to harness the benefits of TF32 with no
code change required. TF32 Tensor Cores operate on FP32 inputs and produce results in
FP32. Non-matrix operations continue to use FP32.&lt;/p>
&lt;/blockquote>
&lt;p>You can read more about TF32 &lt;a href="https://blogs.nvidia.com/blog/2020/05/14/tensorfloat-32-precision-format/">on the NVIDIA
blog&lt;/a>, and
about its hardware support in the Ampere architecture on &lt;a href="https://developer.nvidia.com/blog/nvidia-ampere-architecture-in-depth/">the NVIDIA developer
blog&lt;/a>.&lt;/p>
&lt;p>TF32 is not in the C/C++ standard at all, but is supported in &lt;a href="https://developer.nvidia.com/blog/cuda-11-features-revealed/">CUDA
11&lt;/a>.&lt;/p>
&lt;p>Hardware-wise, the NVIDIA A100 is the first GPU (and, at the time of writing, the only
device) supporting TF32.&lt;/p>
&lt;h2 id="advice-for-practitioners">Advice for Practitioners&lt;/h2>
&lt;p>The first thing to say is that floating-point formats are &lt;em>by no means&lt;/em> the most
important consideration for your deep learning model — not even close. Floating-point
formats will most likely only make a difference for very large or complex models, for
which fitting the model on GPU memory is a challenge, or for which training times are
excruciatingly long.&lt;/p>
&lt;p>The second thing to say is that any practical advice has to be heavily dependent on what
hardware you have available to you.&lt;/p>
&lt;h3 id="automatic-mixed-precision-amp-training--a-good-default">Automatic mixed precision (AMP) training — a good default&lt;/h3>
&lt;p>Most deep learning stacks support mixed-precision training, which is a pretty good
default option to reap some of the benefits of low-precision training, while still
reasonably avoiding underflow and overflow problems.&lt;/p>
&lt;p>TensorFlow supports &lt;a href="https://www.tensorflow.org/guide/mixed_precision">mixed-precision training
natively&lt;/a>, whereas the &lt;a href="https://github.com/NVIDIA/apex">NVIDIA Apex
library&lt;/a> makes automatic mixed precision training
available in PyTorch. To get started, take a look at NVIDIA&amp;rsquo;s &lt;a href="https://developer.nvidia.com/automatic-mixed-precision">developer guide for
AMP&lt;/a>, and &lt;a href="https://docs.nvidia.com/deeplearning/performance/mixed-precision-training/index.html">documentation for
training in mixed
precision&lt;/a>.&lt;/p>
&lt;p>It&amp;rsquo;s worth going over the gist of mixed precision training. There are basically two main
tricks:&lt;/p>
&lt;ol>
&lt;li>&lt;em>Loss scaling:&lt;/em> multiply the loss by some large number, and divide the gradient
updates by this same large number. This avoids the loss underflowing (i.e. clamping
to zero because of the finite precision) in FP16, while still maintaining faithful
backward propagation.&lt;/li>
&lt;li>&lt;em>FP32 master copy of weights&lt;/em>: store the weights themselves in FP32, but cast them to
FP16 before doing the forward and backward propagation (to reap the performance
benefits). During the weight update, the FP16 gradients are cast to FP32 to update
the master copy.&lt;/li>
&lt;/ol>
&lt;p>You can read more about these techniques in &lt;a href="https://arxiv.org/abs/1710.03740">this paper by NVIDIA and Baidu
Research&lt;/a>, or on the accompanying &lt;a href="https://developer.nvidia.com/blog/mixed-precision-training-deep-neural-networks/">blog post by
NVIDIA&lt;/a>.&lt;/p>
&lt;h3 id="alternative-floating-point-formats--make-sure-itll-be-worth-it">Alternative floating-point formats — make sure it&amp;rsquo;ll be worth it&lt;/h3>
&lt;p>If you&amp;rsquo;ve already trained your model in mixed precision, it might not be worth the time
or effort to port your code to take advantage of an alternative floating-point format
and bleeding edge hardware.&lt;/p>
&lt;p>However, if you choose to go that route, make sure your use case really demands it.
Perhaps you can&amp;rsquo;t scale up your model without using bfloat16, or you really need to cut
down on training times.&lt;/p>
&lt;p>Unfortunately, I don&amp;rsquo;t have a well-informed opinion on how bfloat16 stacks up against
TF32, so &amp;ldquo;do your homework&amp;rdquo; is all I can advise. However, since the NVIDIA A100s only
just (at the time of writing) dropped into the market, it&amp;rsquo;ll be interesting to see what
the machine learning community thinks of the various low precision options available.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Technically speaking, there are &lt;a href="https://en.wikipedia.org/wiki/Quadruple-precision_floating-point_format">quadruple-&lt;/a> and &lt;a href="https://en.wikipedia.org/wiki/Octuple-precision_floating-point_format">octuple-precision&lt;/a> floating-point formats, but those are pretty rarely used, and certainly unheard of in deep learning.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>A Tensor Core is essentially a mixed-precision FP16/FP32 core, which NVIDIA has optimized for deep learning applications.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></entry><entry><title>Transformers in Natural Language Processing — A Brief Survey</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/transformers-in-nlp/"/><id>https://www.georgeho.org/transformers-in-nlp/</id><updated>2020-05-23T00:00:00Z</updated><published>2020-05-23T00:00:00Z</published><content type="html">&lt;p>I&amp;rsquo;ve recently had to learn a lot about natural language processing (NLP), specifically
Transformer-based NLP models.&lt;/p>
&lt;p>Similar to my previous blog post on &lt;a href="https://www.georgeho.org/deep-autoregressive-models/">deep autoregressive
models&lt;/a>, this blog post is a write-up
of my reading and research: I assume basic familiarity with deep learning, and aim to
highlight general trends in deep NLP, instead of commenting on individual architectures
or systems.&lt;/p>
&lt;p>As a disclaimer, this post is by no means exhaustive and is biased towards
Transformer-based models, which seem to be the dominant breed of NLP systems (at least,
at the time of writing).&lt;/p>
&lt;h2 id="some-architectures-and-developments">Some Architectures and Developments&lt;/h2>
&lt;p>Here&amp;rsquo;s an (obviously) abbreviated history of Transformer-based models in NLP&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> in
(roughly) chronological order. I also cover some other non-Transformer-based models,
because I think they illuminate the history of NLP.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>word2vec and GloVe&lt;/p>
&lt;ul>
&lt;li>
&lt;p>These were the first instances of word embeddings pre-trained on large amounts of
unlabeled text. These word embeddings generalized well to most other tasks (even
with limited amounts of labeled data), and usually led to appreciable improvements
in performance.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>These ideas were immensely influential and have served NLP extraordinarily well.
However, they suffer from a major limitation. They are &lt;em>shallow&lt;/em> representations
that can only be used in the first layer of any network: the remainder of the
network must still be trained from scratch.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The main appeal is well illustrated below: each word has its own vector
representation, and there are linear vector relationships can encode common-sense
semantic meanings of words.&lt;/p>
&lt;figure class="align-center">
&lt;img style="float: middle" src="https://www.georgeho.org/assets/images/linear-relationships.png" alt="Linear vector relationships in word embeddings">
&lt;figcaption>Linear vector relationships in word embeddings. Source: &lt;a href="https://www.tensorflow.org/images/linear-relationships.png">TensorFlow documentation&lt;/a>.&lt;/figcaption>
&lt;/figure>
&lt;/li>
&lt;li>
&lt;p>Further reading&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://arxiv.org/abs/1301.3781">word2vec: Mikolov et al., Google. January 2013&lt;/a>
and &lt;a href="http://arxiv.org/abs/1310.4546">October 2013&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://nlp.stanford.edu/projects/glove/">GloVe: Pennington et al., Stanford CS. EMNLP
2014.&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Broadly speaking, after word2vec/GloVe and before Transformers, a lot of ink was
spilled on other different approaches to NLP, including (but certainly not limited
to)&lt;/p>
&lt;ol>
&lt;li>Convolutional neural networks&lt;/li>
&lt;li>Recurrent neural networks&lt;/li>
&lt;li>Reinforcement learning approaches&lt;/li>
&lt;li>Memory-augmented deep learning&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Perhaps the most famous of such models is &lt;a href="https://allennlp.org/elmo">ELMo (Embeddings from Language
Models)&lt;/a> by AI2, which learned bidirectional word
embeddings using LSTMs, and began NLP&amp;rsquo;s fondness of Sesame Street.&lt;/li>
&lt;li>I won&amp;rsquo;t go into much more detail here: partly because not all of these approaches
have held up as well as current Transformer-based models, and partly because I have
plans for my computer that don&amp;rsquo;t involve blogging about recent advances in NLP.&lt;/li>
&lt;li>Here is &lt;a href="https://arxiv.org/abs/1708.02709">a survey paper&lt;/a> (and an &lt;a href="https://medium.com/dair-ai/deep-learning-for-nlp-an-overview-of-recent-trends-d0d8f40a776d">associated blog
post&lt;/a>)
published shortly after the Transformer was invented, which summarizes a lot of the
work that was being done during this period.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Transformer&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The authors introduce a feed-forward network architecture, using only attention
mechanisms and dispensing with convolutions and recurrence entirely (which were not
uncommon techniques in NLP at the time).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It achieved state-of-the-art performance on several tasks, and (perhaps more
importantly) was found to generalize very well to other NLP tasks, even with
limited data.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Since this architecture was the progenitor of so many other NLP models, it&amp;rsquo;s
worthwhile to dig into the details a bit. The architecture is illustrated below:
note that its feed-forward nature and multi-head self attention are critical
aspects of this architecture!&lt;/p>
&lt;figure class="align-center">
&lt;img style="float: middle" src="https://www.georgeho.org/assets/images/transformer-block.png" alt="Graphical representation of BERT">
&lt;figcaption>Graphical representation of BERT. Source: &lt;a href="https://i.pinimg.com/originals/02/95/a3/0295a3be438ae68f604e53fc88c7edb4.png">Pinterest&lt;/a>.&lt;/figcaption>
&lt;/figure>
&lt;/li>
&lt;li>
&lt;p>Further reading&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://arxiv.org/pdf/1706.03762.pdf">Vaswani et al., Google Brain. December 2017.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jalammar.github.io/illustrated-transformer/">&lt;em>The Illustrated Transformer&lt;/em> blog post&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://nlp.seas.harvard.edu/2018/04/03/attention.html">&lt;em>The Annotated Transformer&lt;/em> blog post&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>ULMFiT (Universal Language Model Fine-tuning for Text Classification)&lt;/p>
&lt;ul>
&lt;li>The authors introduce an effective transfer learning method that can be applied to
any task in NLP: this paper introduced the idea of general-domain, unsupervised
pre-training, followed by task-specific fine-tuning. They also introduce other
techniques that are fairly common in NLP now, such as slanted triangular learning
rate schedules. (what some researchers now call warm-up).&lt;/li>
&lt;li>Further reading
&lt;ul>
&lt;li>&lt;a href="https://arxiv.org/pdf/1801.06146.pdf">Howard and Ruder. January 2018.&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>GPT-1 and GPT-2 (Generative Pre-trained Transformers)&lt;/p>
&lt;ul>
&lt;li>At the risk of peeking ahead, GPT is largely BERT but with Transformer decoder
blocks, instead of encoder blocks. Note that in doing this, we lose the
autoregressive/unidirectional nature of the model.&lt;/li>
&lt;li>Arguably the main contribution of GPT-2 is that it demonstrated the value of
training larger Transformer models (a trend that I personally refer to as the
&lt;em>Embiggening&lt;/em>).&lt;/li>
&lt;li>GPT-2 generated some controversy, as OpenAI &lt;a href="https://www.theverge.com/2019/2/14/18224704/ai-machine-learning-language-models-read-write-openai-gpt2">initially refused to open-source the
model&lt;/a>,
citing potential malicious uses, but &lt;a href="https://www.theverge.com/2019/11/7/20953040/openai-text-generation-ai-gpt-2-full-model-release-1-5b-parameters">ended up releasing the model
later&lt;/a>.&lt;/li>
&lt;li>Further reading
&lt;ul>
&lt;li>&lt;a href="https://openai.com/blog/language-unsupervised/">Radford et al., OpenAI. June
2018&lt;/a> and &lt;a href="https://openai.com/blog/better-language-models/">February
2019&lt;/a>.&lt;/li>
&lt;li>&lt;a href="http://jalammar.github.io/illustrated-gpt2/">&lt;em>The Illustrated GPT-2&lt;/em> blog post&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>BERT (Bidirectional Encoder Representations from Transformers)&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The authors use the Transformer encoder (and only the encoder) to pre-train deep
bidirectional representations from unlabeled text. This pre-trained BERT model can
then be fine-tuned with just one additional output layer to achieve
state-of-the-art performance for many NLP tasks, without substantial task-specific
architecture changes, as illustrated below.&lt;/p>
&lt;figure class="align-center">
&lt;img style="float: middle" src="https://www.georgeho.org/assets/images/bert.png" alt="Graphical representation of BERT">
&lt;figcaption>Graphical representation of BERT. Source: &lt;a href="https://i.pinimg.com/originals/02/95/a3/0295a3be438ae68f604e53fc88c7edb4.png">Pinterest&lt;/a>.&lt;/figcaption>
&lt;/figure>
&lt;/li>
&lt;li>
&lt;p>BERT was a drastic development in the NLP landscape: it became almost a cliche to
conclude that BERT performs &amp;ldquo;surprisingly well&amp;rdquo; on whatever task or dataset you
throw at it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Further reading&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://arxiv.org/pdf/1810.04805.pdf">Devlin et al., Google AI Language, May 2019.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ai.googleblog.com/2018/11/open-sourcing-bert-state-of-art-pre.html">Accompanying blog post&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jalammar.github.io/illustrated-bert/">&lt;em>The Illustrated BERT&lt;/em> blog post&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>RoBERTa (Robustly Optimized BERT Approach)&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The scientific contributions of this paper are best quoted from its abstract:&lt;/p>
&lt;blockquote>
&lt;p>We find that BERT was significantly under-trained, and can match or exceed the
performance of every model published after it. [&amp;hellip;] These results highlight the
importance of previously overlooked design choices, and raise questions about the
source of recently reported improvements.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>The authors use an identical architecture to BERT, but propose several improvements
to the training routine, such as changing the dataset and removing the
next-sentence-prediction (NSP) pre-training task. Funnily enough, far and away the
best thing the authors did to improve BERT was just the most obvious thing: train
BERT for longer!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Further reading:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://arxiv.org/abs/1907.11692">Liu et al., Facebook AI. June 2019.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ai.facebook.com/blog/roberta-an-optimized-method-for-pretraining-self-supervised-nlp-systems/">Accompanying blog post&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>T5 (Text-to-Text Transfer Transformer)&lt;/p>
&lt;ul>
&lt;li>There are two main contributions of this paper:
&lt;ol>
&lt;li>The authors recast all NLP tasks into a text-to-text format: for example,
instead of performing a two-way softmax for binary classification, one could
simply teach an NLP model to output the tokens &amp;ldquo;spam&amp;rdquo; or &amp;ldquo;ham&amp;rdquo;. This provides a
unified text-to-text format for all NLP tasks.&lt;/li>
&lt;li>The authors systematically study and compare the effects of pre-training
objectives, architectures, unlabeled datasets, transfer approaches, and other
factors on dozens of canonical NLP tasks.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>This paper (and especially the tables in the appendices!) probably cost the Google
team an incredible amount of money, and the authors were very thorough in ablating
what does and doesn&amp;rsquo;t help for a good NLP system.&lt;/li>
&lt;li>Further reading
&lt;ul>
&lt;li>&lt;a href="https://arxiv.org/pdf/1910.10683.pdf">Raffel et al., Google. October 2019.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ai.googleblog.com/2020/02/exploring-transfer-learning-with-t5.html">Accompanying blog post&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="some-thoughts-and-observations">Some Thoughts and Observations&lt;/h2>
&lt;p>Here I comment on some general trends that I see in Transformer-based models in NLP.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Ever since Google developed the Transformer in 2017, most NLP contributions are not
architectural: instead most recent advances have used the Transformer model as-is, or
using some subset of the Transformer (e.g. BERT and GPT use exclusively Transformer
encoder and decoder blocks, respectively). Instead, recent research has focused on
the way NLP models are pre-trained or fine-tuned, or creating a new dataset, or
formulating a new NLP task to measure &amp;ldquo;language understanding&amp;rdquo;, etc.&lt;/p>
&lt;ul>
&lt;li>I&amp;rsquo;m personally not sure what to make of this development: why did we collectively
agree that architectural research wasn&amp;rsquo;t worth pursuing anymore?&lt;/li>
&lt;li>But spinning this the other way, we see that Transformers are a &lt;em>fascinating&lt;/em>
architecture: the model has proven so surprisingly versatile and easy to teach that
we are still making meaningful advances with the same architecture. In fact, it is
still an open question how and why Transformers perform as well as they do: there
is an open field of research focusing on answering this question for BERT (since
BERT has been uniquely successful model) called
&lt;a href="https://huggingface.co/transformers/bertology.html">BERTology&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>It was never a question of &lt;em>whether&lt;/em> NLP systems would follow computer vision&amp;rsquo;s model
of fine-tuning pre-trained models (i.e. training a model on ImageNet and then doing
task-specific fine-tuning for downstream applications), but rather &lt;em>how&lt;/em>.&lt;/p>
&lt;ol>
&lt;li>What specific task and/or dataset should NLP models be pre-trained on?
&lt;ul>
&lt;li>Language modelling has really won out here: BERT was originally published with a
&lt;em>next-sentence prediction&lt;/em> (NSP) pre-training task, which RoBERTa completely did
away with.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Exactly &lt;em>what&lt;/em> is being learnt during pre-training?
&lt;ul>
&lt;li>Initially it was a separate vector for each token (i.e. pre-training a shallow
representation of text), and these days it is an entire network is pre-trained.&lt;/li>
&lt;li>Sebastian Ruder &lt;a href="https://thegradient.pub/nlp-imagenet/">wrote a great article&lt;/a>
that delves more into this topic.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>There are (generally speaking) three flavors of Transformer models.&lt;/p>
&lt;ol>
&lt;li>Autoregressive models&lt;/li>
&lt;li>Autoencoding models&lt;/li>
&lt;li>Sequence-to-sequence models&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Hugging Face does an excellent job of summarizing the differences between these
three flavors of models in &lt;a href="https://huggingface.co/transformers/summary.html">their &lt;em>Summary of the
Models&lt;/em>&lt;/a>, which I&amp;rsquo;ve reproduced
here:&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Autoregressive models are pretrained on the classic language modeling task: guess
the next token having read all the previous ones. They correspond to the decoder of
the original transformer model, and a mask is used on top of the full sentence so
that the attention heads can only see what was before in the next, and not what’s
after. Although those models can be fine-tuned and achieve great results on many
tasks, the most natural application is text generation. A typical example of such
models is GPT.&lt;/p>
&lt;p>Autoencoding models are pretrained by corrupting the input tokens in some way and
trying to reconstruct the original sentence. They correspond to the encoder of the
original transformer model in the sense that they get access to the full inputs
without any mask. Those models usually build a bidirectional representation of the
whole sentence. They can be fine-tuned and achieve great results on many tasks such
as text generation, but their most natural application is sentence classification
or token classification. A typical example of such models is BERT.&lt;/p>
&lt;p>[&amp;hellip;]&lt;/p>
&lt;p>Sequence-to-sequence models use both the encoder and the decoder of the original
transformer, either for translation tasks or by transforming other tasks to
sequence-to-sequence problems. They can be fine-tuned to many tasks but their most
natural applications are translation, summarization and question answering. The
original transformer model is an example of such a model (only for translation), T5
is an example that can be fine-tuned on other tasks.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>Different NLP models learn different kinds of embeddings, and it&amp;rsquo;s worth
understanding the differences between these various learnt representations.&lt;/p>
&lt;ol>
&lt;li>Contextual vs non-contextual embeddings
&lt;ul>
&lt;li>The first word embeddings (that is, word2vec and GloVe) were &lt;em>non-contextual&lt;/em>:
each word had its own embedding, independent of the words that came before or
after it.&lt;/li>
&lt;li>Almost all other embeddings are &lt;em>contextual&lt;/em> now: when embedding a token, they
also consider the tokens before &amp;amp;/ after it.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Unidirectional vs bidirectional embeddings
&lt;ul>
&lt;li>When considering the context of a token, the question is whether you should
consider the tokens both before and after it (i.e. bidirectional embeddings), or
just the tokens that came before (i.e. unidirectional embeddings).&lt;/li>
&lt;li>Unidirectional embeddings make the sense when generating text (i.e. text
generation must be done in the way humans write text: in one direction). On the
other hand, bidirectional embeddings make sense when performing sentence-level
tasks such as summarization or rewriting.&lt;/li>
&lt;li>The Transformer was notable in that it had bidirectional encoder blocks and
unidirectional decoder blocks. That&amp;rsquo;s why BERT [GPT-2] produces bidirectional
[unidirectional] embeddings, since it&amp;rsquo;s a stack of Transformer encoders
[decoders].&lt;/li>
&lt;li>Note that the unidirectional/bidirectional distinction is related to whether or
not the model is autoregressive: autoregressive models learn unidirectional
embeddings.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Transformer-based models have had an interesting history with scaling.&lt;/p>
&lt;ul>
&lt;li>This trend probably started when GPT-2 was published: &amp;ldquo;it sounds very dumb and too
easy, but magical things happen if you make your Transformer model bigger&amp;rdquo;.&lt;/li>
&lt;li>An open question is, how do Transformer models scale (along any dimension of
interest)? For example, how much does dataset size or the number of layers or the
number of training iterations matter in the ultimate performance of a Transformer
model? At what point does making your Transformer model &amp;ldquo;bigger&amp;rdquo; (along any
dimension of interest) provide diminishing returns?&lt;/li>
&lt;li>There is some &lt;a href="https://github.com/huggingface/awesome-papers#march-24-2020">solid
work&lt;/a> being done to
answer this question, and there seems to be good evidence for some fairly
surprising conclusions!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Since writing this blog post, there have been several more Transformer-based NLP models published, such as the &lt;a href="https://ai.googleblog.com/2020/01/reformer-efficient-transformer.html">Reformer&lt;/a> from Google and &lt;a href="https://arxiv.org/abs/2005.14165">GPT-3&lt;/a> from OpenAI. Because I can&amp;rsquo;t possibly keep up with &lt;em>all&lt;/em> new Transformer-based models, I won&amp;rsquo;t be writing about them.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></entry><entry><title>Adventures in Manipulating Python ASTs</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/manipulating-python-asts/"/><id>https://www.georgeho.org/manipulating-python-asts/</id><updated>2020-03-27T00:00:00Z</updated><published>2020-03-27T00:00:00Z</published><content type="html">&lt;p>A while back, I explored the possibility of simplifying &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> PyMC4&amp;rsquo;s model specification
API by manipulating the &lt;a href="https://docs.python.org/3/library/ast.html">Python abstract syntax
tree&lt;/a> (AST) of the model code. The PyMC
developers didn&amp;rsquo;t end up pursuing those API changes any further, but not until I had the
chance to learn a lot about Python ASTs.&lt;/p>
&lt;p>Enough curious people have asked me about my experience tinkering with ASTs that I
figure I&amp;rsquo;d write a short post about the details of my project, in the hope that someone
else will find it useful.&lt;/p>
&lt;p>You should read this blog post as a quick overview of my experience with Python ASTs, or
an annotated list of links, and not a comprehensive tutorial on model specification APIs
or Python ASTs. For a full paper trail of my adventures with Python ASTs, check out &lt;a href="https://github.com/eigenfoo/random/tree/master/python/ast-hiding-yield">my
notebooks on
GitHub&lt;/a>.&lt;/p>
&lt;h2 id="the-problem">The Problem&lt;/h2>
&lt;p>Originally, PyMC4&amp;rsquo;s proposed model specification API looked something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">linear_regression&lt;/span>(x):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scale &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">yield&lt;/span> tfd&lt;span style="color:#f92672">.&lt;/span>HalfCauchy(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> coefs &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">yield&lt;/span> tfd&lt;span style="color:#f92672">.&lt;/span>Normal(tf&lt;span style="color:#f92672">.&lt;/span>zeros(x&lt;span style="color:#f92672">.&lt;/span>shape[&lt;span style="color:#ae81ff">1&lt;/span>]), &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> predictions &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">yield&lt;/span> tfd&lt;span style="color:#f92672">.&lt;/span>Normal(tf&lt;span style="color:#f92672">.&lt;/span>linalg&lt;span style="color:#f92672">.&lt;/span>matvec(x, coefs), scale)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> predictions
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The main drawback to this API was that the &lt;code>yield&lt;/code> keyword was confusing. Many users
don’t really understand Python generators, and those who do might only understand
&lt;code>yield&lt;/code> as a drop-in replacement for &lt;code>return&lt;/code> (that is, they might understand what it
means for a function to end in &lt;code>yield foo&lt;/code>, but would be uncomfortable with &lt;code>bar = yield foo&lt;/code>).&lt;/p>
&lt;p>Furthermore, the &lt;code>yield&lt;/code> keyword introduces a leaky abstraction&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>: users don’t care
about whether model is a function or a generator, and they shouldn&amp;rsquo;t need to. More
generally, users shouldn&amp;rsquo;t have to know anything about how PyMC works in order to use
it: ideally, the only thing users would need to think about would be their data and
their model. Having to graft several &lt;code>yield&lt;/code> keywords into their code is a fairly big
intrusion in that respect.&lt;/p>
&lt;p>Finally, this model specification API is essentially moving the problem off of our
plates and onto our users. The entire point of the PyMC project is to provide a friendly
and easy-to-use interface for Bayesian modelling.&lt;/p>
&lt;p>To enumerate the problem further, we wanted to:&lt;/p>
&lt;ol>
&lt;li>Hide the &lt;code>yield&lt;/code> keyword from the user-facing model specification API.&lt;/li>
&lt;li>Obtain the user-defined model as a generator.&lt;/li>
&lt;/ol>
&lt;p>The main difficulty with the first goal is that as soon as we remove &lt;code>yield&lt;/code> from the
model function, it is no longer a generator. However, the PyMC inference engine needs the
model as a generator, since this allows us to interrupt the control flow of the model at
various points to do certain things:&lt;/p>
&lt;ul>
&lt;li>Manage random variable names.&lt;/li>
&lt;li>Perform sampling.&lt;/li>
&lt;li>Other arbitrary PyMC magic that I&amp;rsquo;m truthfully not familiar with.&lt;/li>
&lt;/ul>
&lt;p>In short, the user writes their model as a function, but we require the model as a
generator.&lt;/p>
&lt;p>I opine on why this problem is challenging a lot more
&lt;a href="https://github.com/eigenfoo/random/tree/master/python/ast-hiding-yield/00-prototype#why-is-this-problem-hard">here&lt;/a>.&lt;/p>
&lt;h2 id="the-solution">The Solution&lt;/h2>
&lt;p>First, I wrote a &lt;code>FunctionToGenerator&lt;/code> class:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FunctionToGenerator&lt;/span>(ast&lt;span style="color:#f92672">.&lt;/span>NodeTransformer):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> This subclass traverses the AST of the user-written, decorated,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> model specification and transforms it into a generator for the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> model. Subclassing in this way is the idiomatic way to transform
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> an AST.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Specifically:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> 1. Add `yield` keywords to all assignments
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> E.g. `x = tfd.Normal(0, 1)` -&amp;gt; `x = yield tfd.Normal(0, 1)`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> 2. Rename the model specification function to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> `_pm_compiled_model_generator`. This is done out an abundance
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> of caution more than anything.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> 3. Remove the @Model decorator. Otherwise, we risk running into
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> an infinite recursion.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">visit_Assign&lt;/span>(self, node):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> new_node &lt;span style="color:#f92672">=&lt;/span> node
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> new_node&lt;span style="color:#f92672">.&lt;/span>value &lt;span style="color:#f92672">=&lt;/span> ast&lt;span style="color:#f92672">.&lt;/span>Yield(value&lt;span style="color:#f92672">=&lt;/span>new_node&lt;span style="color:#f92672">.&lt;/span>value)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Tie up loose ends in the AST.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ast&lt;span style="color:#f92672">.&lt;/span>copy_location(new_node, node)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ast&lt;span style="color:#f92672">.&lt;/span>fix_missing_locations(new_node)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>generic_visit(node)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> new_node
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">visit_FunctionDef&lt;/span>(self, node):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> new_node &lt;span style="color:#f92672">=&lt;/span> node
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> new_node&lt;span style="color:#f92672">.&lt;/span>name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;_pm_compiled_model_generator&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> new_node&lt;span style="color:#f92672">.&lt;/span>decorator_list &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Tie up loose ends in the AST.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ast&lt;span style="color:#f92672">.&lt;/span>copy_location(new_node, node)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ast&lt;span style="color:#f92672">.&lt;/span>fix_missing_locations(new_node)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>generic_visit(node)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> new_node
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Subclassing &lt;code>ast.NodeTransformer&lt;/code> (as &lt;code>FunctionToGenerator&lt;/code> does) is the &lt;a href="https://greentreesnakes.readthedocs.io/en/latest/manipulating.html#modifying-the-tree">recommended
way of modifying
ASTs&lt;/a>.
The functionality of &lt;code>FunctionToGenerator&lt;/code> is pretty well described by the docstring:
the &lt;code>visit_Assign&lt;/code> method adds the &lt;code>yield&lt;/code> keyword to all assignments by wrapping the
visited &lt;code>Assign&lt;/code> node within a &lt;code>Yield&lt;/code> node. The &lt;code>visit_FunctionDef&lt;/code> method removes the
decorator and renames the function to &lt;code>_pm_compiled_model_generator&lt;/code>. All told, after
the &lt;code>NodeTransformer&lt;/code> is done with the AST, we have one function,
&lt;code>_pm_compiled_model_generator&lt;/code>, which is a modified version of the user-defined
function.&lt;/p>
&lt;p>Second, the &lt;code>Model&lt;/code> class:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Model&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34; pm.Model decorator. &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self, func):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>func &lt;span style="color:#f92672">=&lt;/span> func
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Introspect wrapped function, instead of the decorator class.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> functools&lt;span style="color:#f92672">.&lt;/span>update_wrapper(self, func)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Uncompile wrapped function.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uncompiled &lt;span style="color:#f92672">=&lt;/span> uncompile(func&lt;span style="color:#f92672">.&lt;/span>__code__)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Parse AST and modify it.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tree &lt;span style="color:#f92672">=&lt;/span> parse_snippet(&lt;span style="color:#f92672">*&lt;/span>uncompiled)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tree &lt;span style="color:#f92672">=&lt;/span> FunctionToGenerator()&lt;span style="color:#f92672">.&lt;/span>visit(tree)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uncompiled[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> tree
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Recompile wrapped function.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>recompiled &lt;span style="color:#f92672">=&lt;/span> recompile(&lt;span style="color:#f92672">*&lt;/span>uncompiled)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Execute recompiled code (defines `_pm_compiled_model_generator`)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># in the locals() namespace and assign it to an attribute.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Refer to http://lucumr.pocoo.org/2011/2/1/exec-in-python/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exec(self&lt;span style="color:#f92672">.&lt;/span>recompiled, &lt;span style="color:#66d9ef">None&lt;/span>, locals())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>model_generator &lt;span style="color:#f92672">=&lt;/span> locals()[&lt;span style="color:#e6db74">&amp;#34;_pm_compiled_model_generator&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This class isn&amp;rsquo;t meant to be instantiated: rather, it&amp;rsquo;s &lt;a href="https://realpython.com/primer-on-python-decorators/#classes-as-decorators">meant to be used as a Python
decorator&lt;/a>.
Essentially, it &amp;ldquo;uncompiles&amp;rdquo; the function to get the Python source code of the function.
This source code is then passed to the &lt;code>parse_snippet&lt;/code>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> function, which returns the
AST for the function. We then modify this AST with the &lt;code>FunctionToGenerator&lt;/code> class that
we defined above. Finally, we recompile this AST and execute it. Recall that executing
this recompiled AST defines a new function called &lt;code>_pm_compiled_model_generator&lt;/code>. This
new function, accessed via the &lt;code>locals&lt;/code> variable&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>, is then bound to the class&amp;rsquo;s
&lt;code>self.model_generator&lt;/code>, which explains the confusing-looking
&lt;code>self.model_generator = locals()[&amp;quot;_pm_compiled_model_generator&amp;quot;]&lt;/code>.&lt;/p>
&lt;p>Finally, the user facing API looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Model&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">linear_regression&lt;/span>(x):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scale &lt;span style="color:#f92672">=&lt;/span> tfd&lt;span style="color:#f92672">.&lt;/span>HalfCauchy(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> coefs &lt;span style="color:#f92672">=&lt;/span> tfd&lt;span style="color:#f92672">.&lt;/span>Normal(tf&lt;span style="color:#f92672">.&lt;/span>zeros(x&lt;span style="color:#f92672">.&lt;/span>shape[&lt;span style="color:#ae81ff">1&lt;/span>]), &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> predictions &lt;span style="color:#f92672">=&lt;/span> tfd&lt;span style="color:#f92672">.&lt;/span>Normal(tf&lt;span style="color:#f92672">.&lt;/span>linalg&lt;span style="color:#f92672">.&lt;/span>matvec(x, coefs), scale)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> predictions
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>linear_regression&lt;span style="color:#f92672">.&lt;/span>model_generator(tf&lt;span style="color:#f92672">.&lt;/span>zeros([&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>])) &lt;span style="color:#75715e"># Shape is irrelevant here&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Out[8]:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># &amp;lt;generator object _pm_compiled_model_generator at 0x107a5c5c8&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, the users need not write &lt;code>yield&lt;/code> while specifying their models, and the
PyMC inference engine can now simply call the &lt;code>model_generator&lt;/code> method of
&lt;code>linear_regression&lt;/code> to produce a generator called &lt;code>_pm_compiled_model_generator&lt;/code>, as
desired. Success!&lt;/p>
&lt;h2 id="lessons-learnt">Lessons Learnt&lt;/h2>
&lt;p>Again, PyMC4&amp;rsquo;s model specification API will &lt;em>not&lt;/em> be incorporating these changes: the
PyMC developers have since decided that the &lt;code>yield&lt;/code> keyword is the most elegant (but not
necessarily the easiest) way for users to specify statistical models. This post is just
meant to summarize the lessons learnt while pursuing this line of inquiry.&lt;/p>
&lt;p>Reading and parsing the AST is perfectly safe: that&amp;rsquo;s basically just a form of code
introspection, which is totally a valid thing to do! It&amp;rsquo;s when you want to modify or
even rewrite the AST that things start getting &lt;del>janky&lt;/del> dangerous (especially if you
want to execute the modified AST &lt;em>instead&lt;/em> of the written code, as I was trying to do!).&lt;/p>
&lt;p>If you want to programmatically modify the AST (e.g. &amp;ldquo;insert a &lt;code>yield&lt;/code> keyword in front
of every assignment of a TensorFlow Distribution&amp;rdquo;, as in our case), stop and consider if
you&amp;rsquo;re attempting to modify the &lt;em>semantics&lt;/em> of the written code, and if you&amp;rsquo;re sure that
that&amp;rsquo;s a good idea (e.g. the &lt;code>yield&lt;/code> keywords in the code &lt;em>mean something&lt;/em>, and remove
those keywords changes the apparent semantics of the code).&lt;/p>
&lt;h2 id="further-reading">Further Reading&lt;/h2>
&lt;p>I&amp;rsquo;ve only given a high-level overview of this project here, and a lot of the technical
details were glossed over. If you&amp;rsquo;re hungry for more, check out the following resources:&lt;/p>
&lt;ul>
&lt;li>Notebooks and more extensive documentation on this project &lt;a href="https://github.com/eigenfoo/random/tree/master/python/ast-hiding-yield">are on
GitHub&lt;/a>. In
particular, it might be helpful to peruse the &lt;a href="https://github.com/eigenfoo/random/tree/master/python/ast-hiding-yield/00-prototype#links-and-references">links and references at the end of the
READMEs&lt;/a>.&lt;/li>
&lt;li>For those looking to programmatically inspect/modify Python ASTs the same way I did
here, you might find &lt;a href="https://twitter.com/remilouf/status/1213079103156424704">this Twitter
thread&lt;/a> helpful.&lt;/li>
&lt;li>And for those wondering how PyMC4&amp;rsquo;s model specification API ended up, some very smart
people gave their feedback on this work &lt;a href="https://twitter.com/avibryant/status/1150827954319982592">on
Twitter&lt;/a>.&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Or should I say, complicating? At any rate, changing!&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>I was &lt;a href="https://twitter.com/avibryant/status/1150827954319982592">subsequently
convinced&lt;/a> that this
isn&amp;rsquo;t a leaky abstraction after all.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>I omitted the implementation of &lt;code>parse_snippet&lt;/code> for brevity. If you want
to see it, check out the &amp;ldquo;AST Helper Functions&amp;rdquo; section of &lt;a href="https://github.com/eigenfoo/random/blob/master/python/ast-hiding-yield/00-prototype/hiding-yield.ipynb">this
notebook&lt;/a>.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>For way more information on &lt;code>exec&lt;/code>, &lt;code>eval&lt;/code>, &lt;code>locals&lt;/code> and &lt;code>globals&lt;/code>, check
out &lt;a href="https://lucumr.pocoo.org/2011/2/1/exec-in-python/">Armin Ronacher&amp;rsquo;s blog
post&lt;/a> and &lt;a href="https://stackoverflow.com/questions/2220699/whats-the-difference-between-eval-exec-and-compile">this
StackOverflow
answer&lt;/a>.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></entry><entry><title>Benchmarks for Mass Matrix Adaptation</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/mass-matrix-benchmarks/"/><id>https://www.georgeho.org/mass-matrix-benchmarks/</id><updated>2019-12-14T00:00:00Z</updated><published>2019-12-14T00:00:00Z</published><content type="html">&lt;p>I was lucky enough to be invited to attend the &lt;a href="https://gradientretreat.com/">Gradient
Retreat&lt;/a> earlier this month. It was an entire week
on a beautiful island with some amazingly intelligent Bayesians, and no demands
on my time other than the self-set (and admittedly vague) goal of contributing
to probabilistic programming in some way.&lt;/p>
&lt;p>I initially tried to implement mass matrix adaptation in Tensorflow Probability,
but I quickly readjusted my goals to something more achievable: running some
benchmarks with tuning in Hamiltonian Monte Carlo (HMC).&lt;/p>
&lt;figure>
&lt;a href="https://www.georgeho.org/assets/images/galiano.jpg">&lt;img src="https://www.georgeho.org/assets/images/galiano.jpg" alt="A view of a forest on Galiano Island">&lt;/a>
&lt;a href="https://www.georgeho.org/assets/images/galiano2.jpg">&lt;img src="https://www.georgeho.org/assets/images/galiano2.jpg" alt="The view from a bluff on Galiano Island">&lt;/a>
&lt;figcaption>Pictures from Galiano Island.&lt;/figcaption>
&lt;/figure>
&lt;p>A quick rundown for those unfamiliar: &lt;em>tuning&lt;/em> is what happens before sampling,
during which the goal is not to actually draw samples, but to &lt;em>prepare&lt;/em> to draw
samples&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. For HMC and its variants, this means estimating HMC parameters such
as the step size, integration time and mass matrix&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>, the last of which is
basically the covariance matrix of the model parameters. Because my life is
finite (and I assume everybody else&amp;rsquo;s is too), I limited myself to mass matrix
adaptation.&lt;/p>
&lt;p>(If you&amp;rsquo;re still uncertain about the details of tuning or mass matrix
adaptation, check out &lt;a href="https://colcarroll.github.io/hmc_tuning_talk/">Colin Carroll&amp;rsquo;s essay on HMC
tuning&lt;/a> or the &lt;a href="https://mc-stan.org/docs/2_20/reference-manual/hmc-algorithm-parameters.html">Stan reference
manual on HMC
parameters&lt;/a>:
I don&amp;rsquo;t explain many more concepts in the rest of this post.)&lt;/p>
&lt;p>The interesting thing about tuning is that there are no rules: there are no
asymptotic guarantees we can rely on and no mathematical results to which we can
turn for enlightened inspiration. The only thing we care about is obtaining a
decent estimate of the mass matrix, and preferably quickly.&lt;/p>
&lt;p>Accompanying this lack of understanding of mass matrix adaptation is an
commensurate lack of (apparent) scientific inquiry — there is scant literature
to look to, and for open source developers, there is little prior art to draw
from when writing new implementations of HMC!&lt;/p>
&lt;p>So I decided to do some empirical legwork and benchmark various methods of mass
matrix adaptation. Here are the questions I was interested in answering:&lt;/p>
&lt;ol>
&lt;li>Is the assumption that the mass matrix is diagonal (in other words, assume
that all parameters are uncorrelated) a good assumption to make? What are
the implications of this assumption for the tuning time, and the number of
effective samples per second?&lt;/li>
&lt;li>Does the tuning schedule (i.e. the sizes of the adaptation windows) make a
big difference? Specifically, should we have a schedule of constant
adaptation windows, or an &amp;ldquo;expanding schedule&amp;rdquo; of exponentially growing
adaptation windows?&lt;/li>
&lt;li>Besides assuming the mass matrix is diagonal, are there any other ways of
simplifying mass matrix adaptation? For example, could we approximate the
mass matrix as low rank?&lt;/li>
&lt;/ol>
&lt;p>I benchmarked five different mass matrix adaptation methods:&lt;/p>
&lt;ol>
&lt;li>A diagonal mass matrix (&lt;code>diag&lt;/code>)&lt;/li>
&lt;li>A full (a.k.a. dense) mass matrix (&lt;code>full&lt;/code>)&lt;/li>
&lt;li>A diagonal mass matrix adapted on an expanding schedule (&lt;code>diag_exp&lt;/code>)&lt;/li>
&lt;li>A full mass matrix adapted on an expanding schedule (&lt;code>diag_exp&lt;/code>)&lt;/li>
&lt;li>A low-rank approximation to the mass matrix using &lt;a href="https://github.com/aseyboldt/covadapt">Adrian Seyboldt&amp;rsquo;s &lt;code>covadapt&lt;/code> library&lt;/a>.&lt;/li>
&lt;/ol>
&lt;p>I benchmarked these adaptation methods against six models:&lt;/p>
&lt;ol>
&lt;li>A 100-dimensional multivariate normal with a non-diagonal covariance matrix (&lt;code>mvnormal&lt;/code>)&lt;/li>
&lt;li>A 100-dimensional multivariate normal with a low-rank covariance matrix (&lt;code>lrnormal&lt;/code>)&lt;/li>
&lt;li>A &lt;a href="https://docs.pymc.io/notebooks/stochastic_volatility.html">stochastic volatility model&lt;/a> (&lt;code>stoch_vol&lt;/code>)&lt;/li>
&lt;li>The &lt;a href="https://docs.pymc.io/notebooks/Diagnosing_biased_Inference_with_Divergences.html#The-Eight-Schools-Model">eight schools model&lt;/a> (&lt;code>eight&lt;/code>)&lt;/li>
&lt;li>The &lt;a href="https://docs.pymc.io/notebooks/hierarchical_partial_pooling.html">PyMC3 baseball model&lt;/a> (&lt;code>baseball&lt;/code>)&lt;/li>
&lt;li>A &lt;a href="https://docs.pymc.io/notebooks/GP-SparseApprox.html#Examples">sparse Gaussian process approximation&lt;/a> (&lt;code>gp&lt;/code>)&lt;/li>
&lt;/ol>
&lt;p>Without further ado, the main results are shown below. Afterwards, I make some
general observations on the benchmarks, and finally I describe various
shortcomings of my experimental setup (which, if I were more optimistic, I would
call &amp;ldquo;directions for further work&amp;rdquo;).&lt;/p>
&lt;h3 id="tuning-times">Tuning Times&lt;/h3>
&lt;p>This tabulates the tuning time, in seconds, of each adaptation method for each
model. Lower is better. The lowest tuning time for each model is shown in bold
italics.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">&lt;/th>
&lt;th style="text-align:right">&lt;strong>&lt;code>mvnormal&lt;/code>&lt;/strong>&lt;/th>
&lt;th style="text-align:right">&lt;strong>&lt;code>lrnormal&lt;/code>&lt;/strong>&lt;/th>
&lt;th style="text-align:right">&lt;strong>&lt;code>stoch_vol&lt;/code>&lt;/strong>&lt;/th>
&lt;th style="text-align:right">&lt;strong>&lt;code>gp&lt;/code>&lt;/strong>&lt;/th>
&lt;th style="text-align:right">&lt;strong>&lt;code>eight&lt;/code>&lt;/strong>&lt;/th>
&lt;th style="text-align:right">&lt;strong>&lt;code>baseball&lt;/code>&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>&lt;code>diag&lt;/code>&lt;/strong>&lt;/td>
&lt;td style="text-align:right">365.34&lt;/td>
&lt;td style="text-align:right">340.10&lt;/td>
&lt;td style="text-align:right">239.59&lt;/td>
&lt;td style="text-align:right">18.47&lt;/td>
&lt;td style="text-align:right">2.92&lt;/td>
&lt;td style="text-align:right">5.32&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>&lt;code>full&lt;/code>&lt;/strong>&lt;/td>
&lt;td style="text-align:right">&lt;em>&lt;strong>8.29&lt;/strong>&lt;/em>&lt;/td>
&lt;td style="text-align:right">364.07&lt;/td>
&lt;td style="text-align:right">904.95&lt;/td>
&lt;td style="text-align:right">&lt;em>&lt;strong>14.24&lt;/strong>&lt;/em>&lt;/td>
&lt;td style="text-align:right">&lt;em>&lt;strong>2.91&lt;/strong>&lt;/em>&lt;/td>
&lt;td style="text-align:right">&lt;em>&lt;strong>4.93&lt;/strong>&lt;/em>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>&lt;code>diag_exp&lt;/code>&lt;/strong>&lt;/td>
&lt;td style="text-align:right">358.50&lt;/td>
&lt;td style="text-align:right">360.91&lt;/td>
&lt;td style="text-align:right">&lt;em>&lt;strong>219.65&lt;/strong>&lt;/em>&lt;/td>
&lt;td style="text-align:right">16.25&lt;/td>
&lt;td style="text-align:right">3.05&lt;/td>
&lt;td style="text-align:right">5.08&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>&lt;code>full_exp&lt;/code>&lt;/strong>&lt;/td>
&lt;td style="text-align:right">8.46&lt;/td>
&lt;td style="text-align:right">142.20&lt;/td>
&lt;td style="text-align:right">686.58&lt;/td>
&lt;td style="text-align:right">14.87&lt;/td>
&lt;td style="text-align:right">3.21&lt;/td>
&lt;td style="text-align:right">6.04&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>&lt;code>covadapt&lt;/code>&lt;/strong>&lt;/td>
&lt;td style="text-align:right">386.13&lt;/td>
&lt;td style="text-align:right">&lt;em>&lt;strong>89.92&lt;/strong>&lt;/em>&lt;/td>
&lt;td style="text-align:right">398.08&lt;/td>
&lt;td style="text-align:right">N/A&lt;/td>
&lt;td style="text-align:right">N/A&lt;/td>
&lt;td style="text-align:right">N/A&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="effective-samples-per-second">Effective Samples per Second&lt;/h3>
&lt;p>This tabulates the number of effective samples drawn by each adaptation method
for each model. Higher is better. The highest numbers of effective samples per
second is shown in bold italics.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">&lt;/th>
&lt;th style="text-align:right">&lt;strong>&lt;code>mvnormal&lt;/code>&lt;/strong>&lt;/th>
&lt;th style="text-align:right">&lt;strong>&lt;code>lrnormal&lt;/code>&lt;/strong>&lt;/th>
&lt;th style="text-align:right">&lt;strong>&lt;code>stoch_vol&lt;/code>&lt;/strong>&lt;/th>
&lt;th style="text-align:right">&lt;strong>&lt;code>gp&lt;/code>&lt;/strong>&lt;/th>
&lt;th style="text-align:right">&lt;strong>&lt;code>eight&lt;/code>&lt;/strong>&lt;/th>
&lt;th style="text-align:right">&lt;strong>&lt;code>baseball&lt;/code>&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>&lt;code>diag&lt;/code>&lt;/strong>&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">1.55&lt;/td>
&lt;td style="text-align:right">&lt;em>&lt;strong>11.22&lt;/strong>&lt;/em>&lt;/td>
&lt;td style="text-align:right">65.36&lt;/td>
&lt;td style="text-align:right">761.82&lt;/td>
&lt;td style="text-align:right">455.23&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>&lt;code>full&lt;/code>&lt;/strong>&lt;/td>
&lt;td style="text-align:right">1.73&lt;/td>
&lt;td style="text-align:right">0.01&lt;/td>
&lt;td style="text-align:right">6.71&lt;/td>
&lt;td style="text-align:right">&lt;em>&lt;strong>106.30&lt;/strong>&lt;/em>&lt;/td>
&lt;td style="text-align:right">&lt;em>&lt;strong>840.77&lt;/strong>&lt;/em>&lt;/td>
&lt;td style="text-align:right">&lt;em>&lt;strong>495.93&lt;/strong>&lt;/em>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>&lt;code>diag_exp&lt;/code>&lt;/strong>&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">1.51&lt;/td>
&lt;td style="text-align:right">9.79&lt;/td>
&lt;td style="text-align:right">59.89&lt;/td>
&lt;td style="text-align:right">640.90&lt;/td>
&lt;td style="text-align:right">336.71&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>&lt;code>full_exp&lt;/code>&lt;/strong>&lt;/td>
&lt;td style="text-align:right">&lt;em>&lt;strong>1,799.11&lt;/strong>&lt;/em>&lt;/td>
&lt;td style="text-align:right">&lt;em>&lt;strong>1,753.65&lt;/strong>&lt;/em>&lt;/td>
&lt;td style="text-align:right">0.16&lt;/td>
&lt;td style="text-align:right">101.99&lt;/td>
&lt;td style="text-align:right">618.28&lt;/td>
&lt;td style="text-align:right">360.14&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>&lt;code>covadapt&lt;/code>&lt;/strong>&lt;/td>
&lt;td style="text-align:right">0.02&lt;/td>
&lt;td style="text-align:right">693.87&lt;/td>
&lt;td style="text-align:right">5.71&lt;/td>
&lt;td style="text-align:right">N/A&lt;/td>
&lt;td style="text-align:right">N/A&lt;/td>
&lt;td style="text-align:right">N/A&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="observations">Observations&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>tldr:&lt;/strong> As is typical with these sorts of things, no one adaptation method
uniformly outperforms the others.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>A full mass matrix can provide significant improvements over a diagonal mass
matrix for both the tuning time and the number of effective samples per
second. This improvement can sometimes go up to two orders of magnitude!
&lt;ul>
&lt;li>This is most noticeable in the &lt;code>mvnormal&lt;/code> model, with heavily correlated
parameters.&lt;/li>
&lt;li>Happily, my benchmarks are not the only instance of full mass matrices
outperforming diagonal ones: &lt;a href="https://dfm.io/posts/pymc3-mass-matrix/">Dan Foreman-Mackey demonstrated something
similar in one of his blog posts&lt;/a>.&lt;/li>
&lt;li>However, in models with less extreme correlations among parameters, this
advantage shrinks significantly (although it doesn&amp;rsquo;t go away entirely).
Full matrices can also take longer to tune. You can see this in the baseball
or eight schools model.&lt;/li>
&lt;li>Nevertheless, full mass matrices never seem to perform egregiously &lt;em>worse&lt;/em>
than diagonal mass matrices. This makes sense theoretically: a full mass
matrix can be estimated to be diagonal (at the cost of a quadratic memory
requirement as opposed to linear), but not vice versa.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Having an expanding schedule for tuning can sometimes give better performance,
but nowhere near as significant as the difference between diagonal and full
matrices. This difference is most noticeable for the &lt;code>mvnormal&lt;/code> and &lt;code>lrnormal&lt;/code>
models (probably because these models have a constant covariance matrix and so
more careful estimates using expanding windows can provide much better
sampling).&lt;/li>
&lt;li>I suspect the number of effective samples per second for a full mass matrix on
the &lt;code>lrnormal&lt;/code> model (0.01 effective samples per second) is a mistake (or
some other computational fluke): it looks way too low to be reasonable.&lt;/li>
&lt;li>I&amp;rsquo;m also surprised that &lt;code>full_exp&lt;/code> does really badly (in terms of effective
samples per second) on the &lt;code>stoch_vol&lt;/code> model, despite &lt;code>full&lt;/code> doing decently
well! This is either a fluke, or a really interesting phenomenon to dig in to.&lt;/li>
&lt;li>&lt;code>covadapt&lt;/code> seems to run into some numerical difficulties? While running these
benchmarks I ran into an inscrutable and non-reproducible
&lt;a href="https://stackoverflow.com/q/18436667">&lt;code>ArpackError&lt;/code>&lt;/a> from SciPy.&lt;/li>
&lt;/ul>
&lt;h2 id="experimental-setup">Experimental Setup&lt;/h2>
&lt;ul>
&lt;li>All samplers were run for 2000 tuning steps and 1000 sampling steps. This is
unusually high, but is necessary for &lt;code>covadapt&lt;/code> to work well, and I wanted to
use the same number of iterations across all the benchmarks.&lt;/li>
&lt;li>My expanding schedule is as follows: the first adaptation window is 100
iterations, and each subsequent window is 1.005 times the previous window.
These numbers give 20 updates within 2000 iterations, while maintaining an
exponentially increasing adaptation window size.&lt;/li>
&lt;li>I didn&amp;rsquo;t run &lt;code>covadapt&lt;/code> for models with fewer than 100 model parameters.
With so few parameters, there&amp;rsquo;s no need to approximate a mass matrix as
low-rank: you can just estimate the full mass matrix!&lt;/li>
&lt;li>I set &lt;code>target_accept&lt;/code> (a.k.a. &lt;code>adapt_delta&lt;/code> to Stan users) to 0.9 to make all
divergences go away.&lt;/li>
&lt;li>All of these numbers were collected by sampling once per model per adaptation
method (yes only once, sorry) in PyMC3, running on my MacBook Pro.&lt;/li>
&lt;/ul>
&lt;h2 id="shortcomings">Shortcomings&lt;/h2>
&lt;ul>
&lt;li>In some sense comparing tuning times is not a fair comparison: it&amp;rsquo;s possible
that some mass matrix estimates converge quicker than others, and so comparing
their tuning times is essentially penalizing these methods for converging
faster than others.&lt;/li>
&lt;li>It&amp;rsquo;s also possible that my expanding schedule for the adaptation windows just
sucks! There&amp;rsquo;s no reason why the first window needs to be 100 iterations, or
why 1.005 should be a good multiplier. It looks like Stan &lt;a href="https://github.com/stan-dev/stan/blob/736311d88e99b997f5b902409752fb29d6ec0def/src/stan/mcmc/windowed_adaptation.hpp#L95">doubles their
adaptation window
sizes&lt;/a>
during warmup.&lt;/li>
&lt;li>These benchmarks are done only for very basic toy models: I should test more
extensively on more models that people in The Real World™ use.&lt;/li>
&lt;li>If you are interested in taking these benchmarks further (or perhaps just want
to fact-check me on my results), the code is &lt;a href="https://github.com/eigenfoo/mass-matrix-benchmarks">sitting in this GitHub
repository&lt;/a>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>It&amp;rsquo;s good to point out that mass matrix adaptation is to make sampling
more efficient, not more valid. Theoretically, any mass matrix would work,
but a good one (i.e. a good estimate of the covariance matrix of the model
parameters) could sample orders of magnitudes more efficiently.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>…uh, &lt;em>&lt;em>sweats and looks around nervously for differential geometers&lt;/em>&lt;/em>
more formally called the &lt;em>metric&lt;/em>…&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>There are some violin plots lying around in the notebook, a relic from a
time when I thought that I would have the patience to run each model and
adaptation method multiple times.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></entry><entry><title>Introducing `stan-vim`</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/stan-vim/"/><id>https://www.georgeho.org/stan-vim/</id><updated>2019-11-11T00:00:00Z</updated><published>2019-11-11T00:00:00Z</published><content type="html">&lt;center>
&lt;img
src="https://www.georgeho.org/assets/images/stan-logo.png"
alt="Stan logo">
&lt;/center>
&lt;p>I made a Vim plugin for Stan!&lt;/p>
&lt;p>I&amp;rsquo;ve been reading and writing a lot of Stan lately, but mainly in barebones text
editors (or even just by &lt;code>cat&lt;/code>ing out the file), so I had to make do with none
of the creature comforts of my favorite text editor, Vim.&lt;/p>
&lt;p>But I also wasn&amp;rsquo;t happy with the syntax highlighting provided by
&lt;a href="https://github.com/maverickg/stan.vim">existing&lt;/a>
&lt;a href="https://github.com/mdlerch/mc-stan.vim">Vim&lt;/a>
&lt;a href="https://github.com/ssp3nc3r/stan-syntax-vim">plugins&lt;/a> (and they also looked out
of date and thinly maintained&amp;hellip;), so I just went ahead and learnt a truckload
of Vimscript&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Check out the plugin! You can find installation instructions
&lt;a href="https://github.com/eigenfoo/stan-vim#installation">here&lt;/a> and documentation
&lt;a href="https://github.com/eigenfoo/stan-vim#documentation">here&lt;/a>. Screenshots of
syntax highlighting and projects links are below.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/eigenfoo/stan-vim">GitHub&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vimawesome.com/plugin/stan-vim-is-written-on">VimAwesome&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.vim.org/scripts/script.php?script_id=5835">Vim Online&lt;/a>&lt;/li>
&lt;/ul>
&lt;figure>
&lt;a href="https://raw.githubusercontent.com/eigenfoo/stan-vim/master/screenshots/screenshot0.png">&lt;img src="https://raw.githubusercontent.com/eigenfoo/stan-vim/master/screenshots/screenshot0.png" alt="Screenshot of a Stan model in stan-vim">&lt;/a>
&lt;a href="https://raw.githubusercontent.com/eigenfoo/stan-vim/master/screenshots/screenshot1.png">&lt;img src="https://raw.githubusercontent.com/eigenfoo/stan-vim/master/screenshots/screenshot1.png" alt="Screenshot of the stan-vim documentation">&lt;/a>
&lt;a href="https://raw.githubusercontent.com/eigenfoo/stan-vim/master/screenshots/screenshot2.png">&lt;img src="https://raw.githubusercontent.com/eigenfoo/stan-vim/master/screenshots/screenshot2.png" alt="Screenshot of another Stan model in stan-vim">&lt;/a>
&lt;figcaption>Screenshots of &lt;code>stan-vim&lt;/code> syntax highlighting.&lt;/figcaption>
&lt;/figure>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>As it turns out, &lt;a href="https://www.reddit.com/r/vim/comments/54224o/why_is_there_so_much_hate_for_vimscript/">Vimscript is a very not-good
language&lt;/a>.
This is probably the last Vim plugin I write.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></entry><entry><title>Anatomy of a Probabilistic Programming Framework</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/prob-prog-frameworks/"/><id>https://www.georgeho.org/prob-prog-frameworks/</id><updated>2019-09-30T00:00:00Z</updated><published>2019-09-30T00:00:00Z</published><content type="html">&lt;p>Recently, the PyMC4 developers &lt;a href="https://openreview.net/forum?id=rkgzj5Za8H">submitted an
abstract&lt;/a> to the &lt;a href="https://program-transformations.github.io/">&lt;em>Program Transformations
for Machine Learning&lt;/em> NeurIPS workshop&lt;/a>. I
realized that despite knowing a thing or two about Bayesian modelling, I don&amp;rsquo;t
understand how probabilistic programming frameworks are structured, and therefore
couldn&amp;rsquo;t appreciate the sophisticated design work going into PyMC4. So I trawled through
papers, documentation and source code&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> of various open-source probabilistic
programming frameworks, and this is what I&amp;rsquo;ve managed to take away from it.&lt;/p>
&lt;p>I assume you know a fair bit about probabilistic programming and Bayesian modelling, and
are familiar with the big players in the probabilistic programming world. If you&amp;rsquo;re
unsure, you can &lt;a href="https://www.georgeho.org/bayesian-inference-reading/">read up here&lt;/a>.&lt;/p>
&lt;div>
&lt;h2>Contents&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#dissecting-probabilistic-programming-frameworks">Dissecting Probabilistic Programming Frameworks&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#specifying-the-model-languageapi">Specifying the model: language/API&lt;/a>&lt;/li>
&lt;li>&lt;a href="#building-the-model-density-distributions-and-transformations">Building the model density: distributions and transformations&lt;/a>&lt;/li>
&lt;li>&lt;a href="#computing-the-posterior-inference-algorithm">Computing the posterior: inference algorithm&lt;/a>&lt;/li>
&lt;li>&lt;a href="#computing-the-mode-optimizer">Computing the mode: optimizer&lt;/a>&lt;/li>
&lt;li>&lt;a href="#computing-gradients-autodifferentiation">Computing gradients: autodifferentiation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#monitoring-inference-diagnostics">Monitoring inference: diagnostics&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#a-zoo-of-probabilistic-programming-frameworks">A Zoo of Probabilistic Programming Frameworks&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#stan">Stan&lt;/a>&lt;/li>
&lt;li>&lt;a href="#tensorflow-probability-aka-tfp">TensorFlow Probability (a.k.a. TFP)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#pymc3">PyMC3&lt;/a>&lt;/li>
&lt;li>&lt;a href="#pymc4">PyMC4&lt;/a>&lt;/li>
&lt;li>&lt;a href="#pyro">Pyro&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;h2 id="dissecting-probabilistic-programming-frameworks">Dissecting Probabilistic Programming Frameworks&lt;/h2>
&lt;p>A probabilistic programming framework needs to provide six things:&lt;/p>
&lt;ol>
&lt;li>A language or API for users to specify a model&lt;/li>
&lt;li>A library of probability distributions and transformations to build the posterior
density&lt;/li>
&lt;li>At least one inference algorithm, which either draws samples from the posterior (in
the case of Markov Chain Monte Carlo, MCMC) or computes some approximation of it (in
the case of variational inference, VI)&lt;/li>
&lt;li>At least one optimizer, which can compute the mode of the posterior density&lt;/li>
&lt;li>An autodifferentiation library to compute gradients required by the inference
algorithm and optimizer&lt;/li>
&lt;li>A suite of diagnostics to monitor and analyze the quality of inference&lt;/li>
&lt;/ol>
&lt;p>These six pieces come together like so:&lt;/p>
&lt;p>&lt;img src="https://www.georgeho.org/assets/images/prob-prog-flowchart.png" alt="Flowchart illustrating the structure of a probabilistic programmingframeworks">&lt;/p>
&lt;p>Let&amp;rsquo;s break this down one by one.&lt;/p>
&lt;h3 id="specifying-the-model-languageapi">Specifying the model: language/API&lt;/h3>
&lt;p>This is what users will use to specify their models. Most frameworks will let users
write in some existing programming language and call the framework&amp;rsquo;s functions and
classes, but &lt;del>some others&lt;/del> — why don&amp;rsquo;t I just say it — Stan rolls their own
domain-specific language.&lt;/p>
&lt;p>The main question here is what language you think is best for users to specify models
in: any sufficiently popular host language (such as Python) will reduce the learning
curve for users and make the framework easier to develop and maintain, but a creating
your own language allows you to introduce helpful abstractions for your framework&amp;rsquo;s
particular use case (as &lt;a href="https://mc-stan.org/docs/2_20/reference-manual/blocks-chapter.html">Stan
does&lt;/a>, for example).&lt;/p>
&lt;p>At this point I should point out the non-universal, Python bias in this post: there are
plenty of interesting non-Python probabilistic programming frameworks out there (e.g.
&lt;a href="https://greta-stats.org/">Greta&lt;/a> in R, &lt;a href="https://turing.ml/dev/">Turing&lt;/a> and
&lt;a href="https://www.gen.dev/">Gen&lt;/a> in Julia, &lt;a href="https://github.com/p2t2/figaro">Figaro&lt;/a> and
&lt;a href="https://github.com/stripe/rainier">Rainier&lt;/a> in Scala), as well as universal
probabilistic programming systems&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> (e.g.
&lt;a href="http://probcomp.csail.mit.edu/software/venture/">Venture&lt;/a> from MIT,
&lt;a href="https://probprog.github.io/anglican/index.html">Angelican&lt;/a> from Oxford)&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>. I just
don&amp;rsquo;t know anything about any of them.&lt;/p>
&lt;h3 id="building-the-model-density-distributions-and-transformations">Building the model density: distributions and transformations&lt;/h3>
&lt;p>These are what the user&amp;rsquo;s model calls, in order to compile/build the model itself
(whether that means a posterior log probability, in the case of MCMC, or some loss
function to minimize, in the case of VI). By &lt;em>distributions&lt;/em>, I mean the probability
distributions that the random variables in your model can assume (e.g. Normal or
Poisson), and by &lt;em>transformations&lt;/em> I mean deterministic mathematical operations you can
perform on these random variables, while still keeping track of the derivative of these
transformations&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> (e.g. exponentials, logarithms, sines or cosines).&lt;/p>
&lt;p>This is a good time to point out that the interactions between the language/API and the
distributions and transformations libraries is a major design problem. Here&amp;rsquo;s a (by no
means exhaustive) list of necessary considerations:&lt;/p>
&lt;ol>
&lt;li>In order to build the model density, the framework must keep track of every
distribution and transformation, while also computing the derivatives of any such
transformations. This results in a Jekyll-and-Hyde problem where every transformation
requires a forward and backwards definition. Should this tracking happen eagerly, or
should it be deferred until the user specifies what the model will be used for?&lt;/li>
&lt;li>Theoretically, a model&amp;rsquo;s specification should be the same whether it is to be used
for evaluation, inference or debugging. However, in practice, the program execution
(and computational graph) are different for these three purposes. How should the
framework manage this?&lt;/li>
&lt;li>The framework must also keep track of the shapes of random variables, which is
frighteningly non-trivial! Check out &lt;a href="https://ericmjl.github.io/blog/2019/5/29/reasoning-about-shapes-and-probability-distributions/">this blog
post&lt;/a>
or &lt;a href="https://arxiv.org/abs/1711.10604">the original Tensorflow Distributions paper&lt;/a>
(specifically section 3.3 on shape semantics) for more details.&lt;/li>
&lt;/ol>
&lt;p>For a more comprehensive treatment, I can&amp;rsquo;t recommend &lt;a href="https://docs.google.com/presentation/d/1xgNRJDwkWjTHOYMj5aGefwWiV8x-Tz55GfkBksZsN3g/edit?usp=sharing">Junpeng Lao&amp;rsquo;s PyData Córdoba 2019
talk&lt;/a>
highly enough — he explains in depth the main challenges in implementing a probabilistic
programming API and highlights how various frameworks manage these difficulties.&lt;/p>
&lt;h3 id="computing-the-posterior-inference-algorithm">Computing the posterior: inference algorithm&lt;/h3>
&lt;p>Having specified and built the model, the framework must now actually perform inference:
given a model and some data, obtain the posterior (either by sampling from it, in the
case of MCMC, or by approximating it, in the case of VI).&lt;/p>
&lt;p>Most probabilistic programming frameworks out there implement both MCMC and VI
algorithms, although strength of support and quality of documentation can lean heavily
one way or another. For example, Stan invests heavily into its MCMC, whereas Pyro has
the most extensive support for its stochastic VI.&lt;/p>
&lt;h3 id="computing-the-mode-optimizer">Computing the mode: optimizer&lt;/h3>
&lt;p>Sometimes, instead of performing full-blown inference, it&amp;rsquo;s useful to find the mode of
the model density. These modes can be used as point estimates of parameters, or as the
basis of approximations to a Bayesian posterior. Or perhaps you&amp;rsquo;re doing VI, and you
need some way to perform SGD on a loss function. In either case, a probabilistic
programming framework calls for an optimizer.&lt;/p>
&lt;p>If you don&amp;rsquo;t need to do VI, then a simple and sensible thing to do is to use some
&lt;a href="https://en.wikipedia.org/wiki/Broyden%E2%80%93Fletcher%E2%80%93Goldfarb%E2%80%93Shanno_algorithm">BFGS-based optimization
algorithm&lt;/a>
(e.g. some quasi-Newton method like
&lt;a href="https://en.wikipedia.org/wiki/Limited-memory_BFGS">L-BFGS&lt;/a>) and call it a day.
However, frameworks that focus on VI need to implement &lt;a href="http://docs.pyro.ai/en/stable/optimization.html#module-pyro.optim.optim">optimizers commonly seen in deep
learning&lt;/a>, such
as Adam or RMSProp.&lt;/p>
&lt;h3 id="computing-gradients-autodifferentiation">Computing gradients: autodifferentiation&lt;/h3>
&lt;p>Both the inference algorithm and the optimizer require gradients (at least, if you&amp;rsquo;re
not using ancient inference algorithms and optimizers!), and so you&amp;rsquo;ll need some way to
compute these gradients.&lt;/p>
&lt;p>The easiest thing to do would be to rely on a deep learning framework like TensorFlow or
PyTorch. I&amp;rsquo;ve learned not to get too excited about this though: while deep learning
frameworks&amp;rsquo; heavy optimization of parallelized routines lets you e.g. obtain &lt;a href="https://colindcarroll.com/2019/08/18/very-parallel-mcmc-sampling/">thousands
of MCMC chains in a reasonable amount of
time&lt;/a>, it&amp;rsquo;s not
obvious that this is useful at all (although there&amp;rsquo;s definitely some work going on in
this area).&lt;/p>
&lt;h3 id="monitoring-inference-diagnostics">Monitoring inference: diagnostics&lt;/h3>
&lt;p>Finally, once the inference algorithm has worked its magic, you&amp;rsquo;ll want a way to verify
the validity and efficiency of that inference. This involves some &lt;a href="https://arviz-devs.github.io/arviz/api.html#stats">off-the-shelf
statistical diagnostics&lt;/a> (e.g. BFMI,
information criteria, effective sample size, etc.), but mainly &lt;a href="https://arviz-devs.github.io/arviz/api.html#plots">lots and lots of
visualization&lt;/a>.&lt;/p>
&lt;h2 id="a-zoo-of-probabilistic-programming-frameworks">A Zoo of Probabilistic Programming Frameworks&lt;/h2>
&lt;p>Having outlined the basic internals of probabilistic programming frameworks, I think
it&amp;rsquo;s helpful to go through several of the popular frameworks as examples. I&amp;rsquo;ve tried to
link to the relevant source code in the frameworks where possible.&lt;/p>
&lt;h3 id="stan">Stan&lt;/h3>
&lt;p>It&amp;rsquo;s very easy to describe how Stan is structured: literally everything is
implemented from scratch in C++.&lt;/p>
&lt;ol>
&lt;li>Stan has a compiler for &lt;a href="https://github.com/stan-dev/stan/tree/develop/src/stan/lang">a small domain-specific language for specifying Bayesian
models&lt;/a>&lt;/li>
&lt;li>Stan has libraries of &lt;a href="https://github.com/stan-dev/math/tree/develop/stan/math/prim">probability
distributions&lt;/a> and
&lt;a href="https://github.com/stan-dev/math/tree/develop/stan/math/prim/fun">transforms&lt;/a>&lt;/li>
&lt;li>Stan implements &lt;a href="https://github.com/stan-dev/stan/tree/develop/src/stan/mcmc/hmc">dynamic
HMC&lt;/a> and
&lt;a href="https://github.com/stan-dev/stan/tree/develop/src/stan/variational">variational
inference&lt;/a>&lt;/li>
&lt;li>Stan also rolls their own &lt;a href="https://github.com/stan-dev/math/tree/develop/stan/math">autodifferentiation
library&lt;/a>&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>&lt;/li>
&lt;li>Stan implements an &lt;a href="https://github.com/stan-dev/stan/tree/develop/src/stan/optimization">L-BFGS based
optimizer&lt;/a> (but
also implements &lt;a href="https://mc-stan.org/docs/2_20/reference-manual/optimization-algorithms-chapter.html">a less efficient Newton
optimizer&lt;/a>)&lt;/li>
&lt;li>Finally, Stan has a &lt;a href="https://github.com/stan-dev/stan/tree/develop/src/stan/analyze/mcmc">suite of
diagnostics&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>Note that contrary to popular belief, Stan &lt;em>does not&lt;/em> implement NUTS:&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">Stan implements a dynamic Hamiltonian Monte Carlo method with multinomial sampling of dynamic length trajectories, generalized termination criterion, and improved adaptation of the Euclidean metric.&lt;/p>&amp;mdash; Dan Simpson (&lt;a href="https://twitter.com/dan_p_simpson">@dan_p_simpson&lt;/a>) &lt;a href="https://twitter.com/dan_p_simpson/status/1037332473175265280">September 5, 2018&lt;/a>&lt;/blockquote>
&lt;p>And in case you&amp;rsquo;re looking for a snazzy buzzword to drop:&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">Adaptive HMC. &lt;a href="https://twitter.com/betanalpha">@betanalpha&lt;/a> is reluctant to give it a more specific name because, to paraphrase, that’s just marketing bullshit that leads to us celebrating tiny implementation details rather than actual meaningful contributions to comp stats. This is a wide-ranging subtweet.&lt;/p>&amp;mdash; Dan Simpson (&lt;a href="https://twitter.com/dan_p_simpson">@dan_p_simpson&lt;/a>) &lt;a href="https://twitter.com/dan_p_simpson/status/1034098649406554113">August 27, 2018&lt;/a>&lt;/blockquote>
&lt;h3 id="tensorflow-probability-aka-tfp">TensorFlow Probability (a.k.a. TFP)&lt;/h3>
&lt;ol>
&lt;li>TFP users write Python (albeit through an &lt;a href="https://colcarroll.github.io/ppl-api/">extremely verbose
API&lt;/a>)&lt;/li>
&lt;li>TFP implements their own
&lt;a href="https://github.com/tensorflow/probability/tree/master/tensorflow_probability/python/distributions">distributions&lt;/a>
and
&lt;a href="https://github.com/tensorflow/probability/tree/master/tensorflow_probability/python/bijectors">transforms&lt;/a>
(which TensorFlow, for some reason, calls &amp;ldquo;bijectors&amp;rdquo;). You can find more details in
&lt;a href="https://arxiv.org/abs/1711.10604">their arXiv paper&lt;/a>&lt;/li>
&lt;li>TFP implements &lt;a href="https://github.com/tensorflow/probability/tree/master/tensorflow_probability/python/mcmc">a ton of
MCMC&lt;/a>
algorithms and a handful of &lt;a href="https://github.com/tensorflow/probability/tree/master/tensorflow_probability/python/vi">VI
algorithms&lt;/a>
in TensorFlow&lt;/li>
&lt;li>TFP implements &lt;a href="https://github.com/tensorflow/probability/tree/master/tensorflow_probability/python/optimizer">several
optimizers&lt;/a>,
including Nelder-Mead, BFGS and L-BFGS (again, in TensorFlow)&lt;/li>
&lt;li>TFP relies on TensorFlow to compute gradients (er, duh)&lt;/li>
&lt;li>TFP implements &lt;a href="https://github.com/tensorflow/probability/blob/master/tensorflow_probability/python/mcmc/diagnostic.py">a handful of
metrics&lt;/a>
(e.g. effective sample size and potential scale reduction), but seems to lack a
comprehensive suite of diagnostics and visualizations: even
&lt;a href="https://github.com/tensorflow/probability/tree/master/tensorflow_probability/python/experimental/edward2">Edward2&lt;/a>
(an experimental interface to TFP for flexible modelling, inference and criticism)
suggests that you &lt;a href="https://github.com/tensorflow/probability/blob/master/tensorflow_probability/python/experimental/edward2/Upgrading_From_Edward_To_Edward2.md#model--inference-criticism">build your metrics manually or use boilerplate in
&lt;code>tf.metrics&lt;/code>&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="pymc3">PyMC3&lt;/h3>
&lt;ol>
&lt;li>PyMC3 users write Python code, using a context manager pattern (i.e. &lt;code>with pm.Model as model&lt;/code>)&lt;/li>
&lt;li>PyMC3 implements its own
&lt;a href="https://github.com/pymc-devs/pymc3/tree/master/pymc3/distributions">distributions&lt;/a>
and
&lt;a href="https://github.com/pymc-devs/pymc3/blob/master/pymc3/distributions/transforms.py">transforms&lt;/a>&lt;/li>
&lt;li>PyMC3 implements
&lt;a href="https://github.com/pymc-devs/pymc3/blob/master/pymc3/step_methods/hmc/nuts.py">NUTS&lt;/a>,
(as well as &lt;a href="https://github.com/pymc-devs/pymc3/tree/master/pymc3/step_methods">a range of other MCMC step
methods&lt;/a>) and
&lt;a href="https://github.com/pymc-devs/pymc3/tree/master/pymc3/variational">several variational inference
algorithms&lt;/a>,
although NUTS is the default and recommended inference algorithm&lt;/li>
&lt;li>PyMC3 (specifically, the &lt;code>find_MAP&lt;/code> function) &lt;a href="https://github.com/pymc-devs/pymc3/blob/master/pymc3/tuning/starting.py">relies on
&lt;code>scipy.optimize&lt;/code>&lt;/a>,
which in turn implements a BFGS-based optimizer&lt;/li>
&lt;li>PyMC3 &lt;a href="https://github.com/pymc-devs/pymc3/blob/master/pymc3/theanof.py">relies on
Theano&lt;/a> to compute
gradients&lt;/li>
&lt;li>PyMC3 &lt;a href="https://github.com/pymc-devs/pymc3/blob/master/pymc3/plots/__init__.py">delegates posterior visualization and
diagnostics&lt;/a>
to its cousin project &lt;a href="https://arviz-devs.github.io/arviz/">ArviZ&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>Some remarks:&lt;/p>
&lt;ul>
&lt;li>PyMC3&amp;rsquo;s context manager pattern is an interceptor for sampling statements: essentially
&lt;a href="https://arxiv.org/abs/1811.06150">an accidental implementation of effect handlers&lt;/a>.&lt;/li>
&lt;li>PyMC3&amp;rsquo;s distributions are simpler than those of TFP or PyTorch: they simply need to
have a &lt;code>random&lt;/code> and a &lt;code>logp&lt;/code> method, whereas TFP/PyTorch implement a whole bunch of
other methods to handle shapes, parameterizations, etc. In retrospect, we realize
that this is &lt;a href="https://docs.pymc.io/developer_guide.html#what-we-got-wrong">one of PyMC3&amp;rsquo;s design
flaws&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="pymc4">PyMC4&lt;/h3>
&lt;p>PyMC4 is still under active development (at least, at the time of writing), but it&amp;rsquo;s
safe to call out the overall architecture.&lt;/p>
&lt;ol>
&lt;li>PyMC4 users will write Python, although now with a generator pattern (e.g. &lt;code>x = yield Normal(0, 1, &amp;quot;x&amp;quot;)&lt;/code>), instead of a context manager&lt;/li>
&lt;li>PyMC4 will &lt;a href="https://github.com/pymc-devs/pymc4/tree/master/pymc4/distributions/">rely on TensorFlow distributions (a.k.a.
&lt;code>tfd&lt;/code>)&lt;/a> for both
distributions and transforms&lt;/li>
&lt;li>PyMC4 will also &lt;a href="https://github.com/pymc-devs/pymc4/tree/master/pymc4/inference/">rely on TensorFlow for
MCMC&lt;/a> (although the
specifics of the exact MCMC algorithm are still fairly fluid at the time of writing)&lt;/li>
&lt;li>As far as I can tell, the optimizer is still TBD&lt;/li>
&lt;li>Because PyMC4 relies on TFP, which relies on TensorFlow, TensorFlow manages all
gradient computations automatically&lt;/li>
&lt;li>Like its predecessor, PyMC4 will delegate diagnostics and visualization to ArviZ&lt;/li>
&lt;/ol>
&lt;p>Some remarks:&lt;/p>
&lt;ul>
&lt;li>With the generator pattern for model specification, PyMC4 embraces the notion of a
probabilistic program as one that defers its computation. For more color on this, see
&lt;a href="https://twitter.com/avibryant/status/1150827954319982592">this Twitter thread&lt;/a> I had
with &lt;a href="https://about.me/avibryant">Avi Bryant&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="pyro">Pyro&lt;/h3>
&lt;ol>
&lt;li>Pyro users write Python&lt;/li>
&lt;li>Pyro &lt;a href="https://github.com/pyro-ppl/pyro/blob/dev/pyro/distributions/__init__.py">relies on PyTorch
distributions&lt;/a>
(&lt;a href="https://github.com/pyro-ppl/pyro/tree/dev/pyro/distributions">implementing its own where
necessary&lt;/a>), and also
relies on PyTorch distributions &lt;a href="https://github.com/pyro-ppl/pyro/tree/dev/pyro/distributions/transforms">for its
transforms&lt;/a>&lt;/li>
&lt;li>Pyro implements &lt;a href="http://docs.pyro.ai/en/stable/inference.html">many inference
algorithms&lt;/a> in PyTorch (including &lt;a href="https://github.com/pyro-ppl/pyro/tree/dev/pyro/infer/mcmc">HMC
and NUTS&lt;/a>), but support
for &lt;a href="https://github.com/pyro-ppl/pyro/blob/dev/pyro/infer/svi.py">stochastic VI&lt;/a> is
the most extensive&lt;/li>
&lt;li>Pyro implements &lt;a href="https://github.com/pyro-ppl/pyro/blob/master/pyro/optim/optim.py">its own
optimizer&lt;/a> in
PyTorch&lt;/li>
&lt;li>Pyro relies on PyTorch to compute gradients (again, duh)&lt;/li>
&lt;li>As far as I can tell, Pyro doesn&amp;rsquo;t provide any diagnostic or visualization
functionality&lt;/li>
&lt;/ol>
&lt;p>Some remarks:&lt;/p>
&lt;ul>
&lt;li>Pyro includes the Poutine submodule, which is a library of composable &lt;a href="https://arxiv.org/abs/1811.06150">effect
handlers&lt;/a>. While this might sound like recondite
abstractions, they allow you to implement your own custom inference algorithms and
otherwise manipulate Pyro probabilistic programs. In fact, all of Pyro&amp;rsquo;s inference
algorithms use these effect handlers.&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>In case you&amp;rsquo;re testifying under oath and need more reliable sources than
a blog post, I&amp;rsquo;ve kept a &lt;a href="https://www.zotero.org/eigenfoo/items/collectionKey/AE8882GQ">Zotero
collection&lt;/a> for
this project.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Universal probabilistic programming is an interesting field of inquiry,
but has mainly remained in the realm of academic research. For a (much) more
comprehensive treatment, check out &lt;a href="http://www.robots.ox.ac.uk/~twgr/assets/pdf/rainforth2017thesis.pdf">Tom Rainforth&amp;rsquo;s PhD
thesis&lt;/a>.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>Since publishing this blog post, I have been informed that I am more
ignorant than I know: I have forgotten
&lt;a href="https://github.com/cscherrer/Soss.jl">Soss.jl&lt;/a> in Julia and
&lt;a href="https://github.com/thu-ml/zhusuan">ZhuSuan&lt;/a> in Python.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>It turns out that such transformations must be &lt;a href="https://en.wikipedia.org/wiki/Local_diffeomorphism">local
diffeomorphisms&lt;/a>, and the
derivative information requires computing the log determinant of the Jacobian
of the transformation, commonly abbreviated to &lt;code>log_det_jac&lt;/code> or something
similar.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>As an aside, I&amp;rsquo;ll say that it&amp;rsquo;s mind boggling how Stan does this. To
quote a (nameless) PyMC core developer:&lt;/p>
&lt;blockquote>
&lt;p>I think that maintaining your own autodifferentiation library is the
path of a crazy person.&lt;/p>
&lt;/blockquote>
&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/li>
&lt;/ol>
&lt;/div></content></entry><entry><title>Graduated Cooper Union, Joining Point72</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/joining-point72/"/><id>https://www.georgeho.org/joining-point72/</id><updated>2019-07-22T00:00:00Z</updated><published>2019-07-22T00:00:00Z</published><content type="html">&lt;p>Some exciting personal news: I&amp;rsquo;ve &lt;em>(finally)&lt;/em> graduated from &lt;a href="http://cooper.edu/welcome">The Cooper
Union&lt;/a>, and I&amp;rsquo;m joining &lt;a href="https://www.point72.com/">Point72 Asset
Management&lt;/a> as a data scientist/research analyst!&lt;/p>
&lt;p>Point72 is an American hedge fund, headquartered in Connecticut. I&amp;rsquo;ll be based
in New York, working out of their &lt;a href="https://www.hudsonyardsnewyork.com/work/55-hudson-yards">Hudson
Yards&lt;/a> offices.&lt;/p>
&lt;center>
&lt;img
src="https://www.georgeho.org/assets/images/point72-logo.png"
alt="Point72 logo">
&lt;/center>
&lt;p>In this next chapter of my life, my professional focuses are:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Keep learning.&lt;/strong> Bayesian methods and deep learning, mostly.&lt;/li>
&lt;li>&lt;strong>Open source.&lt;/strong> I&amp;rsquo;ve been involved with developing
&lt;a href="https://github.com/pymc-devs/pymc4">PyMC4&lt;/a>. These are exciting times for the
PyMC project: I hope to keep contributing!&lt;/li>
&lt;/ol>
&lt;p>My four years of college were incredibly rewarding, but I&amp;rsquo;m excited to enter the
real world. Stay tuned!&lt;/p></content></entry><entry><title>Python Port of _Common Statistical Tests are Linear Models_</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/stat-tests-are-linear-model/"/><id>https://www.georgeho.org/stat-tests-are-linear-model/</id><updated>2019-06-28T00:00:00Z</updated><published>2019-06-28T00:00:00Z</published><content type="html">&lt;p>I ported &lt;a href="https://lindeloev.net">Jonas Lindeløv&lt;/a>&amp;rsquo;s essay, &lt;a href="https://lindeloev.github.io/tests-as-linear/">&lt;em>Common Statistical
Tests are Linear Models&lt;/em>&lt;/a> from R
to Python. Check it out on &lt;a href="https://www.georgeho.org/tests-as-linear/">my
blog&lt;/a>,
&lt;a href="https://github.com/eigenfoo/tests-as-linear">GitHub&lt;/a>, or
&lt;a href="https://gke.mybinder.org/v2/gh/eigenfoo/tests-as-linear/master?filepath=tests-as-linear.ipynb">Binder&lt;/a>!&lt;/p></content></entry><entry><title>Decaying Evidence and Contextual Bandits — Bayesian Reinforcement Learning (Part 2)</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/bayesian-bandits-2/"/><id>https://www.georgeho.org/bayesian-bandits-2/</id><updated>2019-06-02T00:00:00Z</updated><published>2019-06-02T00:00:00Z</published><content type="html">&lt;blockquote>
&lt;p>This is the second of a two-part series about Bayesian bandit algorithms.
Check out the first post &lt;a href="https://www.georgeho.org/bayesian-bandits/">here&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://www.georgeho.org/bayesian-bandits/">Previously&lt;/a>, I introduced the
multi-armed bandit problem, and a Bayesian approach to solving/modelling it
(Thompson sampling). We saw that conjugate models made it possible to run the
bandit algorithm online: the same is even true for non-conjugate models, so long
as the rewards are bounded.&lt;/p>
&lt;p>In this follow-up blog post, we&amp;rsquo;ll take a look at two extensions to the
multi-armed bandit. The first allows the bandit to model nonstationary rewards
distributions, whereas the second allows the bandit to model context. Jump in!&lt;/p>
&lt;figure>
&lt;a href="https://www.georgeho.org/assets/images/multi-armed-bandit.jpg">&lt;img src="https://www.georgeho.org/assets/images/multi-armed-bandit.jpg" alt="Cartoon of a multi-armed bandit">&lt;/a>
&lt;figcaption>An example of a multi-armed bandit situation. Source: &lt;a href="https://www.inverse.com/article/13762-how-the-multi-armed-bandit-determines-what-ads-and-stories-you-see-online">Inverse&lt;/a>.&lt;/figcaption>
&lt;/figure>
&lt;h2 id="nonstationary-bandits">Nonstationary Bandits&lt;/h2>
&lt;p>Up until now, we&amp;rsquo;ve concerned ourselves with stationary bandits: in other words,
we assumed that the rewards distribution for each arm did not change over time.
In the real world though, rewards distributions need not be stationary: customer
preferences change, trading algorithms deteriorate, and news articles rise and
fall in relevance.&lt;/p>
&lt;p>Nonstationarity could mean one of two things for us:&lt;/p>
&lt;ol>
&lt;li>either we are lucky enough to know that rewards are similarly distributed
throughout all time (e.g. the rewards are always normally distributed, or
always binomially distributed), and that it is merely the parameters of these
distributions that are liable to change,&lt;/li>
&lt;li>or we aren&amp;rsquo;t so unlucky, and the rewards distributions are not only changing,
but don&amp;rsquo;t even have a nice parametric form.&lt;/li>
&lt;/ol>
&lt;p>Good news, though: there is a neat trick to deal with both forms of
nonstationarity!&lt;/p>
&lt;h3 id="decaying-evidence-and-posteriors">Decaying evidence and posteriors&lt;/h3>
&lt;p>But first, some notation. Suppose we have a model with parameters $\theta$. We
place a prior $\color{purple}{\pi_0(\theta)}$ on it&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, and at the $t$&amp;lsquo;th
time step, we observe data $D_t$, compute the likelihood $\color{blue}{P(D_t
| \theta)}$ and update the posterior from $\color{red}{\pi_t(\theta |
D_{1:t})}$ to $\color{green}{\pi_{t+1}(\theta | D_{1:t+1})}$.&lt;/p>
&lt;p>This is a quintessential application of Bayes&amp;rsquo; Theorem. Mathematically:&lt;/p>
&lt;p>$$ \color{green}{\pi_{t+1}(\theta | D_{1:t+1})} \propto \color{blue}{P(D_{t+1} |
\theta)} \cdot \color{red}{\pi_t (\theta | D_{1:t})} \tag{1} \label{1} $$&lt;/p>
&lt;p>However, for problems with nonstationary rewards distributions, we would like
data points observed a long time ago to have less weight than data points
observed recently. This is only prudent: in the absence of recent data, we would
like to adopt a more conservative &amp;ldquo;no-data&amp;rdquo; prior, rather than allow our
posterior to be informed by outdated data. This can be achieved by modifying the
Bayesian update to:&lt;/p>
&lt;p>$$ \color{green}{\pi_{t+1}(\theta | D_{1:t+1})} \propto \color{magenta}{[}
\color{blue}{P(D_{t+1} | \theta)} \cdot \color{red}{\pi_t (\theta | D_{1:t})}
{\color{magenta}{]^{1-\epsilon}}} \cdot
\color{purple}{\pi_0(\theta)}^\color{magenta}{\epsilon} \tag{2} \label{2} $$&lt;/p>
&lt;p>for some $0 &amp;lt; \color{magenta}{\epsilon} \ll 1$. We can think of
$\color{magenta}{\epsilon}$ as controlling the rate of decay of the
evidence/posterior (i.e. how quickly we should distrust past data points).
Notice that if we stop observing data points at time $T$, then
$\color{red}{\pi_t(\theta | D_{1:T})} \rightarrow
\color{purple}{\pi_0(\theta)}$ as $t \rightarrow \infty$.&lt;/p>
&lt;p>Decaying the evidence (and therefore the posterior) can be used to address both
types of nonstationarity identified above. Simply use $(\ref{2})$ as a drop-in
replacement for $(\ref{1})$ when updating the hyperparameters. Whether you&amp;rsquo;re
using a conjugate model or the algorithm by &lt;a href="https://arxiv.org/abs/1111.1797">Agarwal and
Goyal&lt;/a> (introduced in &lt;a href="https://www.georgeho.org/bayesian-bandits">the previous blog
post&lt;/a>), using $(\ref{2})$ will decay
the evidence and posterior, as desired.&lt;/p>
&lt;p>For more information (and a worked example for the Beta-Binomial model!), check
out &lt;a href="https://austinrochford.com/resources/talks/boston-bayesians-2017-bayes-bandits.slides.html#/3">Austin Rochford&amp;rsquo;s talk for Boston
Bayesians&lt;/a>
about Bayesian bandit algorithms for e-commerce.&lt;/p>
&lt;h2 id="contextual-bandits">Contextual Bandits&lt;/h2>
&lt;p>We can think of the multi-armed bandit problem as follows&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>:&lt;/p>
&lt;ol>
&lt;li>A policy chooses an arm $a$ from $k$ arms.&lt;/li>
&lt;li>The world reveals the reward $R_a$ of the chosen arm.&lt;/li>
&lt;/ol>
&lt;p>However, this formulation fails to capture an important phenomenon: there is
almost always extra information that is available when making each decision.
For instance, online ads occur in the context of the web page in which they
appear, and online store recommendations are given in the context of the user&amp;rsquo;s
current cart contents (among other things).&lt;/p>
&lt;p>To take advantage of this information, we might think of a different formulation
where, on each round:&lt;/p>
&lt;ol>
&lt;li>The world announces some context information $x$.&lt;/li>
&lt;li>A policy chooses an arm $a$ from $k$ arms.&lt;/li>
&lt;li>The world reveals the reward $R_a$ of the chosen arm.&lt;/li>
&lt;/ol>
&lt;p>In other words, contextual bandits call for some way of taking context as input
and producing arms/actions as output.&lt;/p>
&lt;p>Alternatively, if you think of regular multi-armed bandits as taking no input
whatsoever (but still producing outputs, the arms to pull), you can think of
contextual bandits as algorithms that both take inputs and produce outputs.&lt;/p>
&lt;h3 id="bayesian-contextual-bandits">Bayesian contextual bandits&lt;/h3>
&lt;p>Contextual bandits give us a very general framework for thinking about
sequential decision making (and reinforcement learning). Clearly, there are many
ways to make a bandit algorithm take context into account. Linear regression is
a straightforward and classic example: simply assume that the rewards depend
linearly on the context.&lt;/p>
&lt;p>For a refresher on the details of Bayesian linear regression, refer to &lt;a href="https://www.microsoft.com/en-us/research/people/cmbishop/#!prml-book">&lt;em>Pattern
Recognition and Machine
Learning&lt;/em>&lt;/a>
by Christopher Bishop: specifically, section 3.3 on Bayesian linear regression
and exercises 3.12 and 3.13&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>. Briefly though, if we place a Gaussian prior on
the regression weights and an inverse gamma prior on the noise parameter (i.e.,
the noise of the observations), then their joint prior will be conjugate to a
Gaussian likelihood, and the posterior predictive distribution for the rewards
will be a Student&amp;rsquo;s $t$.&lt;/p>
&lt;p>Since we need to maintain posteriors of the rewards for each arm (so that we can
do Thompson sampling), we need to run a separate Bayesian linear regression for
each arm. At every iteration we then Thompson sample from each Student&amp;rsquo;s $t$
posterior, and select the arm with the highest sample.&lt;/p>
&lt;p>However, Bayesian linear regression is a textbook example of a model that lacks
expressiveness: in most circumstances, we want something that can model
nonlinear functions as well. One (perfectly valid) way of doing this would be to
hand-engineer some nonlinear features and/or basis functions before feeding them
into a Bayesian linear regression. However, in the 21st century, the trendier
thing to do is to have a neural network learn those features for you. This is
exactly what is proposed in a &lt;a href="https://arxiv.org/abs/1802.09127">ICLR 2018 paper from Google
Brain&lt;/a>. They find that this model — which they
call &lt;code>NeuralLinear&lt;/code> — performs decently well across a variety of tasks, even
compared to other bandit algorithms. In the words of the authors:&lt;/p>
&lt;blockquote>
&lt;p>We believe [&lt;code>NeuralLinear&lt;/code>&amp;rsquo;s] main strength is that it is able to
&lt;em>simultaneously&lt;/em> learn a data representation that greatly simplifies the task
at hand, and to accurately quantify the uncertainty over linear models that
explain the observed rewards in terms of the proposed representation.&lt;/p>
&lt;/blockquote>
&lt;p>For more information, be sure to check out the &lt;a href="https://arxiv.org/abs/1802.09127">Google Brain
paper&lt;/a> and the accompanying &lt;a href="https://github.com/tensorflow/models/tree/master/research/deep_contextual_bandits">TensorFlow
code&lt;/a>.&lt;/p>
&lt;h2 id="further-reading">Further Reading&lt;/h2>
&lt;p>For non-Bayesian approaches to contextual bandits, &lt;a href="https://github.com/VowpalWabbit/vowpal_wabbit/wiki/Contextual-Bandit-algorithms">Vowpal
Wabbit&lt;/a>
is a great resource: &lt;a href="http://hunch.net/~jl/">John Langford&lt;/a> and the team at
&lt;a href="https://www.microsoft.com/research/">Microsoft Research&lt;/a> has &lt;a href="https://arxiv.org/abs/1402.0555v2">extensively
researched&lt;/a> contextual bandit algorithms.
They&amp;rsquo;ve provided blazingly fast implementations of recent algorithms and written
good documentation for them.&lt;/p>
&lt;p>For the theory and math behind bandit algorithms, &lt;a href="https://banditalgs.com/">Tor Lattimore and Csaba
Szepesvári&amp;rsquo;s book&lt;/a> covers a breathtaking amount of
ground.&lt;/p>
&lt;blockquote>
&lt;p>This is the second of a two-part series about Bayesian bandit algorithms.
Check out the first post &lt;a href="https://www.georgeho.org/bayesian-bandits/">here&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Did you know you can make &lt;a href="http://adereth.github.io/blog/2013/11/29/colorful-equations/">colored equations with
MathJax&lt;/a>?
Technology frightens me sometimes.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>This explanation is largely drawn from &lt;a href="http://hunch.net/?p=298">from John Langford&amp;rsquo;s
&lt;code>hunch.net&lt;/code>&lt;/a>.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>If you don&amp;rsquo;t want to do Bishop&amp;rsquo;s exercises, there&amp;rsquo;s a partially complete
solutions manual &lt;a href="https://github.com/GoldenCheese/PRML-Solution-Manual/">on
GitHub&lt;/a> 😉&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></entry><entry><title>Autoregressive Models in Deep Learning — A Brief Survey</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/deep-autoregressive-models/"/><id>https://www.georgeho.org/deep-autoregressive-models/</id><updated>2019-03-09T00:00:00Z</updated><published>2019-03-09T00:00:00Z</published><content type="html">&lt;p>My current project involves working with deep autoregressive models: a class of
remarkable neural networks that aren&amp;rsquo;t usually seen on a first pass through deep
learning. These notes are a quick write-up of my reading and research: I assume
basic familiarity with deep learning, and aim to highlight general trends and
similarities across autoregressive models, instead of commenting on individual
architectures.&lt;/p>
&lt;p>&lt;strong>tldr:&lt;/strong> &lt;em>Deep autoregressive models are sequence models, yet feed-forward
(i.e. not recurrent); generative models, yet supervised. They are a compelling
alternative to RNNs for sequential data, and GANs for generation tasks.&lt;/em>&lt;/p>
&lt;h2 id="deep-autoregressive-models">Deep Autoregressive Models&lt;/h2>
&lt;p>To be explicit (at the expense of redundancy), this blog post is about &lt;em>deep
autoregressive generative sequence models&lt;/em>. That&amp;rsquo;s quite a mouthful of jargon
(and two of those words are actually unnecessary), so let&amp;rsquo;s unpack that.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Deep&lt;/p>
&lt;ul>
&lt;li>Well, these papers are using TensorFlow or PyTorch&amp;hellip; so they must be
&amp;ldquo;deep&amp;rdquo; 😉&lt;/li>
&lt;li>You would think this word is unnecessary, but it&amp;rsquo;s actually not!
Autoregressive linear models like
&lt;a href="https://en.wikipedia.org/wiki/Autoregressive%E2%80%93moving-average_model">ARMA&lt;/a>
or
&lt;a href="https://en.wikipedia.org/wiki/Autoregressive_conditional_heteroskedasticity">ARCH&lt;/a>
have been used in statistics, econometrics and financial modelling for
ages.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Autoregressive&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://deepgenerativemodels.github.io/notes/autoregressive/">Stanford has a good
introduction&lt;/a>
to autoregressive models, but I think a good way to explain these models is
to compare them to recurrent neural networks (RNNs), which are far more
well-known.&lt;/p>
&lt;figure>
&lt;a href="https://www.georgeho.org/assets/images/rnn-unrolled.png">&lt;img src="https://www.georgeho.org/assets/images/rnn-unrolled.png" alt="Recurrent neural network (RNN) block diagram, both rolled and unrolled">&lt;/a>
&lt;figcaption>Obligatory RNN diagram. Source: &lt;a href="https://colah.github.io/posts/2015-08-Understanding-LSTMs/">Chris Olah&lt;/a>.&lt;/figcaption>
&lt;/figure>
&lt;ul>
&lt;li>
&lt;p>Like an RNN, an autoregressive model&amp;rsquo;s output $h_t$ at time $t$
depends on not just $x_t$, but also $x$&amp;rsquo;s from previous time steps.
However, &lt;em>unlike&lt;/em> an RNN, the previous $x$&amp;rsquo;s are not provided via some
hidden state: they are given as just another input to the model.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The following animation of Google DeepMind&amp;rsquo;s WaveNet illustrates this
well: the $t$th output is generated in a &lt;em>feed-forward&lt;/em> fashion from
several input $x$ values.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;figure>
&lt;a href="https://www.georgeho.org/assets/images/wavenet-animation.gif">&lt;img src="https://www.georgeho.org/assets/images/wavenet-animation.gif" alt="WaveNet animation">&lt;/a>
&lt;figcaption>WaveNet animation. Source: &lt;a href="https://deepmind.com/blog/wavenet-generative-model-raw-audio/">Google DeepMind&lt;/a>.&lt;/figcaption>
&lt;/figure>
&lt;/li>
&lt;li>
&lt;p>Put simply, &lt;strong>an autoregressive model is merely a feed-forward model which
predicts future values from past values.&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I&amp;rsquo;ll explain this more later, but it&amp;rsquo;s worth saying now: autoregressive
models offer a compelling bargain. You can have stable, parallel and
easy-to-optimize training, faster inference computations, and completely
do away with the fickleness of &lt;a href="https://en.wikipedia.org/wiki/Backpropagation_through_time">truncated backpropagation through
time&lt;/a>, if you
are willing to accept a model that (by design) &lt;em>cannot have&lt;/em> infinite
memory. There is &lt;a href="http://www.offconvex.org/2018/07/27/approximating-recurrent/">recent
research&lt;/a> to
suggest that this is a worthwhile tradeoff.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Generative&lt;/p>
&lt;ul>
&lt;li>Informally, a generative model is one that can generate new data after
learning from the dataset.&lt;/li>
&lt;li>More formally, a generative model models the joint distribution $P(X, Y)$
of the observation $X$ and the target $Y$. Contrast this to a
discriminative model that models the conditional distribution $P(Y|X)$.&lt;/li>
&lt;li>GANs and VAEs are two families of popular generative models.&lt;/li>
&lt;li>This is unnecessary word #1: any autoregressive model can be run
sequentially to generate a new sequence! Start with your seed $x_1, x_2,
&amp;hellip;, x_k$ and predict $x_{k+1}$. Then use $x_2, x_3, &amp;hellip;, x_{k+1}$ to
predict $x_{k+2}$, and so on.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Sequence model&lt;/p>
&lt;ul>
&lt;li>Fairly self explanatory: a model that deals with sequential data, whether
it is mapping sequences to scalars (e.g. language models), or mapping
sequences to sequences (e.g. machine translation models).&lt;/li>
&lt;li>Although sequence models are designed for sequential data (duh), there has
been success at applying them to non-sequential data. For example,
PixelCNN (discussed below) can generate entire images, even though images
are not sequential in nature: the model generates a pixel at a time, in
sequence!&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/li>
&lt;li>Notice that an autoregressive model must be a sequence model, so it&amp;rsquo;s
redundant to further describe these models as sequential (which makes this
unnecessary word #2).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>A good distinction is that &amp;ldquo;generative&amp;rdquo; and &amp;ldquo;sequential&amp;rdquo; describe &lt;em>what&lt;/em> these
models do, or what kind of data they deal with. &amp;ldquo;Autoregressive&amp;rdquo; describes &lt;em>how&lt;/em>
these models do what they do: i.e. they describe properties of the network or
its architecture.&lt;/p>
&lt;h2 id="some-architectures-and-applications">Some Architectures and Applications&lt;/h2>
&lt;p>Deep autoregressive models have seen a good degree of success: below is a list
of some of examples. Each architecture merits exposition and discussion, but
unfortunately there isn&amp;rsquo;t enough space here to devote to do any of them justice.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://arxiv.org/abs/1601.06759">PixelCNN by Google DeepMind&lt;/a> was probably
the first deep autoregressive model, and the progenitor of most of the other
models below. Ironically, the authors spend the bulk of the paper discussing a
recurrent model, PixelRNN, and consider PixelCNN as a &amp;ldquo;workaround&amp;rdquo; to avoid
excessive computation. However, PixelCNN is probably this paper&amp;rsquo;s most lasting
contribution.&lt;/li>
&lt;li>&lt;a href="https://arxiv.org/abs/1701.05517">PixelCNN++ by OpenAI&lt;/a> is, unsurprisingly,
PixelCNN but with various improvements.&lt;/li>
&lt;li>&lt;a href="https://deepmind.com/blog/wavenet-generative-model-raw-audio/">WaveNet by Google
DeepMind&lt;/a> is
heavily inspired by PixelCNN, and models raw audio, not just encoded music.
They had to pull &lt;a href="https://en.wikipedia.org/wiki/%CE%9C-law_algorithm">a neat trick from telecommunications/signals
processing&lt;/a> in order to
cope with the sheer size of audio (high-quality audio involves at least 16-bit
precision samples, which means a 65,536-way-softmax per time step!)&lt;/li>
&lt;li>&lt;a href="https://arxiv.org/abs/1706.03762">Transformer, a.k.a. &lt;em>the &amp;ldquo;attention is all you need&amp;rdquo; model&lt;/em> by Google
Brain&lt;/a> is now a mainstay of NLP, performing
very well at many NLP tasks and being incorporated into subsequent models like
&lt;a href="https://ai.googleblog.com/2018/11/open-sourcing-bert-state-of-art-pre.html">BERT&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>These models have also found applications: for example, &lt;a href="https://arxiv.org/abs/1610.10099">Google DeepMind&amp;rsquo;s
ByteNet can perform neural machine translation (in linear
time!)&lt;/a> and &lt;a href="https://arxiv.org/abs/1610.00527">Google DeepMind&amp;rsquo;s Video Pixel
Network can model video&lt;/a>.&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/p>
&lt;h2 id="some-thoughts-and-observations">Some Thoughts and Observations&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Given previous values $x_1, x_2, &amp;hellip;, x_t$, these models do not output a
&lt;em>value&lt;/em> for $x_{t+1}$, they output the &lt;em>predictive probability
distribution&lt;/em> $P(x_{t+1} | x_1, x_2, &amp;hellip;, x_t)$ for $x_{t+1}$.&lt;/p>
&lt;ul>
&lt;li>If the $x$&amp;rsquo;s are discrete, then you can do this by outputting an $N$-way
softmaxxed tensor, where $N$ is the number of discrete classes. This is
what the original PixelCNN did, but gets problematic when $N$ is large
(e.g. in the case of WaveNet, where $N = 2^{16}$).&lt;/li>
&lt;li>If the $x$&amp;rsquo;s are continuous, you can model the probability distribution
itself as the sum of basis functions, and having the model output the
parameters of these basis functions. This massively reduces the memory
footprint of the model, and was an important contribution of PixelCNN++.&lt;/li>
&lt;li>Theoretically you could have an autoregressive model that &lt;em>doesn&amp;rsquo;t&lt;/em> model
the conditional distribution&amp;hellip; but most recent models do.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Autoregressive models are supervised.&lt;/p>
&lt;ul>
&lt;li>With the success and hype of GANs and VAEs, it is easy to assume that all
generative models are unsupervised: this is not true!&lt;/li>
&lt;li>This means that that training is stable and highly parallelizable, that it
is straightfoward to tune hyperparameters, and that inference is
computationally inexpensive. We can also break out all the good stuff from
ML-101: train-valid-test splits, cross validation, loss metrics, etc. These
are all things that we lose when we resort to e.g. GANs.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Autoregressive models work on both continuous and discrete data.&lt;/p>
&lt;ul>
&lt;li>Autoregressive sequential models have worked for audio (WaveNet), images
(PixelCNN++) and text (Transformer): these models are very flexible in the
kind of data that they can model.&lt;/li>
&lt;li>Contrast this to GANs, which (as far as I&amp;rsquo;m aware) cannot model discrete
data.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Autoregressive models are very amenable to conditioning.&lt;/p>
&lt;ul>
&lt;li>There are many options for conditioning! You can condition on both discrete
and continuous variables; you can condition at multiple time scales; you can
even condition on latent embeddings or the outputs of other neural networks.&lt;/li>
&lt;li>There is one ostensible problem with using autoregressive models as
generative models: you can only condition on your data&amp;rsquo;s labels. I.e.
unlike a GAN, you cannot condition on random noise and expect the model to
shape the noise space into a semantically (stylistically) meaningful latent
space.&lt;/li>
&lt;li>Google DeepMind followed up their original PixelRNN paper with &lt;a href="https://arxiv.org/abs/1606.05328">another
paper&lt;/a> that describes one way to overcome
this problem. Briefly: to condition, they incorporate the latent vector into
the PixelCNN&amp;rsquo;s activation functions; to produce/learn the latent vectors,
they use a convolutional encoder; and to generate an image given a latent
vector, they replace the traditional deconvolutional decoder with a
conditional PixelCNN.&lt;/li>
&lt;li>WaveNet goes even futher and employs &amp;ldquo;global&amp;rdquo; and &amp;ldquo;local&amp;rdquo; conditioning (both
are achieved by incorporating the latent vectors into WaveNet&amp;rsquo;s activation
functions). The authors devise a battery of conditioning schemes to capture
speaker identity, linguistic features of input text, music genre, musical
instrument, etc.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Generating output sequences of variable length is not straightforward.&lt;/p>
&lt;ul>
&lt;li>Neither WaveNet nor PixelCNN needed to worry about a variable output length:
both audio and images are comprised of a fixed number of outputs (i.e. audio
is just $N$ samples, and images are just $N^2$ pixels).&lt;/li>
&lt;li>Text, on the other hand, is different: sentences can be of variable length.
One would think that this is a nail in a coffin, but thankfully text is
discrete: the standard trick is to have a &amp;ldquo;stop token&amp;rdquo; that indicates that
the sentence is finished (i.e. model a full stop as its own token).&lt;/li>
&lt;li>As far as I am aware, there is no prior literature on having both problems:
a variable-length output of continuous values.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Autoregressive models can model multiple time scales&lt;/p>
&lt;ul>
&lt;li>
&lt;p>In the case of music, there are important patterns to model at multiple
time scales: individual musical notes drive correlations between audio
samples at the millisecond scale, and music exhibits rhythmic patterns
over the course of minutes. This is well illustrated by the following
animation:&lt;/p>
&lt;figure>
&lt;a href="https://www.georgeho.org/assets/images/audio-animation.gif">&lt;img src="https://www.georgeho.org/assets/images/audio-animation.gif" alt="Audio at multiple time scales">&lt;/a>
&lt;figcaption>Audio exhibits patterns at multiple time scales. Source: &lt;a href="https://deepmind.com/blog/wavenet-generative-model-raw-audio/">Google DeepMind&lt;/a>.&lt;/figcaption>
&lt;/figure>
&lt;/li>
&lt;li>
&lt;p>There are two main ways model many patterns at many different time scales:
either make the receptive field of your model &lt;em>extremely&lt;/em> wide (e.g.
through dilated convolutions), or condition your model on a subsampled
version of your generated output, which is in turn produced by an
unconditioned model.&lt;/p>
&lt;ul>
&lt;li>Google DeepMind composes an unconditional PixelRNN with one or more
conditional PixelRNNs to form a so-called &amp;ldquo;multi-scale&amp;rdquo; PixelRNN: the
first PixelRNN generates a lower-resolution image that conditions the
subsequent PixelRNNs.&lt;/li>
&lt;li>WaveNet employs a different technique and calls them &amp;ldquo;context stacks&amp;rdquo;.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>How the hell can any of this stuff work?&lt;/p>
&lt;ul>
&lt;li>
&lt;p>RNNs are theoretically more expressive and powerful than autoregressive
models. However, recent work suggests that such infinite-horizon memory is
seldom achieved in practice.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To quote &lt;a href="http://www.offconvex.org/2018/07/27/approximating-recurrent/">John Miller at the Berkeley AI Research
lab&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Recurrent models trained in practice are effectively feed-forward.&lt;/strong>
This could happen either because truncated backpropagation through time
cannot learn patterns significantly longer than $k$ steps, or, more
provocatively, because models &lt;em>trainable by gradient descent&lt;/em> cannot have
long-term memory.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>There&amp;rsquo;s actually a lot more nuance than meets the eye in this animation,
but all I&amp;rsquo;m trying to illustrate is the feed-forward nature of autoregressive
models.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>I personally think it&amp;rsquo;s breathtakingly that machines can do this. Imagine
your phone keyboard&amp;rsquo;s word suggestions (those are autoregressive!) spitting
out an entire novel. Or imagine weaving a sweater but you had to choose the
color of every stitch, in order, in advance.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>In case you haven&amp;rsquo;t noticed, Google DeepMind seemed to have had an
infatuation with autoregressive models back in 2016.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></entry><entry><title>Modern Computational Methods for Bayesian Inference — A Reading List</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/bayesian-inference-reading/"/><id>https://www.georgeho.org/bayesian-inference-reading/</id><updated>2019-01-02T00:00:00Z</updated><published>2019-01-02T00:00:00Z</published><content type="html">&lt;p>Lately I&amp;rsquo;ve been troubled by how little I actually knew about how Bayesian
inference &lt;em>really worked&lt;/em>. I could explain to you &lt;a href="https://maria-antoniak.github.io/2018/11/19/data-science-crash-course.html">many other machine learning
techniques&lt;/a>,
but with Bayesian modelling&amp;hellip; well, there&amp;rsquo;s a model (which is basically the
likelihood, I think?), and then there&amp;rsquo;s a prior, and then, um&amp;hellip;&lt;/p>
&lt;p>What actually happens when you run a sampler? What makes inference
&amp;ldquo;variational&amp;rdquo;? And what is this automatic differentiation doing in my
variational inference? &lt;em>Cue long sleepless nights, contemplating my own
ignorance.&lt;/em>&lt;/p>
&lt;p>So to celebrate the new year&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, I compiled a list of things to read — blog
posts, journal papers, books, anything that would help me understand (or at
least, appreciate) the math and computation that happens when I press the &lt;em>Magic
Inference Button™&lt;/em>. Again, this reading list isn&amp;rsquo;t focused on how to use
Bayesian modelling for a &lt;em>specific&lt;/em> use case&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>; it’s focused on how modern
computational methods for Bayesian inference work &lt;em>in general&lt;/em>.&lt;/p>
&lt;p>So without further ado&amp;hellip;&lt;/p>
&lt;div>
&lt;h2>Contents&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#markov-chain-monte-carlo">Markov-Chain Monte Carlo&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#for-the-uninitiated">For the uninitiated&lt;/a>&lt;/li>
&lt;li>&lt;a href="#hamiltonian-monte-carlo-and-the-no-u-turn-sampler">Hamiltonian Monte Carlo and the No-U-Turn Sampler&lt;/a>&lt;/li>
&lt;li>&lt;a href="#sequential-monte-carlo-and-other-sampling-methods">Sequential Monte Carlo and other sampling methods&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#variational-inference">Variational Inference&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#for-the-uninitiated-1">For the uninitiated&lt;/a>&lt;/li>
&lt;li>&lt;a href="#automatic-differentiation-variational-inference-advi">Automatic differentiation variational inference (ADVI)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#open-source-software-for-bayesian-inference">Open-Source Software for Bayesian Inference&lt;/a>&lt;/li>
&lt;li>&lt;a href="#further-topics">Further Topics&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#approximate-bayesian-computation-abc-and-likelihood-free-methods">Approximate Bayesian computation (ABC) and likelihood-free methods&lt;/a>&lt;/li>
&lt;li>&lt;a href="#expectation-propagation">Expectation propagation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#operator-variational-inference-opvi">Operator variational inference (OPVI)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;h2 id="markov-chain-monte-carlo">Markov-Chain Monte Carlo&lt;/h2>
&lt;h3 id="for-the-uninitiated">For the uninitiated&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://twiecki.github.io/blog/2015/11/10/mcmc-sampling/">MCMC Sampling for
Dummies&lt;/a> by Thomas
Wiecki. A basic introduction to MCMC with accompanying Python snippets. The
Metropolis sampler is used an introduction to sampling.&lt;/li>
&lt;li>&lt;a href="http://www.mcmchandbook.net/HandbookChapter1.pdf">Introduction to Markov Chain Monte
Carlo&lt;/a> by Charles Geyer.
The first chapter of the aptly-named &lt;a href="http://www.mcmchandbook.net/">&lt;em>Handbook of Markov Chain Monte
Carlo&lt;/em>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://arxiv.org/abs/2001.06249">Markov Chain Monte Carlo Methods, a survey with some frequent
misunderstandings&lt;/a> is an instructive
collection of Cross-Validated questions that clear up common
misunderstandings of MCMC.&lt;/li>
&lt;/ol>
&lt;h3 id="hamiltonian-monte-carlo-and-the-no-u-turn-sampler">Hamiltonian Monte Carlo and the No-U-Turn Sampler&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://arogozhnikov.github.io/2016/12/19/markov_chain_monte_carlo.html">Hamiltonian Monte Carlo
explained&lt;/a>.
A visual and intuitive explanation of HMC: great for starters.&lt;/li>
&lt;li>&lt;a href="https://arxiv.org/abs/1701.02434">A Conceptual Introduction to Hamiltonian Monte
Carlo&lt;/a> by Michael Betancourt. An excellent
paper for a solid conceptual understanding and principled intuition for HMC.&lt;/li>
&lt;li>&lt;a href="https://colindcarroll.com/2019/04/06/exercises-in-automatic-differentiation-using-autograd-and-jax/">Exercises in Automatic Differentiation using &lt;code>autograd&lt;/code> and
&lt;code>jax&lt;/code>&lt;/a>
by Colin Carroll. This is the first in a series of blog posts that explain
HMC from the very beginning. See also &lt;a href="https://colindcarroll.com/2019/04/11/hamiltonian-monte-carlo-from-scratch/">Hamiltonian Monte Carlo from
Scratch&lt;/a>,
&lt;a href="https://colindcarroll.com/2019/04/21/step-size-adaptation-in-hamiltonian-monte-carlo/">Step Size Adaptation in Hamiltonian Monte
Carlo&lt;/a>,
and &lt;a href="https://colindcarroll.com/2019/04/28/choice-of-symplectic-integrator-in-hamiltonian-monte-carlo/">Choice of Symplectic Integrator in Hamiltonian Monte
Carlo&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://arxiv.org/abs/1111.4246">The No-U-Turn Sampler: Adaptively Setting Path Lengths in Hamiltonian Monte
Carlo&lt;/a> by Matthew Hoffman and Andrew Gelman.
The original NUTS paper.&lt;/li>
&lt;li>&lt;a href="http://www.mcmchandbook.net/HandbookChapter5.pdf">MCMC Using Hamiltonian
Dynamics&lt;/a> by Radford Neal.&lt;/li>
&lt;li>&lt;a href="https://colindcarroll.com/talk/hamiltonian-monte-carlo/">Hamiltonian Monte Carlo in
PyMC3&lt;/a> by Colin
Carroll.&lt;/li>
&lt;/ol>
&lt;h3 id="sequential-monte-carlo-and-other-sampling-methods">Sequential Monte Carlo and other sampling methods&lt;/h3>
&lt;ol>
&lt;li>Chapter 11 (Sampling Methods) of &lt;a href="https://www.microsoft.com/en-us/research/people/cmbishop/#!prml-book">Pattern Recognition and Machine
Learning&lt;/a>
by Christopher Bishop. Covers rejection, importance, Metropolis-Hastings,
Gibbs and slice sampling. Perhaps not as rampantly useful as NUTS, but good
to know nevertheless.&lt;/li>
&lt;li>&lt;a href="https://chi-feng.github.io/mcmc-demo/">The Markov-chain Monte Carlo Interactive
Gallery&lt;/a> by Chi Feng. A fantastic
library of visualizations of various MCMC samplers.&lt;/li>
&lt;li>For non-Markov chain based Monte Carlo methods, there is &lt;a href="https://www.stats.ox.ac.uk/~doucet/doucet_defreitas_gordon_smcbookintro.pdf">An Introdution to
Sequential Monte Carlo
Methods&lt;/a>
by Arnaud Doucet, Nando de Freitas and Neil Gordon. This chapter from &lt;a href="https://www.springer.com/us/book/9780387951461">the
authors&amp;rsquo; textbook on SMC&lt;/a>
provides motivation for using SMC methods, and gives a brief introduction to
a basic particle filter.&lt;/li>
&lt;li>&lt;a href="http://www.stats.ox.ac.uk/~doucet/smc_resources.html">Sequential Monte Carlo Methods &amp;amp; Particle Filters
Resources&lt;/a> by Arnaud
Doucet. A list of resources on SMC and particle filters: way more than you
probably ever need to know about them.&lt;/li>
&lt;/ol>
&lt;h2 id="variational-inference">Variational Inference&lt;/h2>
&lt;h3 id="for-the-uninitiated-1">For the uninitiated&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="http://willwolf.io/2018/11/11/em-for-lda/">Deriving
Expectation-Maximization&lt;/a> by Will
Wolf. The first blog post in a series that builds from EM all the way to VI.
Also check out &lt;a href="http://willwolf.io/2018/11/23/mean-field-variational-bayes/">Deriving Mean-Field Variational
Bayes&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://arxiv.org/abs/1601.00670">Variational Inference: A Review for
Statisticians&lt;/a> by David Blei, Alp
Kucukelbir and Jon McAuliffe. An high-level overview of variational
inference: the authors go over one example (performing VI on GMMs) in depth.&lt;/li>
&lt;li>Chapter 10 (Approximate Inference) of &lt;a href="https://www.microsoft.com/en-us/research/people/cmbishop/#!prml-book">Pattern Recognition and Machine
Learning&lt;/a>
by Christopher Bishop.&lt;/li>
&lt;/ol>
&lt;h3 id="automatic-differentiation-variational-inference-advi">Automatic differentiation variational inference (ADVI)&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://arxiv.org/abs/1603.00788">Automatic Differentiation Variational
Inference&lt;/a> by Alp Kucukelbir, Dustin Tran
et al. The original ADVI paper.&lt;/li>
&lt;li>&lt;a href="https://papers.nips.cc/paper/5758-automatic-variational-inference-in-stan">Automatic Variational Inference in
Stan&lt;/a>
by Alp Kucukelbir, Rajesh Ranganath, Andrew Gelman and David Blei.&lt;/li>
&lt;/ol>
&lt;h2 id="open-source-software-for-bayesian-inference">Open-Source Software for Bayesian Inference&lt;/h2>
&lt;p>There are many open-source software libraries for Bayesian modelling and
inference, and it is instructive to look into the inference methods that they do
(or do not!) implement.&lt;/p>
&lt;ol>
&lt;li>&lt;a href="http://mc-stan.org/">Stan&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://docs.pymc.io/">PyMC3&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://pyro.ai/">Pyro&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.tensorflow.org/probability/">Tensorflow Probability&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://edwardlib.org/">Edward&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://greta-stats.org/">Greta&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dotnet.github.io/infer/">Infer.NET&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.mrc-bsu.cam.ac.uk/software/bugs/">BUGS&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://mcmc-jags.sourceforge.net/">JAGS&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="further-topics">Further Topics&lt;/h2>
&lt;p>Bayesian inference doesn&amp;rsquo;t stop at MCMC and VI: there is bleeding-edge research
being done on other methods of inference. While they aren&amp;rsquo;t ready for real-world
use, it is interesting to see what they are.&lt;/p>
&lt;h3 id="approximate-bayesian-computation-abc-and-likelihood-free-methods">Approximate Bayesian computation (ABC) and likelihood-free methods&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://arxiv.org/abs/1001.2058">Likelihood-free Monte Carlo&lt;/a> by Scott
Sisson and Yanan Fan.&lt;/li>
&lt;/ol>
&lt;h3 id="expectation-propagation">Expectation propagation&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://arxiv.org/abs/1412.4869">Expectation propagation as a way of life: A framework for Bayesian inference
on partitioned data&lt;/a> by Aki Vehtari, Andrew
Gelman, et al.&lt;/li>
&lt;/ol>
&lt;h3 id="operator-variational-inference-opvi">Operator variational inference (OPVI)&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://arxiv.org/abs/1610.09033">Operator Variational Inference&lt;/a> by Rajesh
Ranganath, Jaan Altosaar, Dustin Tran and David Blei. The original OPVI
paper.&lt;/li>
&lt;/ol>
&lt;p>(I&amp;rsquo;ve tried to include as many relevant and helpful resources as I could find,
but if you feel like I&amp;rsquo;ve missed something, &lt;a href="https://twitter.com/@_eigenfoo">drop me a
line&lt;/a>!)&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://twitter.com/year_progress/status/1079889949871300608">Relevant tweet
here.&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>If that’s what you’re looking for, check out my &lt;a href="https://www.georgeho.org/bayesian-modelling-cookbook">Bayesian modelling
cookbook&lt;/a> or &lt;a href="https://betanalpha.github.io/assets/case_studies/principled_bayesian_workflow.html">Michael
Betancourt’s excellent essay on a principles Bayesian
workflow&lt;/a>.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></entry><entry><title>Probabilistic and Bayesian Matrix Factorizations for Text Clustering</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/matrix-factorizations/"/><id>https://www.georgeho.org/matrix-factorizations/</id><updated>2018-10-13T00:00:00Z</updated><published>2018-10-13T00:00:00Z</published><content type="html">&lt;p>Natural language processing is in a curious place right now. It was always a
late bloomer (as far as machine learning subfields go), and it&amp;rsquo;s not immediately
obvious how close the field is to viable, large-scale, production-ready
techniques (in the same way that, say, &lt;a href="https://clarifai.com/models/">computer vision
is&lt;/a>). For example, &lt;a href="https://ruder.io">Sebastian
Ruder&lt;/a> predicted that the field is &lt;a href="https://thegradient.pub/nlp-imagenet/">close to a watershed
moment&lt;/a>, and that soon we&amp;rsquo;ll have
downloadable language models. However, &lt;a href="https://thegradient.pub/author/ana/">Ana
Marasović&lt;/a> points out that there is &lt;a href="https://thegradient.pub/frontiers-of-generalization-in-natural-language-processing/">a
tremendous amount of work demonstrating
that&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>“despite good performance on benchmark datasets, modern NLP techniques are
nowhere near the skill of humans at language understanding and reasoning when
making sense of novel natural language inputs”.&lt;/p>
&lt;/blockquote>
&lt;p>I am confident that I am &lt;em>very&lt;/em> bad at making lofty predictions about the
future. Instead, I&amp;rsquo;ll talk about something I know a bit about: simple solutions
to concrete problems, with some Bayesianism thrown in for good measure!&lt;/p>
&lt;p>This blog post summarizes some literature on probabilistic and Bayesian
matrix factorization methods, keeping an eye out for applications to one
specific task in NLP: text clustering. It&amp;rsquo;s exactly what it sounds like, and
there&amp;rsquo;s been a fair amount of success in applying text clustering to many other
NLP tasks (e.g. check out these examples in &lt;a href="https://www-users.cs.umn.edu/~hanxx023/dmclass/scatter.pdf">document
organization&lt;/a>,
&lt;a href="http://jmlr.csail.mit.edu/papers/volume3/bekkerman03a/bekkerman03a.pdf">corpus&lt;/a>
&lt;a href="https://www.cs.technion.ac.il/~rani/el-yaniv-papers/BekkermanETW01.pdf">summarization&lt;/a>
and &lt;a href="http://www.kamalnigam.com/papers/emcat-aaai98.pdf">document
classification&lt;/a>).&lt;/p>
&lt;p>What follows is a literature review of three matrix factorization techniques for
machine learning: one classical, one probabilistic and one Bayesian. I also
experimented with applying these methods to text clustering: I gave a guest
lecture on my results to a graduate-level machine learning class at The Cooper
Union (the slide deck is below). Dive in!&lt;/p>
&lt;h2 id="non-negative-matrix-factorization-nmf">Non-Negative Matrix Factorization (NMF)&lt;/h2>
&lt;p>NMF is a &lt;a href="https://en.wikipedia.org/wiki/Non-negative_matrix_factorization">very
well-known&lt;/a>
&lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.NMF.html">matrix
factorization&lt;/a>
&lt;a href="https://arxiv.org/abs/1401.5226">technique&lt;/a>, perhaps most famous for its
applications in &lt;a href="http://blog.echen.me/2011/10/24/winning-the-netflix-prize-a-summary/">collaborative filtering and the Netflix
Prize&lt;/a>.&lt;/p>
&lt;p>Factorize your (entrywise non-negative) $m \times n$ matrix $V$ as
$V = WH$, where $W$ is $m \times p$ and $H$ is $p \times n$. $p$
is the dimensionality of your latent space, and each latent dimension usually
comes to quantify something with semantic meaning. There are several algorithms
to compute this factorization, but Lee and Seung&amp;rsquo;s &lt;a href="https://dl.acm.org/citation.cfm?id=3008829">multiplicative update
rule&lt;/a> (originally published in NIPS
2000) is most popular.&lt;/p>
&lt;p>Fairly simple: enough said, I think.&lt;/p>
&lt;h2 id="probabilistic-matrix-factorization-pmf">Probabilistic Matrix Factorization (PMF)&lt;/h2>
&lt;p>Originally introduced as a paper at &lt;a href="https://papers.nips.cc/paper/3208-probabilistic-matrix-factorization">NIPS
2007&lt;/a>,
&lt;em>probabilistic matrix factorization&lt;/em> is essentially the exact same model as NMF,
but with uncorrelated (a.k.a. “spherical”) multivariate Gaussian priors placed
on the rows and columns of $U$ and $V$. Expressed as a graphical model, PMF
would look like this:&lt;/p>
&lt;figure>
&lt;a href="https://www.georgeho.org/assets/images/pmf.png">&lt;img style="float: middle" src="https://www.georgeho.org/assets/images/pmf.png" alt="Graphical model (using plate notation) for probabilistic matrix factorization (PMF)">&lt;/a>
&lt;/figure>
&lt;p>Note that the priors are placed on the &lt;em>rows&lt;/em> of the $U$ and $V$ matrices.&lt;/p>
&lt;p>The authors then (somewhat disappointing) proceed to find the MAP estimate of
the $U$ and $V$ matrices. They show that maximizing the posterior is
equivalent to minimizing the sum-of-squared-errors loss function with two
quadratic regularization terms:&lt;/p>
&lt;p>$$
\frac{1}{2} \sum_{i=1}^{N} \sum_{j=1}^{M} {I_{ij} (R_{ij} - U_i^T V_j)^2} +
\frac{\lambda_U}{2} \sum_{i=1}^{N} |U|_{Fro}^2 +
\frac{\lambda_V}{2} \sum_{j=1}^{M} |V|_{Fro}^2
$$&lt;/p>
&lt;p>where $|\cdot|_{Fro}$ denotes the Frobenius norm, and $I_{ij}$ is 1 if document
$i$ contains word $j$, and 0 otherwise.&lt;/p>
&lt;p>This loss function can be minimized via gradient descent, and implemented in
your favorite deep learning framework (e.g. Tensorflow or PyTorch).&lt;/p>
&lt;p>The problem with this approach is that while the MAP estimate is often a
reasonable point in low dimensions, it becomes very strange in high dimensions,
and is usually not informative or special in any way. Read &lt;a href="https://www.inference.vc/high-dimensional-gaussian-distributions-are-soap-bubble/">Ferenc Huszár’s blog
post&lt;/a>
for more.&lt;/p>
&lt;h2 id="bayesian-probabilistic-matrix-factorization-bpmf">Bayesian Probabilistic Matrix Factorization (BPMF)&lt;/h2>
&lt;p>Strictly speaking, PMF is not a Bayesian model. After all, there aren&amp;rsquo;t any
priors or posteriors, only fixed hyperparameters and a MAP estimate. &lt;em>Bayesian
probabilistic matrix factorization&lt;/em>, originally published by &lt;a href="https://dl.acm.org/citation.cfm?id=1390267">researchers from
the University of Toronto&lt;/a> is a
fully Bayesian treatment of PMF.&lt;/p>
&lt;p>Instead of saying that the rows/columns of U and V are normally distributed with
zero mean and some precision matrix, we place hyperpriors on the mean vector and
precision matrices. The specific priors are Wishart priors on the covariance
matrices (with scale matrix $W_0$ and $\nu_0$ degrees of freedom), and
Gaussian priors on the means (with mean $\mu_0$ and covariance equal to the
covariance given by the Wishart prior). Expressed as a graphical model, BPMF
would look like this:&lt;/p>
&lt;figure>
&lt;a href="https://www.georgeho.org/assets/images/bpmf.png">&lt;img style="float: middle" src="https://www.georgeho.org/assets/images/bpmf.png" alt="Graphical model (using plate notation) for Bayesian probabilistic matrix factorization (BPMF)">&lt;/a>
&lt;/figure>
&lt;p>Note that, as above, the priors are placed on the &lt;em>rows&lt;/em> of the $U$ and $V$
matrices, and that $n$ is the dimensionality of latent space (i.e. the number
of latent dimensions in the factorization).&lt;/p>
&lt;p>The authors then sample from the posterior distribution of $U$ and $V$ using
a Gibbs sampler. Sampling takes several hours: somewhere between 5 to 180,
depending on how many samples you want. Nevertheless, the authors demonstrate
that BPMF can achieve more accurate and more robust results on the Netflix data
set.&lt;/p>
&lt;p>I would propose two changes to the original paper:&lt;/p>
&lt;ol>
&lt;li>Use an LKJ prior on the covariance matrices instead of a Wishart prior.
&lt;a href="https://docs.pymc.io/notebooks/LKJ.html">According to Michael Betancourt and the PyMC3 docs, this is more numerically
stable&lt;/a>, and will lead to better
inference.&lt;/li>
&lt;li>Use a more robust sampler such as NUTS (instead of a Gibbs sampler), or even
resort to variational inference. The paper makes it clear that BPMF is a
computationally painful endeavor, so any speedup to the method would be a
great help. It seems to me that for practical real-world applications to
collaborative filtering, we would want to use variational inference. Netflix
ain&amp;rsquo;t waiting 5 hours for their recommendations.&lt;/li>
&lt;/ol>
&lt;h2 id="application-to-text-clustering">Application to Text Clustering&lt;/h2>
&lt;p>Most of the work in these matrix factorization techniques focus on
dimensionality reduction: that is, the problem of finding two factor matrices
that faithfully reconstruct the original matrix when multiplied together.
However, I was interested in applying the exact same techniques to a separate
task: text clustering.&lt;/p>
&lt;p>A natural question is: why is matrix factorization&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> a good technique to use
for text clustering? Because it is simultaneously a clustering and a feature
engineering technique: not only does it offer us a latent representation of the
original data, but it also gives us a way to easily &lt;em>reconstruct&lt;/em> the original
data from the latent variables! This is something that &lt;a href="https://www.georgeho.org/lda-sucks">latent Dirichlet
allocation&lt;/a>, for instance, cannot do.&lt;/p>
&lt;p>Matrix factorization lives an interesting double life: clustering technique by
day, feature transformation technique by night. &lt;a href="http://charuaggarwal.net/text-cluster.pdf">Aggarwal and
Zhai&lt;/a> suggest that chaining matrix
factorization with some other clustering technique (e.g. agglomerative
clustering or topic modelling) is common practice and is called &lt;em>concept
decomposition&lt;/em>, but I haven&amp;rsquo;t seen any other source back this up.&lt;/p>
&lt;p>I experimented with using these techniques to cluster subreddits (&lt;a href="https://www.georgeho.org/reddit-clusters">sound
familiar?&lt;/a>). In a nutshell, nothing seemed
to work out very well, and I opine on why I think that&amp;rsquo;s the case in the slide
deck below. This talk was delivered to a graduate-level course in frequentist
machine learning.&lt;/p>
&lt;blockquote class="embedly-card">&lt;h4>&lt;a href="https://speakerdeck.com/_eigenfoo/probabilistic-and-bayesian-matrix-factorizations-for-text-clustering">Probabilistic and Bayesian Matrix Factorizations for Text Clustering&lt;/a>&lt;/h4>&lt;p> I experimented with using these techniques to cluster subreddits. In a nutshell, nothing seemed to work out very well, and I opine on why I think that’s the case in this slide deck. This talk was delivered to a graduate-level course in frequentist machine learning. &lt;/p>&lt;/blockquote>
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8">&lt;/script>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>which is, by the way, a &lt;a href="http://scikit-learn.org/stable/modules/decomposition.html">severely underappreciated technique in machine
learning&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></entry><entry><title>Multi-Armed Bandits and Conjugate Models — Bayesian Reinforcement Learning (Part 1)</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/bayesian-bandits/"/><id>https://www.georgeho.org/bayesian-bandits/</id><updated>2018-08-31T00:00:00Z</updated><published>2018-08-31T00:00:00Z</published><content type="html">&lt;blockquote>
&lt;p>This is the first of a two-part series about Bayesian bandit algorithms. Check
out the second post &lt;a href="https://www.georgeho.org/bayesian-bandits-2/">here&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>Let&amp;rsquo;s talk about Bayesianism. It&amp;rsquo;s developed a reputation (not entirely
justified, but not entirely unjustified either) for being too mathematically
sophisticated or too computationally intensive to work at scale. For instance,
inferring from a Gaussian mixture model is fraught with computational problems
(hierarchical funnels, multimodal posteriors, etc.), and may take a seasoned
Bayesian anywhere between a day and a month to do well. On the other hand, other
blunt hammers of estimation are as easy as a maximum likelihood estimate:
something you could easily get a SQL query to do if you wanted to.&lt;/p>
&lt;p>In this blog post I hope to show that there is more to Bayesianism than just
MCMC sampling and suffering, by demonstrating a Bayesian approach to a classic
reinforcement learning problem: the &lt;em>multi-armed bandit&lt;/em>.&lt;/p>
&lt;p>The problem is this: imagine a gambler at a row of slot machines (each machine
being a “one-armed bandit”), who must devise a strategy so as to maximize
rewards. This strategy includes which machines to play, how many times to play
each machine, in which order to play them, and whether to continue with the
current machine or try a different machine.&lt;/p>
&lt;p>This problem is a central problem in decision theory and reinforcement learning:
the agent (our gambler) starts out in a state of ignorance, but learns through
interacting with its environment (playing slots). For more details, Cam
Davidson-Pilon has a great introduction to multi-armed bandits in Chapter 6 of
his book &lt;a href="https://nbviewer.jupyter.org/github/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/blob/master/Chapter6_Priorities/Ch6_Priors_PyMC3.ipynb">&lt;em>Bayesian Methods for
Hackers&lt;/em>&lt;/a>,
and Tor Lattimore and Csaba Szepesvári cover a breathtaking amount of the
underlying theory in their book &lt;a href="http://banditalgs.com/">&lt;em>Bandit Algorithms&lt;/em>&lt;/a>.&lt;/p>
&lt;p>So let&amp;rsquo;s get started! I assume that you are familiar with:&lt;/p>
&lt;ul>
&lt;li>some basic probability, at least enough to know some distributions: normal,
Bernoulli, binomial&amp;hellip;&lt;/li>
&lt;li>some basic Bayesian statistics, at least enough to understand what a
&lt;a href="https://en.wikipedia.org/wiki/Conjugate_prior">conjugate prior&lt;/a> (and
conjugate model) is, and why one might like them.&lt;/li>
&lt;li>&lt;a href="https://jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/">Python generators and the &lt;code>yield&lt;/code>
keyword&lt;/a>,
to understand some of the code I&amp;rsquo;ve written&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/li>
&lt;/ul>
&lt;p>Dive in!&lt;/p>
&lt;h2 id="the-algorithm">The Algorithm&lt;/h2>
&lt;p>The algorithm is straightforward. The description below is taken from Cam
Davidson-Pilon over at Data Origami&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>For each round,&lt;/p>
&lt;ol>
&lt;li>Sample a random variable $X_b$ from the prior of bandit $b$, for all
$b$.&lt;/li>
&lt;li>Select the bandit with largest sample, i.e. select bandit $B =
\text{argmax}(X_b)$.&lt;/li>
&lt;li>Observe the result of pulling bandit $B$, and update your prior on bandit
$B$ using the conjugate model update rule.&lt;/li>
&lt;li>Repeat!&lt;/li>
&lt;/ol>
&lt;p>What I find remarkable about this is how dumbfoundingly simple it is! No MCMC
sampling, no $\hat{R}$s to diagnose, no pesky divergences&amp;hellip; all it requires is
a conjugate model, and the rest is literally just counting.&lt;/p>
&lt;p>&lt;strong>NB:&lt;/strong> This algorithm is technically known as &lt;em>Thompson sampling&lt;/em>, and is only
one of many algorithms out there. The main difference is that there are other
ways to go from our current priors to a decision on which bandit to play
next. E.g. instead of simply sampling from our priors, we could use the
upper bound of the 90% credible region, or some dynamic quantile of the
posterior (as in Bayes UCB). See Data Origami&lt;sup id="fnref1:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> for more information.&lt;/p>
&lt;h3 id="stochastic-aka-stationary-bandits">Stochastic (a.k.a. stationary) bandits&lt;/h3>
&lt;p>Let&amp;rsquo;s take this algorithm for a spin! Assume we have rewards which are Bernoulli
distributed (this would be the situation we face when e.g. modelling
click-through rates). The conjugate prior for the Bernoulli distribution is the
Beta distribution (this is a special case of the Beta-Binomial model).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">make_bandits&lt;/span>(params):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">pull&lt;/span>(arm, size&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Bernoulli distributed rewards&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reward &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>random&lt;span style="color:#f92672">.&lt;/span>binomial(n&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, p&lt;span style="color:#f92672">=&lt;/span>params[arm], size&lt;span style="color:#f92672">=&lt;/span>size)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">yield&lt;/span> reward
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> pull, len(params)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">bayesian_strategy&lt;/span>(pull, num_bandits):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_rewards &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>zeros(num_bandits)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_trials &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>zeros(num_bandits)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Sample from the bandits&amp;#39; priors, and choose largest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> choice &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>argmax(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> np&lt;span style="color:#f92672">.&lt;/span>random&lt;span style="color:#f92672">.&lt;/span>beta(a&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">+&lt;/span> num_rewards, b&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">+&lt;/span> num_trials &lt;span style="color:#f92672">-&lt;/span> num_rewards)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Sample the chosen bandit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reward &lt;span style="color:#f92672">=&lt;/span> next(pull(choice))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Update&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_rewards[choice] &lt;span style="color:#f92672">+=&lt;/span> reward
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_trials[choice] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">yield&lt;/span> choice, reward, num_rewards, num_trials
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pull, num_bandits &lt;span style="color:#f92672">=&lt;/span> make_bandits([&lt;span style="color:#ae81ff">0.2&lt;/span>, &lt;span style="color:#ae81ff">0.5&lt;/span>, &lt;span style="color:#ae81ff">0.7&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> play &lt;span style="color:#f92672">=&lt;/span> bayesian_strategy(pull, num_bandits)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">100&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> choice, reward, num_rewards, num_trials &lt;span style="color:#f92672">=&lt;/span> next(play)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, &lt;code>pull&lt;/code> returns the result of pulling on the &lt;code>arm&lt;/code>&amp;lsquo;th bandit, and
&lt;code>make_bandits&lt;/code> is just a factory function for &lt;code>pull&lt;/code>.&lt;/p>
&lt;p>The &lt;code>bayesian_strategy&lt;/code> function actually implements the algorithm. We only need
to keep track of the number of times we win and the number of times we played
(&lt;code>num_rewards&lt;/code> and &lt;code>num_trials&lt;/code>, respectively). It samples from all current
&lt;code>np.random.beta&lt;/code> priors (where the original prior was a $\text{Beta}(2,
2)$, which is symmetrix about 0.5 and explains the odd-looking &lt;code>a=2+&lt;/code> and
&lt;code>b=2+&lt;/code> there), picks the &lt;code>np.argmax&lt;/code>, &lt;code>pull&lt;/code>s that specific bandit, and updates
&lt;code>num_rewards&lt;/code> and &lt;code>num_trials&lt;/code>.&lt;/p>
&lt;p>I&amp;rsquo;ve omitted the data visualization code here, but if you want to see it, check
out the &lt;a href="https://github.com/eigenfoo/wanderings/blob/afcf37a8c6c2a2ac38f6708c1f3dd50db2ebe71f/bayes/bayesian-bandits.ipynb">Jupyter notebook on my
GitHub&lt;/a>&lt;/p>
&lt;figure>
&lt;a href="https://www.georgeho.org/assets/images/beta-binomial.png">&lt;img style="float: middle" src="https://www.georgeho.org/assets/images/beta-binomial.png" alt="Posterior distribution after several pulls for the Beta-Binomial model">&lt;/a>
&lt;/figure>
&lt;h3 id="generalizing-to-conjugate-models">Generalizing to conjugate models&lt;/h3>
&lt;p>In fact, this algorithm isn&amp;rsquo;t just limited to Bernoulli-distributed rewards: it
will work for any &lt;a href="https://en.wikipedia.org/wiki/Conjugate_prior#Table_of_conjugate_distributions">conjugate
model&lt;/a>!
Here I implement the Gamma-Poisson model (that is, Poisson distributed rewards,
with a Gamma conjugate prior) to illustrate how extensible this framework is.
(Who cares about Poisson distributed rewards, you ask? Anyone who worries about
returning customers, for one!)&lt;/p>
&lt;p>Here&amp;rsquo;s what we need to change:&lt;/p>
&lt;ul>
&lt;li>The rewards distribution in the &lt;code>pull&lt;/code> function (in practice, you don&amp;rsquo;t get
to pick this, so &lt;em>technically&lt;/em> there&amp;rsquo;s nothing to change if you&amp;rsquo;re doing this
in production!)&lt;/li>
&lt;li>The sampling from the prior in &lt;code>bayesian_strategy&lt;/code>&lt;/li>
&lt;li>The variables you need to keep track of and the update rule in &lt;code>bayesian_strategy&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Without further ado:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">make_bandits&lt;/span>(params):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">pull&lt;/span>(arm, size&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Poisson distributed rewards&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reward &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>random&lt;span style="color:#f92672">.&lt;/span>poisson(lam&lt;span style="color:#f92672">=&lt;/span>params[arm], size&lt;span style="color:#f92672">=&lt;/span>size)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">yield&lt;/span> reward
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> pull, len(params)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">bayesian_strategy&lt;/span>(pull, num_bandits):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_rewards &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>ones(num_bandits)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_trials &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>ones(num_bandits)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Sample from the bandits&amp;#39; priors, and choose largest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> choice &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>argmax(np&lt;span style="color:#f92672">.&lt;/span>random&lt;span style="color:#f92672">.&lt;/span>gamma(num_rewards, scale&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">/&lt;/span> num_trials))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Sample the chosen bandit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reward &lt;span style="color:#f92672">=&lt;/span> next(pull(choice))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Update&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_rewards[choice] &lt;span style="color:#f92672">+=&lt;/span> reward
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_trials[choice] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">yield&lt;/span> choice, reward, num_rewards, num_trials
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pull, num_bandits &lt;span style="color:#f92672">=&lt;/span> make_bandits([&lt;span style="color:#ae81ff">4.0&lt;/span>, &lt;span style="color:#ae81ff">4.5&lt;/span>, &lt;span style="color:#ae81ff">5.0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> play &lt;span style="color:#f92672">=&lt;/span> bayesian_strategy(pull, num_bandits)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">100&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> choice, reward, num_rewards, num_trials &lt;span style="color:#f92672">=&lt;/span> next(play)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;figure>
&lt;a href="https://www.georgeho.org/assets/images/gamma-poisson.png">&lt;img style="float: middle" src="https://www.georgeho.org/assets/images/gamma-poisson.png" alt="Posterior distribution after several pulls for the Gamma-Poisson model">&lt;/a>
&lt;/figure>
&lt;p>This really demonstrates how lean and mean conjugate models can be, especially
considering how much of a pain MCMC or approximate inference methods would be,
compared to literal &lt;em>counting&lt;/em>. Conjugate models aren&amp;rsquo;t just textbook examples:
they&amp;rsquo;re &lt;em>(gasp)&lt;/em> actually useful!&lt;/p>
&lt;h3 id="generalizing-to-arbitrary-rewards-distributions">Generalizing to arbitrary rewards distributions&lt;/h3>
&lt;p>OK, so if we have a conjugate model, we can use Thompson sampling to solve the
multi-armed bandit problem. But what if our rewards distribution doesn&amp;rsquo;t have a
conjugate prior, or what if we don&amp;rsquo;t even &lt;em>know&lt;/em> our rewards distribution?&lt;/p>
&lt;p>In general this problem is very difficult to solve. Theoretically, we could
place some fairly uninformative prior on our rewards, and after every pull we
could run MCMC to get our posterior, but that doesn&amp;rsquo;t scale, especially for the
online algorithms that we have in mind. Luckily a recent paper by Agrawal and
Goyal&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> gives us some help, &lt;em>if we assume rewards are bounded on the interval
$[0, 1]$&lt;/em> (of course, if we have bounded rewards, then we can just normalize
them by their maximum value to get rewards between 0 and 1).&lt;/p>
&lt;p>This solutions bootstraps the first Beta-Bernoulli model to this new situation.
Here&amp;rsquo;s what happens:&lt;/p>
&lt;ol>
&lt;li>Sample a random variable $X_b$ from the (Beta) prior of bandit $b$, for
all $b$.&lt;/li>
&lt;li>Select the bandit with largest sample, i.e. select bandit $B =
\text{argmax}(X_b)$.&lt;/li>
&lt;li>Observe the reward $R$ from bandit $B$.&lt;/li>
&lt;li>&lt;strong>Observe the outcome $r$ from a Bernoulli trial with probability of success $R$.&lt;/strong>&lt;/li>
&lt;li>Update posterior of $B$ with this observation $r$.&lt;/li>
&lt;li>Repeat!&lt;/li>
&lt;/ol>
&lt;p>Here I do this for the logit-normal distribution (i.e. a random variable whose
logit is normally distributed). Note that &lt;code>np.expit&lt;/code> is the inverse of the logit
function.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">make_bandits&lt;/span>(params):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">pull&lt;/span>(arm, size&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Logit-normal distributed returns (or any distribution with finite support)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># `expit` is the inverse of `logit`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reward &lt;span style="color:#f92672">=&lt;/span> expit(np&lt;span style="color:#f92672">.&lt;/span>random&lt;span style="color:#f92672">.&lt;/span>normal(loc&lt;span style="color:#f92672">=&lt;/span>params[arm], scale&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, size&lt;span style="color:#f92672">=&lt;/span>size))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">yield&lt;/span> reward
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> pull, len(params)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">bayesian_strategy&lt;/span>(pull, num_bandits):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_rewards &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>zeros(num_bandits)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_trials &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>zeros(num_bandits)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Sample from the bandits&amp;#39; priors, and choose largest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> choice &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>argmax(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> np&lt;span style="color:#f92672">.&lt;/span>random&lt;span style="color:#f92672">.&lt;/span>beta(&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">+&lt;/span> num_rewards, &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">+&lt;/span> num_trials &lt;span style="color:#f92672">-&lt;/span> num_rewards)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Sample the chosen bandit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reward &lt;span style="color:#f92672">=&lt;/span> next(pull(choice))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Sample a Bernoulli with probability of success = reward&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Remember, reward is normalized to be in [0, 1]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> outcome &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>random&lt;span style="color:#f92672">.&lt;/span>binomial(n&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, p&lt;span style="color:#f92672">=&lt;/span>reward)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Update&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_rewards[choice] &lt;span style="color:#f92672">+=&lt;/span> outcome
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_trials[choice] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">yield&lt;/span> choice, reward, num_rewards, num_trials
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pull, num_bandits &lt;span style="color:#f92672">=&lt;/span> make_bandits([&lt;span style="color:#ae81ff">0.2&lt;/span>, &lt;span style="color:#ae81ff">1.8&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> play &lt;span style="color:#f92672">=&lt;/span> bayesian_strategy(pull, num_bandits)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">100&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> choice, reward, num_rewards, num_trials &lt;span style="color:#f92672">=&lt;/span> next(play)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;figure>
&lt;a href="https://www.georgeho.org/assets/images/bounded.png">&lt;img style="float: middle" src="https://www.georgeho.org/assets/images/bounded.png" alt="Posterior distribution after several pulls with an arbitrary reward distribution (e.g. the logit normal)">&lt;/a>
&lt;/figure>
&lt;h2 id="final-remarks">Final Remarks&lt;/h2>
&lt;p>None of this theory is new: I&amp;rsquo;m just advertising it! See Cam Davidson-Pilon&amp;rsquo;s
great blog post about Bayesian bandits&lt;sup id="fnref2:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> for a much more in-depth treatment,
and of course, read around papers on arXiv if you want to go deeper!&lt;/p>
&lt;p>Also, if you want to see all the code that went into this blog post, check out
&lt;a href="https://github.com/eigenfoo/wanderings/blob/afcf37a8c6c2a2ac38f6708c1f3dd50db2ebe71f/bayes/bayesian-bandits.ipynb">the notebook
here&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>This is the first of a two-part series about Bayesian bandit algorithms. Check
out the second post &lt;a href="https://www.georgeho.org/bayesian-bandits-2/">here&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>I&amp;rsquo;ve hopped on board the functional programming bandwagon, and couldn&amp;rsquo;t
help but think that to demonstrate this idea, I didn&amp;rsquo;t need a framework, a
library or even a class. Just two functions!&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Davidson-Pilon, Cameron. “Multi-Armed Bandits.” DataOrigami, 6 Apr. 2013,
&lt;a href="https://dataorigami.net/blogs/napkin-folding/79031811-multi-armed-bandits">dataorigami.net/blogs/napkin-folding/79031811-multi-armed-bandits&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref1:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref2:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;a href="https://arxiv.org/abs/1111.1797">arXiv:1111.1797&lt;/a> [cs.LG]&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></entry><entry><title>Cookbook — Bayesian Modelling with PyMC3</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/bayesian-modelling-cookbook/"/><id>https://www.georgeho.org/bayesian-modelling-cookbook/</id><updated>2018-06-24T00:00:00Z</updated><published>2018-06-24T00:00:00Z</published><content type="html">&lt;p>Recently I&amp;rsquo;ve started using &lt;a href="https://github.com/pymc-devs/pymc3">PyMC3&lt;/a> for
Bayesian modelling, and it&amp;rsquo;s an amazing piece of software! The API only exposes
as much of heavy machinery of MCMC as you need — by which I mean, just the
&lt;code>pm.sample()&lt;/code> method (a.k.a., as &lt;a href="http://twiecki.github.io/blog/2013/08/12/bayesian-glms-1/">Thomas
Wiecki&lt;/a> puts it, the
&lt;em>Magic Inference Button™&lt;/em>). This really frees up your mind to think about your
data and model, which is really the heart and soul of data science!&lt;/p>
&lt;p>That being said however, I quickly realized that the water gets very deep very
fast: I explored my data set, specified a hierarchical model that made sense to
me, hit the &lt;em>Magic Inference Button™&lt;/em>, and… uh, what now? I blinked at the
angry red warnings the sampler spat out.&lt;/p>
&lt;p>So began by long, rewarding and ongoing exploration of Bayesian modelling. This
is a compilation of notes, tips, tricks and recipes that I&amp;rsquo;ve collected from
everywhere: papers, documentation, peppering my &lt;a href="https://twitter.com/twiecki">more
experienced&lt;/a>
&lt;a href="https://twitter.com/aseyboldt">colleagues&lt;/a> with questions. It&amp;rsquo;s still very much
a work in progress, but hopefully somebody else finds it useful!&lt;/p>
&lt;p>&lt;img src="https://www.georgeho.org/assets/images/pymc-logo.png" alt="PyMC logo">&lt;/p>
&lt;div>
&lt;h2>Contents&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#for-the-uninitiated">For the Uninitiated&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#bayesian-modelling">Bayesian modelling&lt;/a>&lt;/li>
&lt;li>&lt;a href="#markov-chain-monte-carlo">Markov-chain Monte Carlo&lt;/a>&lt;/li>
&lt;li>&lt;a href="#variational-inference">Variational inference&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#model-formulation">Model Formulation&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#hierarchical-models">Hierarchical models&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#model-implementation">Model Implementation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#mcmc-initialization-and-sampling">MCMC Initialization and Sampling&lt;/a>&lt;/li>
&lt;li>&lt;a href="#mcmc-trace-diagnostics">MCMC Trace Diagnostics&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#fixing-divergences">Fixing divergences&lt;/a>&lt;/li>
&lt;li>&lt;a href="#other-common-warnings">Other common warnings&lt;/a>&lt;/li>
&lt;li>&lt;a href="#model-reparameterization">Model reparameterization&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#model-diagnostics">Model Diagnostics&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;h2 id="for-the-uninitiated">For the Uninitiated&lt;/h2>
&lt;ul>
&lt;li>First of all, &lt;em>welcome!&lt;/em> It&amp;rsquo;s a brave new world out there — where statistics
is cool, Bayesian and (if you&amp;rsquo;re lucky) even easy. Dive in!&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>EDIT (1/24/2020):&lt;/strong> I published a &lt;a href="https://www.georgeho.org/bayesian-inference-reading/">subsequent blog
post&lt;/a> with a reading list
for Bayesian inference and modelling. Check it out for reading material in
addition to the ones I list below!&lt;/p>
&lt;/blockquote>
&lt;h3 id="bayesian-modelling">Bayesian modelling&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>If you don&amp;rsquo;t know any probability, I&amp;rsquo;d recommend &lt;a href="https://betanalpha.github.io/assets/case_studies/probability_theory.html">Michael
Betancourt&amp;rsquo;s&lt;/a>
crash-course in practical probability theory.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For an introduction to general Bayesian methods and modelling, I really liked
&lt;a href="http://camdavidsonpilon.github.io/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/">Cam Davidson Pilon&amp;rsquo;s &lt;em>Bayesian Methods for
Hackers&lt;/em>&lt;/a>:
it really made the whole “thinking like a Bayesian” thing click for me.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you&amp;rsquo;re willing to spend some money, I&amp;rsquo;ve heard that &lt;a href="https://sites.google.com/site/doingbayesiandataanalysis/">&lt;em>Doing Bayesian Data
Analysis&lt;/em> by
Kruschke&lt;/a> (a.k.a.
&lt;em>“the puppy book”&lt;/em>) is for the bucket list.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Here we come to a fork in the road. The central problem in Bayesian modelling
is this: given data and a probabilistic model that we think models this data,
how do we find the posterior distribution of the model&amp;rsquo;s parameters? There are
currently two good solutions to this problem. One is Markov-chain Monte Carlo
sampling (a.k.a. MCMC sampling), and the other is variational inference
(a.k.a. VI). Both methods are mathematical Death Stars: extremely powerful but
incredibly complicated. Nevertheless, I think it&amp;rsquo;s important to get at least a
hand-wavy understanding of what these methods are. If you&amp;rsquo;re new to all this,
my personal recommendation is to invest your time in learning MCMC: it&amp;rsquo;s been
around longer, we know that there are sufficiently robust tools to help you,
and there&amp;rsquo;s a lot more support/documentation out there.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="markov-chain-monte-carlo">Markov-chain Monte Carlo&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>For a good high-level introduction to MCMC, I liked &lt;a href="https://www.youtube.com/watch?v=DJ0c7Bm5Djk&amp;amp;feature=youtu.be&amp;amp;t=4h40m9s">Michael Betancourt&amp;rsquo;s
StanCon 2017
talk&lt;/a>:
especially the first few minutes where he provides a motivation for MCMC, that
really put all this math into context for me.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For a more in-depth (and mathematical) treatment of MCMC, I&amp;rsquo;d check out his
&lt;a href="https://arxiv.org/abs/1701.02434">paper on Hamiltonian Monte Carlo&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="variational-inference">Variational inference&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>VI has been around for a while, but it was only in 2017 (2 years ago, at the
time of writing) that &lt;em>automatic differentiation variational inference&lt;/em> was
invented. As such, variational inference is undergoing a renaissance and is
currently an active area of statistical research. Since it&amp;rsquo;s such a nascent
field, most resources on it are very theoretical and academic in nature.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Chapter 10 (on approximate inference) in Bishop&amp;rsquo;s &lt;em>Pattern Recognition and
Machine Learning&lt;/em> and &lt;a href="https://www.cs.princeton.edu/courses/archive/fall11/cos597C/lectures/variational-inference-i.pdf">this
tutorial&lt;/a>
by David Blei are excellent, if a bit mathematically-intensive, resources.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The most hands-on explanation of variational inference I&amp;rsquo;ve seen is the docs
for &lt;a href="http://pyro.ai/examples/svi_part_i.html">Pyro&lt;/a>, a probabilistic
programming language developed by Uber that specializes in variational
inference.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="model-formulation">Model Formulation&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Try thinking about &lt;em>how&lt;/em> your data would be generated: what kind of machine
has your data as outputs? This will help you both explore your data, as well
as help you arrive at a reasonable model formulation.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Try to avoid correlated variables. Some of the more robust samplers can cope
with &lt;em>a posteriori&lt;/em> correlated random variables, but sampling is much easier
for everyone involved if the variables are uncorrelated. By the way, the bar
is pretty low here: if the jointplot/scattergram of the two variables looks
like an ellipse, thats usually okay. It&amp;rsquo;s when the ellipse starts looking like
a line that you should be alarmed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Try to avoid discrete latent variables, and discrete parameters in general.
There is no good method to sample them in a smart way (since discrete
parameters have no gradients); and with “naïve” samplers (i.e. those that do
not take advantage of the gradient), the number of samples one needs to make
good inferences generally scales exponentially in the number of parameters.
For an instance of this, see &lt;a href="https://docs.pymc.io/notebooks/marginalized_gaussian_mixture_model.html">this example on marginal Gaussian
mixtures&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;a href="https://github.com/stan-dev/stan/wiki/Prior-Choice-Recommendations">Stan GitHub
wiki&lt;/a> has
some excellent recommendations on how to choose good priors. Once you get a
good handle on the basics of using PyMC3, I &lt;em>100% recommend&lt;/em> reading this wiki
from start to end: the Stan community has fantastic resources on Bayesian
statistics, and even though their APIs are quite different, the mathematical
theory all translates over.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="hierarchical-models">Hierarchical models&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>First of all, hierarchical models can be amazing! &lt;a href="https://docs.pymc.io/notebooks/GLM-hierarchical.html">The PyMC3
docs&lt;/a> opine on this at
length, so let&amp;rsquo;s not waste any digital ink.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The poster child of a Bayesian hierarchical model looks something like this
(equations taken from
&lt;a href="https://en.wikipedia.org/wiki/Bayesian_hierarchical_modeling">Wikipedia&lt;/a>):&lt;/p>
&lt;p>&lt;img style="float: center"
src="https://wikimedia.org/api/rest_v1/media/math/render/svg/765f37f86fa26bef873048952dccc6e8067b78f4"
alt="Example Bayesian hierarchical model equation #1">&lt;/p>
&lt;p>&lt;img style="float: center"
src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ca8c0e1233fd69fa4325c6eacf8462252ed6b00a"
alt="Example Bayesian hierarchical model equation #2">&lt;/p>
&lt;p>&lt;img style="float: center"
src="https://wikimedia.org/api/rest_v1/media/math/render/svg/1e56b3077b1b3ec867d6a0f2539ba9a3e79b45c1"
alt="Example Bayesian hierarchical model equation #3">&lt;/p>
&lt;p>This hierarchy has 3 levels (some would say it has 2 levels, since there are
only 2 levels of parameters to infer, but honestly whatever: by my count there
are 3). 3 levels is fine, but add any more levels, and it becomes harder for
to sample. Try out a taller hierarchy to see if it works, but err on the side
of 3-level hierarchies.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If your hierarchy is too tall, you can truncate it by introducing a
deterministic function of your parameters somewhere (this usually turns out to
just be a sum). For example, instead of modelling your observations are drawn
from a 4-level hierarchy, maybe your observations can be modeled as the sum of
three parameters, where these parameters are drawn from a 3-level hierarchy.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>More in-depth treatment here in &lt;a href="https://arxiv.org/abs/1312.0906">(Betancourt and Girolami,
2013)&lt;/a>. &lt;strong>tl;dr:&lt;/strong> hierarchical models all
but &lt;em>require&lt;/em> you use to use Hamiltonian Monte Carlo; also included are some
practical tips and goodies on how to do that stuff in the real world.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="model-implementation">Model Implementation&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>At the risk of overgeneralizing, there are only two things that can go wrong
in Bayesian modelling: either your data is wrong, or your model is wrong. And
it is a hell of a lot easier to debug your data than it is to debug your
model. So before you even try implementing your model, plot histograms of your
data, count the number of data points, drop any NaNs, etc. etc.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>PyMC3 has one quirky piece of syntax, which I tripped up on for a while. It&amp;rsquo;s
described quite well in &lt;a href="http://twiecki.github.io/blog/2014/03/17/bayesian-glms-3/#comment-2213376737">this comment on Thomas Wiecki&amp;rsquo;s
blog&lt;/a>.
Basically, suppose you have several groups, and want to initialize several
variables per group, but you want to initialize different numbers of variables
for each group. Then you need to use the quirky &lt;code>variables[index]&lt;/code>
notation. I suggest using &lt;code>scikit-learn&lt;/code>&amp;rsquo;s &lt;code>LabelEncoder&lt;/code> to easily create the
index. For example, to make normally distributed heights for the iris dataset:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Different numbers of examples for each species&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>species &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#ae81ff">48&lt;/span> &lt;span style="color:#f92672">*&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;setosa&amp;#39;&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">52&lt;/span> &lt;span style="color:#f92672">*&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;virginica&amp;#39;&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">63&lt;/span> &lt;span style="color:#f92672">*&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;versicolor&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>num_species &lt;span style="color:#f92672">=&lt;/span> len(list(set(species))) &lt;span style="color:#75715e"># 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># One variable per group&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>heights_per_species &lt;span style="color:#f92672">=&lt;/span> pm&lt;span style="color:#f92672">.&lt;/span>Normal(&lt;span style="color:#e6db74">&amp;#39;heights_per_species&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mu&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>, sd&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, shape&lt;span style="color:#f92672">=&lt;/span>num_species)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>idx &lt;span style="color:#f92672">=&lt;/span> sklearn&lt;span style="color:#f92672">.&lt;/span>preprocessing&lt;span style="color:#f92672">.&lt;/span>LabelEncoder()&lt;span style="color:#f92672">.&lt;/span>fit_transform(species)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>heights &lt;span style="color:#f92672">=&lt;/span> heights_per_species[idx]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>You might find yourself in a situation in which you want to use a centered
parameterization for a portion of your data set, but a noncentered
parameterization for the rest of your data set (see below for what these
parameterizations are). There&amp;rsquo;s a useful idiom for you here:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>num_xs &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>use_centered &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>array([&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>]) &lt;span style="color:#75715e"># len(use_centered) = num_xs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>x_sd &lt;span style="color:#f92672">=&lt;/span> pm&lt;span style="color:#f92672">.&lt;/span>HalfCauchy(&lt;span style="color:#e6db74">&amp;#39;x_sd&amp;#39;&lt;/span>, sd&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>x_raw &lt;span style="color:#f92672">=&lt;/span> pm&lt;span style="color:#f92672">.&lt;/span>Normal(&lt;span style="color:#e6db74">&amp;#39;x_raw&amp;#39;&lt;/span>, mu&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>, sd&lt;span style="color:#f92672">=&lt;/span>x_sd&lt;span style="color:#f92672">**&lt;/span>use_centered, shape&lt;span style="color:#f92672">=&lt;/span>num_xs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#f92672">=&lt;/span> pm&lt;span style="color:#f92672">.&lt;/span>Deterministic(&lt;span style="color:#e6db74">&amp;#39;x&amp;#39;&lt;/span>, x_sd&lt;span style="color:#f92672">**&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">-&lt;/span> use_centered) &lt;span style="color:#f92672">*&lt;/span> x_raw)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You could even experiment with allowing &lt;code>use_centered&lt;/code> to be &lt;em>between&lt;/em> 0 and
1, instead of being &lt;em>either&lt;/em> 0 or 1!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I prefer to use the &lt;code>pm.Deterministic&lt;/code> function instead of simply using normal
arithmetic operations (e.g. I&amp;rsquo;d prefer to write &lt;code>x = pm.Deterministic('x', y + z)&lt;/code> instead of &lt;code>x = y + z&lt;/code>). This means that you can index the &lt;code>trace&lt;/code> object
later on with just &lt;code>trace['x']&lt;/code>, instead of having to compute it yourself with
&lt;code>trace['y'] + trace['z']&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="mcmc-initialization-and-sampling">MCMC Initialization and Sampling&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Have faith in PyMC3&amp;rsquo;s default initialization and sampling settings: someone
much more experienced than us took the time to choose them! NUTS is the most
efficient MCMC sampler known to man, and &lt;code>jitter+adapt_diag&lt;/code>… well, you get
the point.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>However, if you&amp;rsquo;re truly grasping at straws, a more powerful initialization
setting would be &lt;code>advi&lt;/code> or &lt;code>advi+adapt_diag&lt;/code>, which uses variational inference
to initialize the sampler. An even better option would be to use
&lt;code>advi+adapt_diag_grad&lt;/code> &lt;del>which is (at the time of writing) an experimental
feature in beta&lt;/del>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Never initialize the sampler with the MAP estimate! In low dimensional
problems the MAP estimate (a.k.a. the mode of the posterior) is often quite a
reasonable point. But in high dimensions, the MAP becomes very strange. Check
out &lt;a href="http://www.inference.vc/high-dimensional-gaussian-distributions-are-soap-bubble/">Ferenc Huszár&amp;rsquo;s blog
post&lt;/a>
on high-dimensional Gaussians to see why. Besides, at the MAP all the derivatives
of the posterior are zero, and that isn&amp;rsquo;t great for derivative-based samplers.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="mcmc-trace-diagnostics">MCMC Trace Diagnostics&lt;/h2>
&lt;ul>
&lt;li>You&amp;rsquo;ve hit the &lt;em>Magic Inference Button™&lt;/em>, and you have a &lt;code>trace&lt;/code> object. Now
what? First of all, make sure that your sampler didn&amp;rsquo;t barf itself, and that
your chains are safe for consumption (i.e., analysis).&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>Theoretically, run the chain for as long as you have the patience or
resources for. In practice, just use the PyMC3 defaults: 500 tuning
iterations, 1000 sampling iterations.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check for divergences. PyMC3&amp;rsquo;s sampler will spit out a warning if there are
diverging chains, but the following code snippet may make things easier:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Display the total number and percentage of divergent chains&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>diverging &lt;span style="color:#f92672">=&lt;/span> trace[&lt;span style="color:#e6db74">&amp;#39;diverging&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#39;Number of Divergent Chains: &lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(diverging&lt;span style="color:#f92672">.&lt;/span>nonzero()[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>size))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>diverging_pct &lt;span style="color:#f92672">=&lt;/span> diverging&lt;span style="color:#f92672">.&lt;/span>nonzero()[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>size &lt;span style="color:#f92672">/&lt;/span> len(trace) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#39;Percentage of Divergent Chains: &lt;/span>&lt;span style="color:#e6db74">{:.1f}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(diverging_pct))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Check the traceplot (&lt;code>pm.traceplot(trace)&lt;/code>). You&amp;rsquo;re looking for traceplots
that look like “fuzzy caterpillars”. If the trace moves into some region and
stays there for a long time (a.k.a. there are some “sticky regions”), that&amp;rsquo;s
cause for concern! That indicates that once the sampler moves into some
region of parameter space, it gets stuck there (probably due to high
curvature or other bad topological properties).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In addition to the traceplot, there are &lt;a href="https://docs.pymc.io/api/plots.html">a ton of other
plots&lt;/a> you can make with your trace:&lt;/p>
&lt;ul>
&lt;li>&lt;code>pm.plot_posterior(trace)&lt;/code>: check if your posteriors look reasonable.&lt;/li>
&lt;li>&lt;code>pm.forestplot(trace)&lt;/code>: check if your variables have reasonable credible
intervals, and Gelman–Rubin scores close to 1.&lt;/li>
&lt;li>&lt;code>pm.autocorrplot(trace)&lt;/code>: check if your chains are impaired by high
autocorrelation. Also remember that thinning your chains is a waste of
time at best, and deluding yourself at worst. See Chris Fonnesbeck&amp;rsquo;s
comment on &lt;a href="https://github.com/pymc-devs/pymc/issues/23">this GitHub
issue&lt;/a> and &lt;a href="https://twitter.com/junpenglao/status/1009748562136256512">Junpeng Lao&amp;rsquo;s
reply to Michael Betancourt&amp;rsquo;s
tweet&lt;/a>&lt;/li>
&lt;li>&lt;code>pm.energyplot(trace)&lt;/code>: ideally the energy and marginal energy
distributions should look very similar. Long tails in the distribution of
energy levels indicates deteriorated sampler efficiency.&lt;/li>
&lt;li>&lt;code>pm.densityplot(trace)&lt;/code>: a souped-up version of &lt;code>pm.plot_posterior&lt;/code>. It
doesn&amp;rsquo;t seem to be wildly useful unless you&amp;rsquo;re plotting posteriors from
multiple models.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>PyMC3 has a nice helper function to pretty-print a summary table of the
trace: &lt;code>pm.summary(trace)&lt;/code> (I usually tack on a &lt;code>.round(2)&lt;/code> for my sanity).
Look out for:&lt;/p>
&lt;ul>
&lt;li>the $\hat{R}$ values (a.k.a. the Gelman–Rubin statistic, a.k.a. the
potential scale reduction factor, a.k.a. the PSRF): are they all close to
1? If not, something is &lt;em>horribly&lt;/em> wrong. Consider respecifying or
reparameterizing your model. You can also inspect these in the forest plot.&lt;/li>
&lt;li>the sign and magnitude of the inferred values: do they make sense, or are
they unexpected and unreasonable? This could indicate a poorly specified
model. (E.g. parameters of the unexpected sign that have low uncertainties
might indicate that your model needs interaction terms.)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>As a drastic debugging measure, try to &lt;code>pm.sample&lt;/code> with &lt;code>draws=1&lt;/code>,
&lt;code>tune=500&lt;/code>, and &lt;code>discard_tuned_samples=False&lt;/code>, and inspect the traceplot.
During the tuning phase, we don&amp;rsquo;t expect to see friendly fuzzy caterpillars,
but we &lt;em>do&lt;/em> expect to see good (if noisy) exploration of parameter space. So
if the sampler is getting stuck during the tuning phase, that might explain
why the trace looks horrible.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you get scary errors that describe mathematical problems (e.g. &lt;code>ValueError: Mass matrix contains zeros on the diagonal. Some derivatives might always be zero.&lt;/code>), then you&amp;rsquo;re &lt;del>shit out of luck&lt;/del> exceptionally unlucky: those kinds of
errors are notoriously hard to debug. I can only point to the &lt;a href="http://andrewgelman.com/2008/05/13/the_folk_theore/">Folk Theorem of
Statistical Computing&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>If you&amp;rsquo;re having computational problems, probably your model is wrong.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;h3 id="fixing-divergences">Fixing divergences&lt;/h3>
&lt;blockquote>
&lt;p>&lt;code>There were N divergences after tuning. Increase 'target_accept' or reparameterize.&lt;/code>&lt;/p>
&lt;p>— The &lt;em>Magic Inference Button™&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>Divergences in HMC occur when the sampler finds itself in regions of extremely
high curvature (such as the opening of the a hierarchical funnel). Broadly
speaking, the sampler is prone to malfunction in such regions, causing the
sampler to fly off towards to infinity. The ruins the chains by heavily
biasing the samples.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Remember: if you have even &lt;em>one&lt;/em> diverging chain, you should be worried.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Increase &lt;code>target_accept&lt;/code>: usually 0.9 is a good number (currently the default
in PyMC3 is 0.8). This will help get rid of false positives from the test for
divergences. However, divergences that &lt;em>don&amp;rsquo;t&lt;/em> go away are cause for alarm.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Increasing &lt;code>tune&lt;/code> can sometimes help as well: this gives the sampler more time
to 1) find the typical set and 2) find good values for the step size, mass
matrix elements, etc. If you&amp;rsquo;re running into divergences, it&amp;rsquo;s always possible
that the sampler just hasn&amp;rsquo;t started the mixing phase and is still trying to
find the typical set.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Consider a &lt;em>noncentered&lt;/em> parameterization. This is an amazing trick: it all
boils down to the familiar equation $X = \sigma Z + \mu$ from STAT 101, but
it honestly works wonders. See &lt;a href="http://twiecki.github.io/blog/2017/02/08/bayesian-hierchical-non-centered/">Thomas Wiecki&amp;rsquo;s blog
post&lt;/a>
on it, and &lt;a href="https://docs.pymc.io/notebooks/Diagnosing_biased_Inference_with_Divergences.html">this page from the PyMC3
documentation&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If that doesn&amp;rsquo;t work, there may be something wrong with the way you&amp;rsquo;re
thinking about your data: consider reparameterizing your model, or
respecifying it entirely.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="other-common-warnings">Other common warnings&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>It&amp;rsquo;s worth noting that far and away the worst warning to get is the one about
divergences. While a divergent chain indicates that your inference may be
flat-out &lt;em>invalid&lt;/em>, the rest of these warnings indicate that your inference is
merely (lol, “merely”) &lt;em>inefficient&lt;/em>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It&amp;rsquo;s also worth noting that the &lt;a href="https://mc-stan.org/misc/warnings.html">Brief Guide to Stan&amp;rsquo;s
Warnings&lt;/a> is a tremendous resource for
exactly what kinds of errors you might get when running HMC or NUTS, and how
you should think about them.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>The number of effective samples is smaller than XYZ for some parameters.&lt;/code>&lt;/p>
&lt;ul>
&lt;li>Quoting &lt;a href="https://discourse.pymc.io/t/the-number-of-effective-samples-is-smaller-than-25-for-some-parameters/1050/3">Junpeng Lao on
&lt;code>discourse.pymc3.io&lt;/code>&lt;/a>:
“A low number of effective samples is usually an indication of strong
autocorrelation in the chain.”&lt;/li>
&lt;li>Make sure you&amp;rsquo;re using an efficient sampler like NUTS. (And not, for
instance, Gibbs or Metropolis–Hastings.)&lt;/li>
&lt;li>Tweak the acceptance probability (&lt;code>target_accept&lt;/code>) — it should be large
enough to ensure good exploration, but small enough to not reject all
proposals and get stuck.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>The gelman-rubin statistic is larger than XYZ for some parameters. This indicates slight problems during sampling.&lt;/code>&lt;/p>
&lt;ul>
&lt;li>When PyMC3 samples, it runs several chains in parallel. Loosely speaking,
the Gelman–Rubin statistic measures how similar these chains are. Ideally it
should be close to 1.&lt;/li>
&lt;li>Increasing the &lt;code>tune&lt;/code> parameter may help, for the same reasons as described
in the &lt;em>Fixing Divergences&lt;/em> section.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>The chain reached the maximum tree depth. Increase max_treedepth, increase target_accept or reparameterize.&lt;/code>&lt;/p>
&lt;ul>
&lt;li>NUTS puts a cap on the depth of the trees that it evaluates during each
iteration, which is controlled through the &lt;code>max_treedepth&lt;/code>. Reaching the
maximum allowable tree depth indicates that NUTS is prematurely pulling the
plug to avoid excessive compute time.&lt;/li>
&lt;li>Yeah, what the &lt;em>Magic Inference Button™&lt;/em> says: try increasing
&lt;code>max_treedepth&lt;/code> or &lt;code>target_accept&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="model-reparameterization">Model reparameterization&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Countless warnings have told you to engage in this strange activity of
“reparameterization”. What even is that? Luckily, the &lt;a href="https://github.com/stan-dev/stan/releases">Stan User
Manual&lt;/a> (specifically the
&lt;em>Reparameterization and Change of Variables&lt;/em> section) has an excellent
explanation of reparameterization, and even some practical tips to help you do
it (although your mileage may vary on how useful those tips will be to you).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Asides from meekly pointing to other resources, there&amp;rsquo;s not much I can do to
help: this stuff really comes from a combination of intuition, statistical
knowledge and good ol&amp;rsquo; experience. I can, however, cite some examples to give
you a better idea.&lt;/p>
&lt;ul>
&lt;li>The noncentered parameterization is a classic example. If you have a
parameter whose mean and variance you are also modelling, the noncentered
parameterization decouples the sampling of mean and variance from the
sampling of the parameter, so that they are now independent. In this way, we
avoid “funnels”.&lt;/li>
&lt;li>The &lt;a href="http://proceedings.mlr.press/v5/carvalho09a.html">&lt;em>horseshoe
distribution&lt;/em>&lt;/a> is known to
be a good shrinkage prior, as it is &lt;em>very&lt;/em> spikey near zero, and has &lt;em>very&lt;/em>
long tails. However, modelling it using one parameter can give multimodal
posteriors — an exceptionally bad result. The trick is to reparameterize and
model it as the product of two parameters: one to create spikiness at zero,
and one to create long tails (which makes sense: to sample from the
horseshoe, take the product of samples from a normal and a half-Cauchy).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="model-diagnostics">Model Diagnostics&lt;/h2>
&lt;ul>
&lt;li>Admittedly the distinction between the previous section and this one is
somewhat artificial (since problems with your chains indicate problems with
your model), but I still think it&amp;rsquo;s useful to make this distinction because
these checks indicate that you&amp;rsquo;re thinking about your data in the wrong way,
(i.e. you made a poor modelling decision), and &lt;em>not&lt;/em> that the sampler is
having a hard time doing its job.&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>Run the following snippet of code to inspect the pairplot of your variables
one at a time (if you have a plate of variables, it&amp;rsquo;s fine to pick a couple
at random). It&amp;rsquo;ll tell you if the two random variables are correlated, and
help identify any troublesome neighborhoods in the parameter space (divergent
samples will be colored differently, and will cluster near such
neighborhoods).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>pm&lt;span style="color:#f92672">.&lt;/span>pairplot(trace,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_varnames&lt;span style="color:#f92672">=&lt;/span>[variable_1, variable_2],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> divergences&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> color&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;C3&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kwargs_divergence&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#e6db74">&amp;#39;color&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;C2&amp;#39;&lt;/span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Look at your posteriors (either from the traceplot, density plots or
posterior plots). Do they even make sense? E.g. are there outliers or long
tails that you weren&amp;rsquo;t expecting? Do their uncertainties look reasonable to
you? If you had &lt;a href="https://en.wikipedia.org/wiki/Plate_notation">a plate&lt;/a> of
variables, are their posteriors different? Did you expect them to be that
way? If not, what about the data made the posteriors different? You&amp;rsquo;re the
only one who knows your problem/use case, so the posteriors better look good
to you!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Broadly speaking, there are four kinds of bad geometries that your posterior
can suffer from:&lt;/p>
&lt;ul>
&lt;li>highly correlated posteriors: this will probably cause divergences or
traces that don&amp;rsquo;t look like “fuzzy caterpillars”. Either look at the
jointplots of each pair of variables, or look at the correlation matrix of
all variables. Try using a centered parameterization, or reparameterize in
some other way, to remove these correlations.&lt;/li>
&lt;li>posteriors that form “funnels”: this will probably cause divergences. Try
using a noncentered parameterization.&lt;/li>
&lt;li>heavy tailed posteriors: this will probably raise warnings about
&lt;code>max_treedepth&lt;/code> being exceeded. If your data has long tails, you should
model that with a long-tailed distribution. If your data doesn&amp;rsquo;t have long
tails, then your model is ill-specified: perhaps a more informative prior
would help.&lt;/li>
&lt;li>multimodal posteriors: right now this is pretty much a death blow. At the
time of writing, all samplers have a hard time with multimodality, and
there&amp;rsquo;s not much you can do about that. Try reparameterizing to get a
unimodal posterior. If that&amp;rsquo;s not possible (perhaps you&amp;rsquo;re &lt;em>modelling&lt;/em>
multimodality using a mixture model), you&amp;rsquo;re out of luck: just let NUTS
sample for a day or so, and hopefully you&amp;rsquo;ll get a good trace.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Pick a small subset of your raw data, and see what exactly your model does
with that data (i.e. run the model on a specific subset of your data). I find
that a lot of problems with your model can be found this way.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Run &lt;a href="https://docs.pymc.io/notebooks/posterior_predictive.html">&lt;em>posterior predictive
checks&lt;/em>&lt;/a> (a.k.a.
PPCs): sample from your posterior, plug it back in to your model, and
“generate new data sets”. PyMC3 even has a nice function to do all this for
you: &lt;code>pm.sample_ppc&lt;/code>. But what do you do with these new data sets? That&amp;rsquo;s a
question only you can answer! The point of a PPC is to see if the generated
data sets reproduce patterns you care about in the observed real data set,
and only you know what patterns you care about. E.g. how close are the PPC
means to the observed sample mean? What about the variance?&lt;/p>
&lt;ul>
&lt;li>For example, suppose you were modelling the levels of radon gas in
different counties in a country (through a hierarchical model). Then you
could sample radon gas levels from the posterior for each county, and take
the maximum within each county. You&amp;rsquo;d then have a distribution of maximum
radon gas levels across counties. You could then check if the &lt;em>actual&lt;/em>
maximum radon gas level (in your observed data set) is acceptably within
that distribution. If it&amp;rsquo;s much larger than the maxima, then you would know
that the actual likelihood has longer tails than you assumed (e.g. perhaps
you should use a Student&amp;rsquo;s T instead of a normal?)&lt;/li>
&lt;li>Remember that how well the posterior predictive distribution fits the data
is of little consequence (e.g. the expectation that 90% of the data should
fall within the 90% credible interval of the posterior). The posterior
predictive distribution tells you what values for data you would expect if
we were to remeasure, given that you&amp;rsquo;ve already observed the data you did.
As such, it&amp;rsquo;s informed by your prior as well as your data, and it&amp;rsquo;s not its
job to adequately fit your data!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></content></entry><entry><title>Understanding Hate Speech on Reddit through Text Clustering</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/reddit-clusters/"/><id>https://www.georgeho.org/reddit-clusters/</id><updated>2018-03-18T00:00:00Z</updated><published>2018-03-18T00:00:00Z</published><content type="html">&lt;blockquote>
&lt;p>Note: the following article contains several examples of hate speech
(including but not limited to racist, misogynistic and homophobic views).&lt;/p>
&lt;/blockquote>
&lt;p>Have you heard of &lt;code>/r/TheRedPill&lt;/code>? It’s an online forum (a subreddit, but I’ll
explain that later) where people (usually men) espouse an ideology predicated
entirely on gender. “Swallowers of the red pill”, as they call themselves,
maintain that it is &lt;em>men&lt;/em>, not women, who are socially marginalized; that feminism
is something between a damaging ideology and a symptom of societal retardation;
that the patriarchy should actively assert its dominance over female
compatriots.&lt;/p>
&lt;p>Despite being shunned by the world (or perhaps, because of it), &lt;code>/r/TheRedPill&lt;/code>
has grown into a sizable community and evolved its own slang, language and
culture. Let me give you an example.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>Cluster #14:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cluster importance: 0.0489376285127
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shit: 2.433590
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>test: 1.069885
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>frame: 0.396684
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pass: 0.204953
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bitch: 0.163619
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a snippet from a text clustering of &lt;code>/r/TheRedPill&lt;/code> — you don’t really
need to understand the details right now: all you need to know is that each
cluster is simply a bunch of words that frequently appear together in Reddit
posts and comments. Following each word is a number indicating its importance in
the cluster, and on line 2 is the importance of this cluster to the subreddit
overall.&lt;/p>
&lt;p>As it turns out, this cluster has picked up on a very specific meme on
&lt;code>/r/TheRedPill&lt;/code>: the concept of the &lt;em>shit test&lt;/em>, and how your frame can &lt;em>pass&lt;/em> the
&lt;em>shit tests&lt;/em> that life (but predominantly, &lt;em>bitches&lt;/em>) can throw at you.&lt;/p>
&lt;p>There’s absolutely no way I could explain this stuff better than the swallowers
of the red pill themselves, so I’ll just quote from a post on &lt;code>/r/TheRedPill&lt;/code> and
a related blog.&lt;/p>
&lt;p>The concept of the shit test very broad:&lt;/p>
&lt;blockquote>
&lt;p>&amp;hellip; when somebody “gives you shit” and fucks around with your head to see how
you will react, what you are experiencing is typically a (series of) shit
test(s).&lt;/p>
&lt;/blockquote>
&lt;p>A shit test is designed to test your temperament, or more colloquially,
&lt;em>“determine your frame”&lt;/em>.&lt;/p>
&lt;blockquote>
&lt;p>Frame is a concept which essentially means “composure and self-control”.&lt;/p>
&lt;p>&amp;hellip; if you can keep composure/seem unfazed and/or assert your boundaries
despite a shit test, generally speaking you will be considered to have passed
the shit test. If you get upset, offended, doubt yourself or show weakness in
any discernible way when shit tested, it will be generally considered that you
failed the test.&lt;/p>
&lt;/blockquote>
&lt;p>Finally, not only do shit tests test your frame, but they also serve a specific,
critical social function:&lt;/p>
&lt;blockquote>
&lt;p>When it comes right down to it shit tests are typically women’s way of
flirting.&lt;/p>
&lt;p>&amp;hellip; Those who “pass” show they can handle the woman’s BS and is “on her
level”, so to speak. This is where the evolutionary theory comes into play:
you’re demonstrating her faux negativity doesn’t phase you [sic] and that
you’re an emotionally developed person who isn’t going to melt down at the
first sign of trouble. Ergo you’ll be able to protect her when threats to
her safety emerge.&lt;/p>
&lt;/blockquote>
&lt;p>If you want to learn more, I took all the above quotes from
&lt;a href="https://www.reddit.com/r/TheRedPill/comments/22qnmk/newbies_read_this_the_definitive_guide_to_shit/">here&lt;/a>
and &lt;a href="https://illimitablemen.com/2014/12/14/the-shit-test-encyclopedia/">here&lt;/a>:
feel free to toss yourself down that rabbit hole (but you may want to open those
links in Incognito mode).&lt;/p>
&lt;p>Clearly though, the cluster did a good job of identifying one topic of
discussion on &lt;code>/r/TheRedPill&lt;/code>. In fact, not only can clustering pick up on a
general topic of conversation, but also on specific memes, motifs and vocabulary
associated with it.&lt;/p>
&lt;p>Interested? Read on! I’ll explain what I did, and describe some of my other
results.&lt;/p>
&lt;hr>
&lt;p>Reddit is — well, it’s pretty hard to describe what Reddit &lt;em>is&lt;/em>, mainly because
Reddit comprises several thousand communities, called &lt;em>subreddits&lt;/em>, which center
around topics broad (&lt;code>/r/Sports&lt;/code>) and niche (&lt;code>/r/thinkpad&lt;/code>), delightful
(&lt;code>/r/aww&lt;/code>) and unsavory (&lt;code>/r/Incels&lt;/code>).&lt;/p>
&lt;p>Each subreddit is a unique community with its own rules, culture and standards.
Some are welcoming and inclusive, and anyone can post and comment; others, not
so much: you must be invited to even read their front page. Some have pliant
standards about what is acceptable as a post; others have moderators willing to
remove posts and ban users upon any infraction of community guidelines.&lt;/p>
&lt;p>Whatever Reddit is though, two things are for certain:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>It’s widely used. &lt;em>Very&lt;/em> widely used. At the time of writing, it’s the &lt;a href="https://www.alexa.com/topsites/countries/US">fourth
most popular website in the United
States&lt;/a> and the &lt;a href="https://www.alexa.com/topsites">sixth most popular
globally&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Where there is free speech, there is hate speech. Reddit’s hate speech
problem is &lt;a href="https://www.wired.com/2015/08/reddit-mods-handle-hate-speech/">well
documented&lt;/a>,
the &lt;a href="https://www.inverse.com/article/43611-reddit-ceo-steve-huffman-hate-speech">center of recent
controversy&lt;/a>,
and even &lt;a href="https://fivethirtyeight.com/features/dissecting-trumps-most-rabid-online-following/">the subject of statistical
analysis&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Now, there are many well-known hateful subreddits. The three that I decided to
focus on were &lt;code>/r/TheRedPill&lt;/code>, &lt;code>/r/The_Donald&lt;/code>, and&lt;code>/r/CringeAnarchy&lt;/code>.&lt;/p>
&lt;p>The goal here is to understand what these subreddits are like, and expose their
culture for people to see. To quote &lt;a href="https://www.inverse.com/article/43611-reddit-ceo-steve-huffman-hate-speech">Steve Huffman, Reddit’s
CEO&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>“I believe the best defense against racism and other repugnant views, both
on Reddit and in the world, is instead of trying to control what people
can and cannot say through rules, is to repudiate these views in a free
conversation, and empower our communities to do so on Reddit.”&lt;/p>
&lt;/blockquote>
&lt;p>And there’s no way we can refute and repudiate these deplorable views without
knowing what those views are. And instead of spending hours of each of these
subreddits ourselves, let’s have a machine learn what gets talked about on these
subreddits.&lt;/p>
&lt;hr>
&lt;p>Now, how do we do this? This can be done using &lt;em>clustering&lt;/em>, a machine learning
technique in which we’re given data points, and tasked with grouping them in
some way. A picture will explain better than words:&lt;/p>
&lt;figure>
&lt;a href="https://www.georgeho.org/assets/images/clusters.png">&lt;img src="https://www.georgeho.org/assets/images/clusters.png" alt="Illustration of clustering">&lt;/a>
&lt;/figure>
&lt;p>The clustering algorithm was hard to decide on. After several dead ends were
explored, I settled on non-negative matrix factorization of the document-term
matrix, featurized using tf-idfs. I don’t really want to go into the technical
details now: suffice to say that this technique is &lt;a href="http://scikit-learn.org/stable/auto_examples/applications/plot_topics_extraction_with_nmf_lda.html">known to work well for this
application&lt;/a>
(perhaps I’ll write another piece on this in the future).&lt;/p>
&lt;p>Finally, we need our data points: &lt;a href="https://bigquery.cloud.google.com/dataset/fh-bigquery:reddit_comments">Google
BigQuery&lt;/a>
has all posts and comments across all of Reddit, from the the beginning of
Reddit right up until the end of 2017. We decided to focus on the last two
months for which there is data: November and December, 2017.&lt;/p>
&lt;p>I could talk at length about the technical details, but right now, I want to
focus on the results of the clustering. What follows are two hand-picked
clusters from each of the three subreddits, visualized as word clouds (you can
think of word clouds as visual representations of the code snippet above), as
well as an example comment from each of the clusters.&lt;/p>
&lt;h2 id="rtheredpill">&lt;code>/r/TheRedPill&lt;/code>&lt;/h2>
&lt;p>You already know &lt;code>/r/TheRedPill&lt;/code>, so let me describe the clusters in more detail:
a good number of them are about sex, or about how to approach girls. Comments in
these clusters tend to give advice on how to pick up girls, or describe the
social/sexual exploits of the commenter.&lt;/p>
&lt;p>What is interesting is that, as sex-obsessed as &lt;code>/r/TheRedPill&lt;/code> is, many
swallowers (of the red pill) profess that sex is &lt;em>not&lt;/em> the purpose of the
subreddit: the point is to becoming an “alpha male”. Even more interesting,
there is more talk about what an alpha male &lt;em>is&lt;/em>, and what kind of people
&lt;em>aren’t&lt;/em> alpha, than there is about how people can &lt;em>become&lt;/em> alpha. This is the
first cluster shown below, and comprises around 3% of all text on
&lt;code>/r/TheRedPill&lt;/code>.&lt;/p>
&lt;p>The second cluster comprises around 6% of all text on &lt;code>/r/TheRedPill&lt;/code>, and
contains comments that expound theories on the role of men, women and feminism
in today’s society (it isn’t pretty). Personally, the most repugnant views that
I’ve read are to be found in this cluster.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>I feel like the over dramatization of beta qualities in media/pop
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>culture is due to the fact that anyone representing these qualities is
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>already Alpha by default.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The actors who play the white knight lead roles, the rock stars that
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sing about pining for some chick... these men/characters are already
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>very Alpha in both looks and status, so when beta BS comes from their
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mouths, it’s seen as attractive because it balances out their already
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alpha state into that &amp;#34;mostly alpha but some beta&amp;#34; balance that makes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>women swoon.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;figure>
&lt;a href="https://raw.githubusercontent.com/eigenfoo/reddit-clusters/master/wordclouds/images/TheRedPill/13_3.21%25.png">&lt;img src="https://raw.githubusercontent.com/eigenfoo/reddit-clusters/master/wordclouds/images/TheRedPill/13_3.21%25.png" alt="/r/TheRedPill cluster #13">&lt;/a>
&lt;a href="https://raw.githubusercontent.com/eigenfoo/reddit-clusters/master/wordclouds/images/TheRedPill/06_6.41%25.png">&lt;img src="https://raw.githubusercontent.com/eigenfoo/reddit-clusters/master/wordclouds/images/TheRedPill/06_6.41%25.png" alt="/r/TheRedPill cluster #6">&lt;/a>
&lt;/figure>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Since the dawn of humanity men were always in control, held all the
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>power and women were happy because of it. But now men are forced to
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lose their masculinity and power or else they&amp;#39;ll be killed/punished by
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>other pussy men with big guns and laws who believe feminism is the
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>right path for humanity.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Feminism is really a blessing in disguise because it&amp;#39;s a wake up call
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>for men and a hidden cry for help from women for men to regain their
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>masculinity, integrity and control over women.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="rthe_donald">&lt;code>/r/The_Donald&lt;/code>&lt;/h2>
&lt;p>You may have already heard of &lt;code>/r/The_Donald&lt;/code> (a.k.a. the “pro-Trump cesspool”),
famed for their &lt;a href="https://en.wikipedia.org/wiki//r/The_Donald#Conflict_with_Reddit_management">takeover of the Reddit front
page&lt;/a>,
and their &lt;a href="https://en.wikipedia.org/wiki//r/The_Donald#Controversies">involvement in several recent
controversies&lt;/a>. It
may therefore be surprising to learn that there is an iota of lucid discussion
that goes on, although in a jeering, bullying tone.&lt;/p>
&lt;p>&lt;code>/r/The_Donald&lt;/code> is the subreddit which has developed the most language and inside
jokes: from “nimble navigators” to “swamp creatures”, “spezzes” to the
“Trumpire”&amp;hellip; Explaining these memes would take too long: reach out, or Google, if
you really want to know.&lt;/p>
&lt;p>The first cluster accounts for 5% of all text on &lt;code>/r/The_Donald&lt;/code>, and contains
(relatively) coherent arguments both for and against net neutrality. The second
cluster accounts for 1% of the all text on &lt;code>/r/The_Donald&lt;/code>, and is actually from
the subreddit’s &lt;code>MAGABrickBot&lt;/code>, which is a bot that keeps count of how many times
the word “brick” has been used in comments, by automatically generating this
comment.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>So much misinformation perpetuated by the Swamp... Abolishing Net
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Neutrality would benefit swamp creatures with corporate payouts but
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>would be most damaging to conservatives long term.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Net Neutrality was NOT created by Obama, it was actually in effect
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>from the very beginning...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;figure>
&lt;a href="https://raw.githubusercontent.com/eigenfoo/reddit-clusters/master/wordclouds/images/The_Donald/00_5.19%25.png">&lt;img src="https://raw.githubusercontent.com/eigenfoo/reddit-clusters/master/wordclouds/images/The_Donald/00_5.19%25.png" alt="/r/The_Donald cluster #0">&lt;/a>
&lt;a href="https://raw.githubusercontent.com/eigenfoo/reddit-clusters/master/wordclouds/images/The_Donald/02_1.26%25.png">&lt;img src="https://raw.githubusercontent.com/eigenfoo/reddit-clusters/master/wordclouds/images/The_Donald/02_1.26%25.png" alt="/r/The_Donald cluster #2">&lt;/a>
&lt;/figure>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>**FOR THE LOVE OF GOD GET THIS PATRIOT A BRICK! THAT&amp;#39;S 92278 BRICKS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HANDED OUT!**
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>We are at **14.3173880911%** of our goal to **BUILD THE WALL**
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>starting from Imperial Beach, CA to Brownsville, Texas! Lets make sure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>everyone gets a brick in the United States! For every Centipede a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>brick, for every brick a Centipede!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>At this rate, the wall will be **1071.35224786 MILES WIDE** and
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>**353.552300867 FEET HIGH** by tomorrow! **DO YOUR PART!**
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="rcringeanarchy">&lt;code>/r/CringeAnarchy&lt;/code>&lt;/h2>
&lt;p>On the Internet, &lt;em>cringe&lt;/em> is the second-hand embarrassment you feel when someone
acts extremely awkwardly or uncomfortably. And on &lt;code>/r/CringeAnarchy&lt;/code> you can find
memes about the &lt;em>real&lt;/em> cringe, which is, um, liberals and anyone else who
advocates for an inclusionary, equitable ideology. Their morally grey jokes run
the gamut of delicate topics: gender, race, sexuality, nationality&amp;hellip;&lt;/p>
&lt;p>In some respects, the clustering provided very little insight into this
subreddit: each such delicate topic had one or two clusters, and there’s nothing
really remarkable about any of them. This speaks to the inherent difficulty of
training a topic model on memes: I rant at greater length about this topic on
&lt;a href="https://www.georgeho.org/lda-sucks/">one of my blog posts&lt;/a>.&lt;/p>
&lt;p>Both clusters below comprise around 3% of text on &lt;code>/r/CringeAnarchy&lt;/code>: one is to do
with race, and the other is to do with homosexuality.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>Has anyone here, non-black or otherwise, ever wished someone felt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sorry for being black? Maybe it&amp;#39;s just where I live... the majority is
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>black. It&amp;#39;s whatever.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;figure>
&lt;a href="https://raw.githubusercontent.com/eigenfoo/reddit-clusters/master/wordclouds/images/CringeAnarchy/08_3.10%25.png">&lt;img src="https://raw.githubusercontent.com/eigenfoo/reddit-clusters/master/wordclouds/images/CringeAnarchy/08_3.10%25.png" alt="/r/CringeAnarchy cluster #8">&lt;/a>
&lt;a href="https://raw.githubusercontent.com/eigenfoo/reddit-clusters/master/wordclouds/images/CringeAnarchy/12_2.92%25.png">&lt;img src="https://raw.githubusercontent.com/eigenfoo/reddit-clusters/master/wordclouds/images/CringeAnarchy/12_2.92%25.png" alt="/r/CringeAnarchy cluster #8">&lt;/a>
&lt;/figure>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Also, the distinction between bisexual and gay is academic. If you do
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a gay thing, you have done a gay thing. That&amp;#39;s what &amp;#34;being gay&amp;#34; means
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>to a LOT of people. Redefining it is as useful as all the other things
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SJWs are redefining.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;p>As much information as that might have been, this was just a glimpse into what
these subreddits are like: I made 20 clusters for each subreddit, and you could
argue that (for somewhat technical reasons) 20 clusters isn’t even enough!
Moreover, there is just no way I could distill everything I learned about these
communities into one Medium story: I’ve curated just the more remarkable or
provocative results to put here.&lt;/p>
&lt;p>If you still have the stomach for this stuff, scroll through the complete log
files
&lt;a href="https://github.com/eigenfoo/reddit-clusters/tree/master/clustering/nmf/results">here&lt;/a>,
or look through images of the word clouds
&lt;a href="https://github.com/eigenfoo/reddit-clusters/tree/master/wordclouds/images">here&lt;/a>.&lt;/p>
&lt;p>Finally, as has been said before, “Talk is cheap. Show me the code.” For
everything I’ve written to make these clusters, check out &lt;a href="https://github.com/eigenfoo/reddit-clusters">this GitHub
repository&lt;/a>.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Update (2018-11-08):&lt;/strong> If you&amp;rsquo;re interested in the technical, data science side
of the project, check out the slide deck and speaker notes from &lt;a href="https://www.georgeho.org/reddit-slides/">my recent
talk&lt;/a> on exactly that!&lt;/p></content></entry><entry><title>Why Latent Dirichlet Allocation Sucks</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/lda-sucks/"/><id>https://www.georgeho.org/lda-sucks/</id><updated>2018-03-06T00:00:00Z</updated><published>2018-03-06T00:00:00Z</published><content type="html">&lt;p>As I learn more and more about data science and machine learning, I&amp;rsquo;ve noticed
that a lot of resources out there go something like this:&lt;/p>
&lt;blockquote>
&lt;p>Check out this thing! It&amp;rsquo;s great at this task! The important task! The one
that was impossible/hard to do before! Look how well it does! So good! So
fast!&lt;/p>
&lt;p>Take this! It&amp;rsquo;s our algorithm/code/paper! We used it to do the thing! And now
you can do the thing too!&lt;/p>
&lt;/blockquote>
&lt;p>Jokes aside, I do think it’s true that a lot of research and resources focus on
what things &lt;em>can&lt;/em> do, or what things are &lt;em>good&lt;/em> at doing. Whenever I actually
implement the hyped-up “thing”, I’m invariably frustrated when it doesn’t
perform so well as originally described.&lt;/p>
&lt;p>Maybe I&amp;rsquo;m not smart enough to see this, but after I learn about a new technique
or tool or model, it&amp;rsquo;s not immediately obvious to me when &lt;em>not&lt;/em> to use it. I
think it would be very helpful to learn what things &lt;em>aren&amp;rsquo;t&lt;/em> good at doing, or
why things just plain &lt;em>suck&lt;/em> at times. Doing so not only helps you understand
the technique/tool/model better, but also sharpens your understanding of your
use case and the task at hand: what is it about your application that makes it
unsuitable for such a technique?&lt;/p>
&lt;p>Which is why I&amp;rsquo;m writing the first of what will (hopefully) be a series of posts
on &lt;em>“Why [Thing] Sucks”&lt;/em>. The title is provocative but reductive: a better name
might be &lt;em>When and Why [Thing] Might Suck&lt;/em>… but that doesn&amp;rsquo;t have quite the
same ring to it! In these articles I&amp;rsquo;ll be outlining what I tried and why it
didn&amp;rsquo;t work: documenting my failures and doing a quick post-mortem, if you will.
My hope is that this will be useful to anyone else trying to do the same thing
I&amp;rsquo;m doing.&lt;/p>
&lt;hr>
&lt;p>So first up: topic modelling. Specifically, &lt;a href="https://en.wikipedia.org/wiki/Latent_Dirichlet_allocation">latent Dirichlet
allocation&lt;/a>, or LDA
for short (not to be confused with &lt;a href="https://www.georgeho.org/lda/">the other
LDA&lt;/a>, which I wrote a blog post about before).&lt;/p>
&lt;p>If you&amp;rsquo;ve already encountered LDA and have seen &lt;a href="https://en.wikipedia.org/wiki/Plate_notation">plate
notation&lt;/a> before, this picture
will probably refresh your memory:&lt;/p>
&lt;p>&lt;img src="https://www.georgeho.org/assets/images/latent-dirichlet-allocation.png" alt="Latent Dirichlet allocation">&lt;/p>
&lt;p>If you don&amp;rsquo;t know what LDA is, fret not, for there is
&lt;a href="http://www.jmlr.org/papers/volume3/blei03a/blei03a.pdf">no&lt;/a>
&lt;a href="http://obphio.us/pdfs/lda_tutorial.pdf">shortage&lt;/a>
&lt;a href="http://blog.echen.me/2011/08/22/introduction-to-latent-dirichlet-allocation/">of&lt;/a>
&lt;a href="https://rstudio-pubs-static.s3.amazonaws.com/79360_850b2a69980c4488b1db95987a24867a.html">resources&lt;/a>
&lt;a href="http://scikit-learn.org/stable/modules/decomposition.html#latentdirichletallocation">about&lt;/a>
&lt;a href="https://radimrehurek.com/gensim/models/ldamodel.html">this&lt;/a>
&lt;a href="https://www.quora.com/What-is-a-good-explanation-of-Latent-Dirichlet-Allocation">stuff&lt;/a>.
I&amp;rsquo;m going to move on to when and why LDA isn&amp;rsquo;t the best idea.&lt;/p>
&lt;p>&lt;strong>tl;dr:&lt;/strong> &lt;em>LDA and topic modelling doesn&amp;rsquo;t work well with a) short documents,
in which there isn&amp;rsquo;t much text to model, or b) documents that don&amp;rsquo;t coherently
discuss a single topic.&lt;/em>&lt;/p>
&lt;p>Wait, what? Did George just say that topic modelling sucks when there&amp;rsquo;s not much
topic, and not much text to model? Isn&amp;rsquo;t that obvious?&lt;/p>
&lt;p>&lt;em>Yes! Exactly!&lt;/em> Of course it&amp;rsquo;s &lt;a href="https://en.wikipedia.org/wiki/Egg_of_Columbus">obvious in
retrospect&lt;/a>! Which is why I was
so upset when I realized I spent two whole weeks faffing around with LDA when
topic models were the opposite of what I needed, and so frustrated that more
people aren&amp;rsquo;t talking about when &lt;em>not&lt;/em> to use/do certain things.&lt;/p>
&lt;p>But anyways, &lt;code>&amp;lt;\rant&amp;gt;&lt;/code> and let&amp;rsquo;s move on to why I say what I&amp;rsquo;m saying.&lt;/p>
&lt;p>Recently, I&amp;rsquo;ve taken up a project in modelling the textual data on Reddit using
NLP techniques. There are, of course, many ways one count take this, but
something I was interested in was finding similarities between subreddits,
clustering comments, and visualizing these clusters somehow: what does Reddit
talk about on average? Of course, I turned to topic modelling and dimensionality
reduction.&lt;/p>
&lt;p>The techniques that I came across first were LDA (&lt;a href="https://en.wikipedia.org/wiki/Latent_Dirichlet_allocation">latent Dirichlet
allocation&lt;/a>) and
t-SNE (&lt;a href="https://en.wikipedia.org/wiki/T-distributed_stochastic_neighbor_embedding">t-distributed stochastic neighbor
embedding&lt;/a>).
Both techniques are well known and well documented, but I can&amp;rsquo;t say that using
them together is a popular choice of two techniques. However, there have been
some successes. For instance, &lt;code>ShuaiW&lt;/code> had some success with this method &lt;a href="https://web.archive.org/web/20171219104016/https://shuaiw.github.io/2016/12/22/topic-modeling-and-tsne-visualzation.html">when
using it the 20 newsgroups
dataset&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>;
some work done by Kagglers have &lt;a href="https://www.kaggle.com/ykhorramz/lda-and-t-sne-interactive-visualization">yielded reasonable
results&lt;/a>,
and &lt;a href="https://stats.stackexchange.com/questions/305356/plot-latent-dirichlet-allocation-output-using-t-sne">the StackExchange community doesn&amp;rsquo;t think its a ridiculous
idea&lt;/a>.&lt;/p>
&lt;p>The dataset that I applied this technique to was the &lt;a href="https://bigquery.cloud.google.com/dataset/fh-bigquery:reddit">Reddit dataset on Google
BigQuery&lt;/a>, which contains
data on all subreddits, posts and comments for as long as Reddit has been around.
I limited myself to the top 10 most active subreddits in December 2017 (the most
recent month for which we have data, at the time of writing), and chose 20 to be
the number of topics to model (any choice is as arbitrary as any other).&lt;/p>
&lt;p>I ran LDA and t-SNE exactly as Shuai described on &lt;a href="https://web.archive.org/web/20171219104016/https://shuaiw.github.io/2016/12/22/topic-modeling-and-tsne-visualzation.html">this blog
post&lt;/a>&lt;sup id="fnref1:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>,
except using the great &lt;a href="https://radimrehurek.com/gensim/">&lt;code>gensim&lt;/code>&lt;/a> library to
perform LDA, which was built with large corpora and efficient online algorithms
in mind. (Specifically, &lt;code>gensim&lt;/code> implements online variational inference with
the EM algorthm, instead of using MCMC-based algorithms, which &lt;code>lda&lt;/code> does. It
seems that variational Bayes scales better to very large corpora than collapsed
Gibbs sampling.)&lt;/p>
&lt;p>Here are the results:&lt;/p>
&lt;p>&lt;img src="https://www.georgeho.org/assets/images/lda-sucks.png" alt="LDA followed by t-SNE on the Reddit dataset">&lt;/p>
&lt;p>Horrible, right? Nowhere near the well-separated clusters that Shuai got with
the 20 newsgroups. In fact, the tiny little huddles of around 5 to 10 comments
are probably artifacts of the dimensionality reduction done by t-SNE, so those
might even just be noise! You might say that there are at least 3 very large
clusters, but even that&amp;rsquo;s bad news! If they&amp;rsquo;re clustered together, you would
hope that they have the same topics, and that&amp;rsquo;s definitely not the case here!
These large clusters tells us that a lot of comments have roughly the same topic
distribution (i.e. they&amp;rsquo;re close to each other in the high-dimensional
topic-space), but their dominant topics (i.e. the topic with greatest
probability) don&amp;rsquo;t end up being the same.&lt;/p>
&lt;p>By the way, t-SNE turns out to be &lt;a href="https://distill.pub/2016/misread-tsne/">a really devious dimensionality reduction
technique&lt;/a>, and you really need to
experiment with the perplexity values in order to use it properly. I used the
default &lt;code>perplexity=30&lt;/code> from sklearn for the previous plot, but I repeated the
visualizations for multiple other values and the results aren&amp;rsquo;t so hot either.
Note that I did these on a random subsample of 1000 comments, so as to reduce
compute time.&lt;/p>
&lt;figure>
&lt;a href="https://www.georgeho.org/assets/images/perplexity50.png">&lt;img src="https://www.georgeho.org/assets/images/perplexity50.png" alt="t-SNE with perplexity value of 50">&lt;/a>
&lt;a href="https://www.georgeho.org/assets/images/perplexity100.png">&lt;img src="https://www.georgeho.org/assets/images/perplexity100.png" alt="t-SNE with perplexity value of 100">&lt;/a>
&lt;figcaption>t-SNE with perplexity values of 50 and 100, respectively.&lt;/figcaption>
&lt;/figure>
&lt;p>So, what went wrong? There&amp;rsquo;s a &lt;a href="https://stackoverflow.com/questions/29786985/whats-the-disadvantage-of-lda-for-short-texts">nice StackOverflow
post&lt;/a>
that describes the problem well.&lt;/p>
&lt;p>Firstly, latent Dirichlet allocation and other probabilistic topic models are
very complex and flexible. While this means that they have very high variance
and low bias, it also means that they need a lot of data (or data with a decent
signal-to-noise ratio) for them to learn anything meaningful. Particularly for
LDA, which infers topics on a document-by-document basis, if there aren&amp;rsquo;t enough
words in a document, there simply isn&amp;rsquo;t enough data to infer a reliable topic
distribution for that document.&lt;/p>
&lt;p>Secondly, Reddit comments are by their nature very short and very-context
dependent, since they respond to a post, or another comment. So not only are
Reddit comments just short: it&amp;rsquo;s actually worse than that! They don&amp;rsquo;t even
discuss a certain topic coherently (by which I mean, they don&amp;rsquo;t necessarily use
words that pertain to what they&amp;rsquo;re talking about). I&amp;rsquo;ll give an example:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;#34;I&amp;#39;m basing my knowledge on the fact that I watched the fucking rock fall.&amp;#34;
&lt;/code>&lt;/pre>&lt;p>Now, stopwords compose a little less than half of this comment, and they would
be stripped before LDA even looks at it. But that aside, what is this comment
about? What does the rock falling mean? What knowledge is this user claiming?
It&amp;rsquo;s a very confusing comment, but probably made complete sense in the context
of the post it responded to and the comments that came before it. As it is,
however, its impossible for &lt;em>me&lt;/em> to figure out what topic this comment is about,
let alone an algorithm!&lt;/p>
&lt;p>Also, just to drive the point home, here are the top 10 words in each of the 20
topics that LDA came up with, on the same dataset as before:&lt;/p>
&lt;pre tabindex="0">&lt;code>Topic #0:
got just time day like went friend told didn kids
Topic #1:
just gt people say right doesn know law like government
Topic #2:
removed com https www https www tax money http watch news
Topic #3:
people don just like think really good know want things
Topic #4:
years time did great ago ve just work life damn
Topic #5:
movie like love just really school star movies film story
Topic #6:
like just fucking shit head car looks new makes going
Topic #7:
game team season year good win play teams playing best
Topic #8:
right thing yeah don think use internet ok water case
Topic #9:
going like work just need way want money free fuck
Topic #10:
better just play games make ve ll seen lol fun
Topic #11:
like don know did feel shit big man didn guys
Topic #12:
deleted fuck guy year old man amp year old state lmao
Topic #13:
sure believe trump wrong saying comment post mueller evidence gt
Topic #14:
gt yes https com good oh wikipedia org en wiki
Topic #15:
think like good 10 look point lebron just pretty net
Topic #16:
gt said fucking american agree trump thanks obama states did
Topic #17:
trump vote party republicans election moore president republican democrats won
Topic #18:
war world country israel countries china military like happy does
Topic #19:
reddit message askreddit post questions com reddit com subreddit compose message compose
&lt;/code>&lt;/pre>&lt;p>Now, it&amp;rsquo;s not entirely bad: topic 2 seems like its collecting the tokens from links
(I didn&amp;rsquo;t stopword those out, oops), topic 7 looks like its about football or
some other sport, 13 is probably about American politics, and 18 looks like
its about world news, etc.&lt;/p>
&lt;p>But almost all other topics are just collections of words: it&amp;rsquo;s not immediately
obvious to me what each topic represents.&lt;/p>
&lt;p>So yeah, there you have it, LDA really sucks sometimes.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Update (8/12/2018):&lt;/strong> In retrospect, I think that this whole blog post is
summarized well in the following tweet thread. Clustering algorithms will give
you clusters because that&amp;rsquo;s what they do, not because there actually &lt;em>are&lt;/em>
clusters. In this case, extremely short and context-dependent documents make it
hard to justify that there are topic clusters in the first place.&lt;/p>
&lt;blockquote class="twitter-tweet" data-lang="en">&lt;p lang="en" dir="ltr">Algorithms that have to report something will always report something, even if it&amp;#39;s a bad idea. Please do not use these algorithms unless you have principled reasons why there should be something. &lt;a href="https://t.co/kzxZiuBfmm">https://t.co/kzxZiuBfmm&lt;/a>&lt;/p>&amp;mdash; \mathfrak{Michael Betancourt} (@betanalpha) &lt;a href="https://twitter.com/betanalpha/status/1026619046626828288?ref_src=twsrc%5Etfw">August 7, 2018&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://github.com/ShuaiW">&lt;code>ShuaiW&lt;/code>&lt;/a> has since taken down his blog, so I
am linking to the Internet Archive of his blog post instead.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref1:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></entry><entry><title>~~Fruit~~ Loops and Learning - The LUPI Paradigm and SVM+</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/lupi/"/><id>https://www.georgeho.org/lupi/</id><updated>2018-01-30T00:00:00Z</updated><published>2018-01-30T00:00:00Z</published><content type="html">&lt;p>Here&amp;rsquo;s a short story you might know: you have a black box, whose name is
&lt;em>Machine Learning Algorithm&lt;/em>. It&amp;rsquo;s got two modes: training mode and testing
mode. You set it to training mode, and throw in a lot (sometimes &lt;em>a lot&lt;/em> a lot)
of ordered pairs $(x_i, y_i), 1 \leq i \leq l$. Here, the $x_i$ are called
the &lt;em>examples&lt;/em> and the $y_i$ are called the &lt;em>targets&lt;/em>. Then, you set it to
testing mode and throw in some more examples, for which you don&amp;rsquo;t have the
corresponding targets. You hope the $y_i$s that come out are in some sense
the “right” ones.&lt;/p>
&lt;p>Generally speaking, this is a parable of &lt;em>supervised learning&lt;/em>. However, Vapnik
(the inventor of the
&lt;a href="https://en.wikipedia.org/wiki/Support_vector_machine">SVM&lt;/a>) recently described
a new way to think about machine learning (e.g.
&lt;a href="http://jmlr.csail.mit.edu/papers/volume16/vapnik15b/vapnik15b.pdf">here&lt;/a>):
&lt;em>learning using privileged information&lt;/em>, or &lt;em>LUPI&lt;/em> for short.&lt;/p>
&lt;p>This post is meant to introduce the LUPI paradigm of machine learning to
people who are generally familiar with supervised learning and SVMs, and are
interested in seeing the math and intuition behind both things extended to the
LUPI paradigm.&lt;/p>
&lt;h2 id="what-is-lupi">What is LUPI?&lt;/h2>
&lt;p>The main idea is that instead of two-tuples $(x_i, y_i)$, the black box is fed
three-tuples $(x_i, x_i^{&lt;em>}, y_i) $, where the $x^{&lt;/em>}$s are the so-called
&lt;em>privileged information&lt;/em> that is only available during training, and not during
testing. The hope is that this information will train the model to better
generalize during the testing phase.&lt;/p>
&lt;p>Vapnik offers many examples in which LUPI can be applied in real life: in
bioinformatics and proteomics (where advanced biological models, which the
machine might not necessarily “understand”, serve as the privileged
information), in financial time series analysis (where future movements of the
time series are the unknown at prediction time, but are available
retrospectively), and in the classic MNIST dataset, where the images were
converted to a lower resolution, but each annotated with a “poetic description”
(which was available for the training data but not for the testing data).&lt;/p>
&lt;p>Vapnik&amp;rsquo;s team ran tests on well-known datasets in all three application areas
and found that his newly-developed LUPI methods performed noticeably better than
classical SVMs in both convergence time (i.e. the number of examples necessary
to achieve a certain degree of accuracy) and estimation of a good predictor
function. In fact, Vapnik&amp;rsquo;s proof-of-concept experiments are so whacky that
they actually &lt;a href="https://nautil.us/issue/6/secret-codes/teaching-me-softly">make for an entertaining read
&lt;/a>!&lt;/p>
&lt;h2 id="classical-svms-separable-and-non-separable-case">Classical SVMs (separable and non-separable case)&lt;/h2>
&lt;p>There are many ways of thinking about SVMs, but I think that the one that is
most instructive here is to think of them as solving the following optimization
problem:&lt;/p>
&lt;blockquote>
&lt;p>Minimize $ \frac{1}{2} |w|^2 $&lt;/p>
&lt;p>subject to $y_i [ w \cdot x_i + b ] \geq 1, 1 \leq i \leq l$.&lt;/p>
&lt;/blockquote>
&lt;p>Basically all this is saying is that we want to find the hyperplane that
separates our data by the maximum margin. More technically speaking, this finds
the parameters ($w$ and $b$) of the maximum margin hyperplane, with $l_2$
regularization.&lt;/p>
&lt;p>In the non-separable case, we concede that our hyperplane may not classify all
examples perfectly (or that it may not be desireable to do so: think of
overfitting), and so we introduce a so-called &lt;em>slack variable&lt;/em> $\xi_i \geq 0$
for each example $i$, which measures the severity of misclassification of that
example. With that, the optimization becomes:&lt;/p>
&lt;blockquote>
&lt;p>Minimize $\frac{1}{2} |w|^2 + C\sum_{i=1}^{l}{\xi_i}$&lt;/p>
&lt;p>subject to $y_i [ w \cdot x_i + b ] \geq 1 - \xi_i, \xi_i \geq 0, 1
\leq i \leq l$.&lt;/p>
&lt;/blockquote>
&lt;p>where $C$ is some regularization parameter.&lt;/p>
&lt;p>This says the same thing as the previous optimization problem, but now allows
points to be (a) classified properly ($\xi_i = 0$), (b) within the margin but
still classified properly ($0 &amp;lt; \xi_i &amp;lt; 1$), or (c) misclassified
($1 \leq \xi_i$).&lt;/p>
&lt;p>In both the separable and non-separable cases, the decision rule is simply
$\hat{y} = \text{sign}(w \cdot x + b)$.&lt;/p>
&lt;p>An important thing to note is that, in the separable case, the SVM uses $l$
examples to estimate the $n$ components of $w$, whereas in the nonseparable
case, the SVM uses $l$ examples to estimate $n+l$ parameters: the $n$
components of $w$ and $l$ values of slacks $\xi_i$. Thus, in the
non-separable case, the number of parameters to be estimated is always larger
than the number of examples: it does not matter here that most of slacks may be
equal to zero: the SVM still has to estimate all of them.&lt;/p>
&lt;p>The way both optimization problems are actually &lt;em>solved&lt;/em> is fairly involved (they
require &lt;a href="https://en.wikipedia.org/wiki/Lagrange_multiplier">Lagrange
multipliers&lt;/a>), but in terms
of getting an intuitive feel for how SVMs work, I think that examining the
optimization problems suffice!&lt;/p>
&lt;h2 id="what-is-svm">What is SVM+?&lt;/h2>
&lt;p>In his paper introducing the LUPI paradigm, Vapnik outlines &lt;em>SVM+&lt;/em>, a
modified form of the SVM that fits well into the LUPI paradigm, using privileged
information to improve performance. It should be emphasized that LUPI is a
paradigm - a way of thinking about machine learning - and not just a collection
of algorithms. SVM+ is just one technique that interoperates with the LUPI
paradigm.&lt;/p>
&lt;p>The innovation of the SVM+ algorithm is that is uses the privileged information
to estimate the slack variables. Given the training three-tuple $(x, x^{*},
y)$, we map $x$ to the feature space $Z$, and $x^{*}$ to a separate feature
space $Z^{*}$. Then, the decision rule is $\hat{y} = \text{sign}(w \cdot x +
b)$ and the slack variables are estimated by $\xi = w^{*} \cdot x^{*} +
b^{*}$.&lt;/p>
&lt;p>In order to find $w$, $b$, $w^{*}$ and $b^{*}$, we solve the following
optimization problem:&lt;/p>
&lt;blockquote>
&lt;p>Minimize $\frac{1}{2} (|w|^2 + \gamma |w^{*}|^2) +
C \sum_{i=1}^{l}{(w^{*} \cdot x_i^{*} + b^{*})}$&lt;/p>
&lt;p>subject to $y_i [ w \cdot x_i + b ] \geq 1 - (w^{*} \cdot x^{*} + b^{*}),
(w^{*} \cdot x^{*} + b^{*}) \geq 0, 1 \leq i \leq l$.&lt;/p>
&lt;/blockquote>
&lt;p>where $\gamma$ indicates the extent to which the slack estimation should be
regularized in comparison to the SVM. Notice how this optimization problem is
essentially identical to the non-separable classical SVM, except the slacks
$\xi_i$ are now estimated with $w^{*} \cdot x^{*} + b^{*}$.&lt;/p>
&lt;p>Again, the method of actually solving this optimization problem involves
Lagrange multipliers and quadratic programming, but I think the intuition is
captured in the optimization problem statement.&lt;/p>
&lt;h2 id="interpretation-of-svm">Interpretation of SVM+&lt;/h2>
&lt;p>The SVM+ has a very ready interpretation. Instead of a single feature space, it
has two: one in which the non-privileged information lives (where decisions are
made), and one in which the privileged information lives (where slack variables
are estimated).&lt;/p>
&lt;p>But what&amp;rsquo;s the point of this second feature space? How does it help us? Vapnik
terms this problem &lt;em>knowledge transfer&lt;/em>: it&amp;rsquo;s all well and good for us to learn
from the privileged information, but it&amp;rsquo;s all for naught if we can&amp;rsquo;t use this
newfound knowledge in the test phase.&lt;/p>
&lt;p>The way knowledge transfer is resolved here is by assuming that &lt;em>examples in the
training set that are hard to separate in the privileged space, are also hard to
separate in the regular space&lt;/em>. Therefore, we can use the privileged information
to obtain an estimate for the slack variables.&lt;/p>
&lt;p>Of course, SVMs are a technique with many possible interpretations, of which my
presentation (in terms of the optimization of $w$ and $b$) is just one. For
example, it&amp;rsquo;s possible to think of SVMs in terms of kernels functions, or as
linear classifiers minimizing hinge loss. In all cases, it&amp;rsquo;s possible and
worthwhile to understand that interpretation of SVMs, and how the LUPI paradigm
contributes to or extends that interpretation. I&amp;rsquo;m hoping to write a piece later
to explain these exact topics.&lt;/p>
&lt;p>Vapnik also puts a great emphasis on analyzing SVM+ based on its statistical
learning theoretic properties (in particular, analyzing its rate of convergence
via the &lt;a href="https://en.wikipedia.org/wiki/VC_dimension">VC dimension&lt;/a>). Vapnik was
one of the main pioneers behind statistical learning theory, and has written an
&lt;a href="https://www.amazon.com/Statistical-Learning-Theory-Vladimir-Vapnik/dp/0471030031">entire
book&lt;/a>
on this stuff &lt;del>which I have not read&lt;/del>, so I&amp;rsquo;ll leave that part aside for now. I
hope to understand this stuff one day.&lt;/p>
&lt;h2 id="implementation-of-svm">Implementation of SVM+&lt;/h2>
&lt;p>There&amp;rsquo;s just one catch: SVM+ is actually an fairly inefficient algorithm, and
definitely will not scale to large data sets. What&amp;rsquo;s so bad about it? &lt;em>It has
$n$ training examples but $2n$ variables to estimate.&lt;/em> This is twice as many
variables to estimate as the standard formulation of the &lt;a href="https://en.wikipedia.org/wiki/Support_vector_machine#Computing_the_SVM_classifier">vanilla
SVM&lt;/a>.
This isn&amp;rsquo;t something that we can patch: the problem is inherent to the
Lagrangian dual formulation that Vapnik and Vashist proposed in 1995.&lt;/p>
&lt;p>Even worse, the optimization problem has constraints that are very different
from those of the standard SVM. In essence, this means that efficient libraries
out-of-the-box solvers for the standard SVM (e.g.
&lt;a href="https://www.csie.ntu.edu.tw/~cjlin/libsvm/">LIBSVM&lt;/a> and
&lt;a href="https://www.csie.ntu.edu.tw/~cjlin/liblinear/">LIBLINEAR&lt;/a>) can&amp;rsquo;t be used to
train an SVM+ model.&lt;/p>
&lt;p>Luckily, &lt;a href="https://www.researchgate.net/publication/301880839_Simple_and_Efficient_Learning_using_Privileged_Information">a recent paper by Xu et
al.&lt;/a>
describes a neat mathematical trick to implement SVM+ in a simple and efficient
way. With this amendment, the authors rechristen the algorithm as SVM2+.
Essentially, instead of using the hinge loss when training SVM+, we will instead
use the &lt;em>squared&lt;/em> hinge loss. It turns out that changing the loss function in
this way leads to a tiny miracle.&lt;/p>
&lt;p>This (re)formulation of SVM+ becomes &lt;em>identical&lt;/em> to that of the standard SVM,
except we replace the Gram matrix (a.k.a. kernel matrix) $\bf K$ by $\bf K +
\bf Q_\lambda \odot (\bf y y^t)$, where&lt;/p>
&lt;ul>
&lt;li>$\bf y$ is the target vector&lt;/li>
&lt;li>$\odot$ denotes the Hadamard product&lt;/li>
&lt;li>$\bf{Q_\lambda}$ is given by $Q_\lambda = \frac{1}{\lambda} (\tilde{K}
(\frac{\lambda}{C} I_n + \tilde{K})^{-1} \tilde{K})$, and&lt;/li>
&lt;li>$\bf \tilde{K}$ is the Gram matrix formed by the privileged information&lt;/li>
&lt;/ul>
&lt;p>So by replacing the hinge loss with the squared hinge loss, the SVM+ formulation
can now be solved with existing libraries!&lt;/p>
&lt;h2 id="extensions-to-svm">Extensions to SVM+&lt;/h2>
&lt;p>In his paper, Vapnik makes it clear that LUPI is a very general and abstract
paradigm, and as such there is plenty of room for creativity and innovation -
not just in researching and developing new LUPI methods and algorithms, but also
in implementing and applying them. It is unknown how to best go about supplying
privileged information so as to get good performance. How should the data be
feature engineered? How much signal should be in the privileged information?
These are all open questions.&lt;/p>
&lt;p>Vapnik himself opens up three avenues to extend the SVM+ algorithm:&lt;/p>
&lt;ol>
&lt;li>&lt;em>a mixture model of slacks:&lt;/em> when slacks are estimated by a mixture of a
smooth function and some prior&lt;/li>
&lt;li>&lt;em>a model where privileged information is available only for a part of the
training data:&lt;/em> where we can only supply privileged information on a small
subset of the training examples&lt;/li>
&lt;li>&lt;em>multiple-space privileged information:&lt;/em> where the privileged information we
can supply do not all share the same features&lt;/li>
&lt;/ol>
&lt;p>Clearly, there&amp;rsquo;s a lot of potential in the LUPI paradigm, as well as a lot of
reasons to be skeptical. It&amp;rsquo;s very much a nascent perspective of machine
learning, so I&amp;rsquo;m interested in keeping an eye on it going forward. I&amp;rsquo;m hoping
to write more posts on LUPI in the future!&lt;/p></content></entry><entry><title>Linear Discriminant Analysis for Starters</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/lda/"/><id>https://www.georgeho.org/lda/</id><updated>2017-12-30T00:00:00Z</updated><published>2017-12-30T00:00:00Z</published><content type="html">&lt;p>&lt;em>Linear discriminant analysis&lt;/em> (commonly abbreviated to LDA, and not to be
confused with &lt;a href="https://en.wikipedia.org/wiki/Latent_Dirichlet_allocation">the other
LDA&lt;/a>) is a very
common dimensionality reduction technique for classification problems. However,
that&amp;rsquo;s something of an understatement: it does so much more than “just”
dimensionality reduction.&lt;/p>
&lt;p>In plain English, if you have high-dimensional data (i.e. a large number of
features) from which you wish to classify observations, LDA will help you
transform your data so as to make the classes as distinct as possible. More
rigorously, LDA will find the linear projection of your data into a
lower-dimensional subspace that optimizes some measure of class separation. The
dimension of this subspace is necessarily strictly less than the number of
classes.&lt;/p>
&lt;p>This separation-maximizing property of LDA makes it so good at its job that it&amp;rsquo;s
sometimes considered a classification algorithm in and of itself, which leads to
some confusion. &lt;em>Linear discriminant analysis&lt;/em> is a form of dimensionality
reduction, but with a few extra assumptions, it can be turned into a classifier.
(Avoiding these assumptions gives its relative, &lt;em>quadratic discriminant
analysis&lt;/em>, but more on that later). Somewhat confusingly, some authors call the
dimensionality reduction technique “discriminant analysis”, and only prepend the
“linear” once we begin classifying. I actually like this naming convention more
(it tracks the mathematical assumptions a bit better, I think), but most people
nowadays call the entire technique “LDA”, so that&amp;rsquo;s what I&amp;rsquo;ll call it.&lt;/p>
&lt;p>The goal of this post is to give a comprehensive introduction to, and
explanation of, LDA. I&amp;rsquo;ll look at LDA in three ways:&lt;/p>
&lt;ol>
&lt;li>LDA as an algorithm: what does it do, and how does it do it?&lt;/li>
&lt;li>LDA as a theorem: a mathematical derivation of LDA&lt;/li>
&lt;li>LDA as a machine learning technique: practical considerations when using LDA&lt;/li>
&lt;/ol>
&lt;p>This is a lot for one post, but my hope is that there&amp;rsquo;s something in here for
everyone.&lt;/p>
&lt;div>
&lt;h2>Contents&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#lda-as-an-algorithm">LDA as an Algorithm&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#problem-statement">Problem statement&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#lda-as-a-theorem">LDA as a Theorem&lt;/a>&lt;/li>
&lt;li>&lt;a href="#lda-as-a-machine-learning-technique">LDA as a Machine Learning Technique&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#regularization-aka-shrinkage">Regularization (a.k.a. shrinkage)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#lda-as-a-classifier">LDA as a classifier&lt;/a>&lt;/li>
&lt;li>&lt;a href="#close-relatives-pca-qda-anova">Close relatives: PCA, QDA, ANOVA&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;h2 id="lda-as-an-algorithm">LDA as an Algorithm&lt;/h2>
&lt;h3 id="problem-statement">Problem statement&lt;/h3>
&lt;p>Before we dive into LDA, it&amp;rsquo;s good to get an intuitive grasp of what LDA
tries to accomplish.&lt;/p>
&lt;p>Suppose that:&lt;/p>
&lt;ol>
&lt;li>You have very high-dimensional data, and that&lt;/li>
&lt;li>You are dealing with a classification problem&lt;/li>
&lt;/ol>
&lt;p>This could mean that the number of features is greater than the number of
observations, or it could mean that you suspect there are noisy features that
contain little information, or anything in between.&lt;/p>
&lt;p>Given that this is the problem at hand, you wish to accomplish two things:&lt;/p>
&lt;ol>
&lt;li>Reduce the number of features (i.e. reduce the dimensionality of your feature
space), and&lt;/li>
&lt;li>Preserve (or even increase!) the “distinguishability” of your classes or the
“separatedness” of the classes in your feature space.&lt;/li>
&lt;/ol>
&lt;p>This is the problem that LDA attempts to solve. It should be fairly obvious why
this problem might be worth solving.&lt;/p>
&lt;p>To judiciously appropriate a term from signal processing, we are interested in
increasing the signal-to-noise ratio of our data, by both extracting or
synthesizing features that are useful in classifying our data (amplifying our
signal), and throwing out the features that are not as useful (attenuating our
noise).&lt;/p>
&lt;p>Below is simple illustration I made, inspired by &lt;a href="https://www.quora.com/Can-you-explain-the-comparison-between-principal-component-analysis-and-linear-discriminant-analysis-in-dimensionality-reduction-with-MATLAB-code-Which-one-is-more-efficient">Sebastian
Raschka&lt;/a>
that may help our intuition about the problem:&lt;/p>
&lt;p>&lt;img src="https://www.georgeho.org/assets/images/lda-pic.png" alt="Projections of two-dimensional data (in two clusters) onto the x and y axes">&lt;/p>
&lt;p>A couple of points to make:&lt;/p>
&lt;ul>
&lt;li>LD1 and LD2 are among the projections that LDA would consider. In reality, LDA
would consider &lt;em>all possible&lt;/em> projections, not just those along the x and y
axes.&lt;/li>
&lt;li>LD1 is the one that LDA would actually come up with: this projection gives the
best “separation” of the two classes.&lt;/li>
&lt;li>LD2 is a horrible projection by this metric: both classes get horribly
overlapped… (this actually relates to PCA, but more on that later)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>UPDATE:&lt;/strong> For another illustration, Rahul Sangole made a simple but great
interactive visualization of LDA
&lt;a href="https://rsangole.shinyapps.io/LDA_Visual/">here&lt;/a> using
&lt;a href="https://shiny.rstudio.com/">Shiny&lt;/a>.&lt;/p>
&lt;h3 id="solution">Solution&lt;/h3>
&lt;p>First, some definitions:&lt;/p>
&lt;p>Let:&lt;/p>
&lt;ul>
&lt;li>$n$ be the number of classes&lt;/li>
&lt;li>$\mu$ be the mean of all observations&lt;/li>
&lt;li>$N_i$ be the number of observations in the $i$th class&lt;/li>
&lt;li>$\mu_i$ be the mean of the $i$th class&lt;/li>
&lt;li>$\Sigma_i$ be the &lt;a href="https://en.wikipedia.org/wiki/Scatter_matrix">scatter
matrix&lt;/a> of the $i$th class&lt;/li>
&lt;/ul>
&lt;p>Now, define $S_W$ to be the &lt;em>within-class scatter matrix&lt;/em>, given by&lt;/p>
&lt;p>$$
\begin{align*}
S_W = \sum_{i=1}^{n}{\Sigma_i}
\end{align*}
$$&lt;/p>
&lt;p>and define $S_B$ to be the &lt;em>between-class scatter matrix&lt;/em>, given by&lt;/p>
&lt;p>$$
\begin{align*}
S_B = \sum_{i=1}^{n}{N_i (\mu_i - \mu) (\mu_i - \mu)^T}
\end{align*}
$$&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Diagonalizable_matrix">Diagonalize&lt;/a> $S_W^{-1}
S_B$ to get its eigenvalues and eigenvectors.&lt;/p>
&lt;p>Pick the $k$ largest eigenvalues, and their associated eigenvectors. We will
project our observations onto the subspace spanned by these vectors.&lt;/p>
&lt;p>Concretely, what this means is that we form the matrix $A$, whose columns are the
$k$ eigenvectors chosen above. $W$ will allow us to transform our
observations into the new subspace via the equation $y = A^T x$, where $y$ is
our transformed observation, and $x$ is our original observation.&lt;/p>
&lt;p>And that&amp;rsquo;s it!&lt;/p>
&lt;p>For a more detailed and intuitive explanation of the LDA “recipe”, see
&lt;a href="http://sebastianraschka.com/Articles/2014_python_lda.html">Sebastian Raschka&amp;rsquo;s blog post on
LDA&lt;/a>.&lt;/p>
&lt;h2 id="lda-as-a-theorem">LDA as a Theorem&lt;/h2>
&lt;p>&lt;strong>Sketch of Derivation:&lt;/strong>&lt;/p>
&lt;p>In order to maximize class separability, we need some way of measuring it as a
number. This number should be bigger when the between-class scatter is bigger,
and smaller when the within-class scatter is larger. There are many such
formulas/numbers that have this property: &lt;a href="https://www.elsevier.com/books/introduction-to-statistical-pattern-recognition/fukunaga/978-0-08-047865-4">Fukunaga&amp;rsquo;s &lt;em>Introduction to
Statistical Pattern
Recognition&lt;/em>&lt;/a>
considers no less than four! Here, we&amp;rsquo;ll concern ourselves with just one:&lt;/p>
&lt;p>$$ J_1 = tr(S_{WY}^{-1} S_{BY}) $$&lt;/p>
&lt;p>where I denote the within and between-class scatter matrices of the projection
vector $Y$ by $S_{WY}$ and $S_{BY}$, to avoid confusion with the
corresponding matrices for the projected vector $X$.&lt;/p>
&lt;p>Now, a standard result from probability is that for any random variable $X$
and matrix $A$, we have $cov(A^T X) = A^T cov(X) A$. We&amp;rsquo;ll apply this
result to our projection $y = A^T x$. It follows that&lt;/p>
&lt;p>$$ S_{WY} = A^T S_{WX} A $$&lt;/p>
&lt;p>and&lt;/p>
&lt;p>$$ S_{BY} = A^T S_{BX} A $$&lt;/p>
&lt;p>where $S_{BX}$ and $S_{BY}$ are the between-class scatter matrices, and
$S_{WX}$ and $S_{WY}$ are the within-class scatter matrices, for $X$
and its projection $Y$, respectively.&lt;/p>
&lt;p>It&amp;rsquo;s now a simple matter to write $J_1$ in terms of $A$, and maximize
$J_1$. Without going into the details, we set $\frac{\partial J_1}{\partial
A} = 0$ (whatever that means), and use the fact that &lt;a href="https://math.stackexchange.com/questions/546155/proof-that-the-trace-of-a-matrix-is-the-sum-of-its-eigenvalues">the trace of a matrix is
the sum of its
eigenvalues&lt;/a>.&lt;/p>
&lt;p>I don&amp;rsquo;t want to go into the weeds with this here, but if you really want to see
the algebra, Fukunaga is a great resource. The end result, however, is the same
condition on the eigenvalues and eigenvectors as stated above: in other words,
the optimization gives us LDA as presented.&lt;/p>
&lt;p>There&amp;rsquo;s one more quirk of LDA that&amp;rsquo;s very much worth knowing. Suppose you have
10 classes, and you run LDA. It turns out that the &lt;em>maximum&lt;/em> number of features
LDA can give you is one less than the number of class, so in this case, 9!&lt;/p>
&lt;p>&lt;strong>Proposition:&lt;/strong> $S_W^{-1} S_B$ has at most $n-1$ non-zero eigenvalues, which
implies that LDA is must reduce the dimension to &lt;em>at least&lt;/em> $n-1$.&lt;/p>
&lt;p>To prove this, we first need a lemma.&lt;/p>
&lt;p>&lt;strong>Lemma:&lt;/strong> Suppose ${v_i}&lt;em>{i=1}^{n}$ is a set of linearly dependent vectors, and
let $\alpha_i$ be $n$ coefficients. Then, $M = \sum&lt;/em>{i=1}^{n}{\alpha_i v_i
v_i^{T}}$, a linear combination of outer products of the vectors with
themselves, is rank deficient.&lt;/p>
&lt;p>&lt;strong>Proof:&lt;/strong> The row space of $M$ is generated by the set of vectors ${v_1, v_2,
&amp;hellip;, v_n}$. However, because this set of vectors is linearly dependent, it must
span a vector space of dimension strictly less than $n$, or in other words
less than or equal to $n-1$. But the dimension of the row space is precisely
the rank of the matrix $M$. Thus, $rank(M) \leq n-1$, as desired.&lt;/p>
&lt;p>With the lemma, we&amp;rsquo;re now ready to prove our proposition.&lt;/p>
&lt;p>&lt;strong>Proof:&lt;/strong> We have that&lt;/p>
&lt;p>$$
\begin{align*}
\frac{1}{n} \sum_{i=1}^{n}{\mu_i} = \mu \implies \sum_{i=1}^{n}{\mu_i-\mu} = 0
\end{align*}
$$&lt;/p>
&lt;p>So ${\mu_i-\mu}_{i=1}^{n}$ is a linearly dependent set. Applying our lemma, we
see that&lt;/p>
&lt;p>$$ S_B = \sum_{i=1}^{n}{N_i (\mu_i-\mu)(\mu_i-\mu)^{T}} $$&lt;/p>
&lt;p>must be rank deficient. Thus, $rank(S_W) \leq n-1$. Now, $rank(AB) \leq
rank(A)rank(B)$, so&lt;/p>
&lt;p>$$
\begin{align*}
rank(S_W^{-1}S_B) \leq \min{(rank(S_W^{-1}), rank(S_B))} = n-1
\end{align*}
$$&lt;/p>
&lt;p>as desired.&lt;/p>
&lt;h2 id="lda-as-a-machine-learning-technique">LDA as a Machine Learning Technique&lt;/h2>
&lt;p>OK so we&amp;rsquo;re done with the math, but how is LDA actually used in practice? One of
the easiest ways is to look at how LDA is actually implemented in the real
world. &lt;code>scikit-learn&lt;/code> has &lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.html#sklearn.discriminant_analysis.LinearDiscriminantAnalysis">a very well-documented implementation of
LDA&lt;/a>:
I find that reading the docs is a great way to learn stuff.&lt;/p>
&lt;p>Below are a few miscellaneous comments on practical considerations when using
LDA.&lt;/p>
&lt;h3 id="regularization-aka-shrinkage">Regularization (a.k.a. shrinkage)&lt;/h3>
&lt;p>&lt;code>scikit-learn&lt;/code>&amp;rsquo;s implementation of LDA has an interesting optional parameter:
&lt;code>shrinkage&lt;/code>. What&amp;rsquo;s that about?&lt;/p>
&lt;p>&lt;a href="https://stats.stackexchange.com/questions/106121/does-it-make-sense-to-combine-pca-and-lda/109810#109810">Here&amp;rsquo;s a wonderful Cross Validated
post&lt;/a>
on how LDA can introduce overfitting. In essence, matrix inversion is an
extremely sensitive operation (in that small changes in the matrix may lead to
large changes in its inverse, so that even a tiny bit of noise will be amplified
upon inverting the matrix), and so unless the estimate of the within-class
scatter matrix $S_W$ is very good, its inversion is likely to introduce
overfitting.&lt;/p>
&lt;p>One way to combat that is through regularizing LDA. It basically replaces
$S_W$ with $(1-t)S_W + tI$, where $I$ is the identity matrix, and $t$ is
the &lt;em>regularization parameter&lt;/em>, or the &lt;em>shrinkage constant&lt;/em>. That&amp;rsquo;s what
&lt;code>scikit&lt;/code>&amp;rsquo;s &lt;code>shrinkage&lt;/code> parameter is: it&amp;rsquo;s $t$.&lt;/p>
&lt;p>If you&amp;rsquo;re interested in &lt;em>why&lt;/em> this linear combination of the within-class
scatter and the identity give such a well-conditioned estimate of $S_W$, check
out &lt;a href="https://www.semanticscholar.org/paper/A-well-conditioned-estimator-for-large-dimensional-Ledoit-Wolf/23d8219db1aff006b41007effc696fca6fbcabcf">the original paper by Ledoit and
Wolf&lt;/a>.
Their original motivation was in financial portfolio optimization, so they&amp;rsquo;ve
also authored several other papers
(&lt;a href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=433840&amp;amp;rec=1&amp;amp;srcabs=290916&amp;amp;alg=7&amp;amp;pos=6">here&lt;/a>
and
&lt;a href="https://www.semanticscholar.org/paper/A-well-conditioned-estimator-for-large-dimensional-Ledoit-Wolf/23d8219db1aff006b41007effc696fca6fbcabcf">here&lt;/a>)
that go into the more financial details. That needn&amp;rsquo;t concern us though:
covariance matrices are literally everywhere.&lt;/p>
&lt;p>For an illustration of this, &lt;code>amoeba&lt;/code>&amp;rsquo;s post on Cross Validated gives a good
example of LDA overfitting, and how regularization can help combat that.&lt;/p>
&lt;h3 id="lda-as-a-classifier">LDA as a classifier&lt;/h3>
&lt;p>We&amp;rsquo;ve talked a lot about how LDA is a dimensionality reduction technique. But in
addition to it, you can make two extra assumptions, and LDA becomes a very
robust classifier as well! Here they are:&lt;/p>
&lt;ol>
&lt;li>Assume that the class conditional distributions are Gaussian, and&lt;/li>
&lt;li>Assume that these Gaussians have the same covariance matrix (a.k.a.
assume &lt;a href="https://en.wikipedia.org/wiki/Homoscedasticity">homoskedasticity&lt;/a>)&lt;/li>
&lt;/ol>
&lt;p>Now, &lt;em>how&lt;/em> LDA acts as a classifier is a bit complicated: the problem is solved
fairly easily if there are only two classes. In this case, the optimal Bayesian
solution is to classify the observation depending on whether the log of the
likelihood ratio is less than or greater than some threshold. This turns out to
be a simple dot product: $\vec{w} \cdot \vec{x} &amp;gt; c$, where $\vec{w} =
\Sigma^{-1} (\vec{\mu_1} - \vec{\mu_2})$. &lt;a href="https://en.wikipedia.org/wiki/Linear_discriminant_analysis#LDA_for_two_classes">Wikipedia has a good derivation of
this&lt;/a>.&lt;/p>
&lt;p>There isn&amp;rsquo;t really a nice dot-product solution for the multiclass case. So,
what&amp;rsquo;s commonly done is to take a “one-against-the-rest” approach, in which
there are $k$ binary classifiers, one for each of the $k$ classes. Another
common technique is to take a pairwise approach, in which there are $k(k-1)/2$
classifiers, one for each pair of classes. In either case, the outputs of all
the classifiers are combined in some way to give the final classification.&lt;/p>
&lt;h3 id="close-relatives-pca-qda-anova">Close relatives: PCA, QDA, ANOVA&lt;/h3>
&lt;p>LDA is similar to a lot of other techniques, and the fact that they all go by
acronyms doesn&amp;rsquo;t do anyone a favor. My goal here isn&amp;rsquo;t to introduce or explain
these various techniques, but rather point out their differences.&lt;/p>
&lt;p>&lt;em>1) Principal components analysis (PCA):&lt;/em>&lt;/p>
&lt;p>LDA is very similar to &lt;a href="http://setosa.io/ev/principal-component-analysis">PCA&lt;/a>:
in fact, the question posted in the Cross Validated post above was actually
about whether or not it would make sense to perform PCA followed by LDA.&lt;/p>
&lt;p>There is a crucial difference between the two techniques, though. PCA tries to
find the axes with &lt;em>maximum variance&lt;/em> for the whole data set, whereas LDA tries
to find the axes for best &lt;em>class separability&lt;/em>.&lt;/p>
&lt;p>&lt;img src="https://www.georgeho.org/assets/images/lda-pic.png" alt="Projections of two-dimensional data (in two clusters) onto the x and y axes">&lt;/p>
&lt;p>Going back to the illustration from before (reproduced above), it&amp;rsquo;s not hard to
see that PCA would give us LD2, whereas LDA would give us LD1. This makes the
main difference between PCA and LDA painfully obvious: just because a feature
has a high variance, doesn&amp;rsquo;t mean that it&amp;rsquo;s predictive of the classes!&lt;/p>
&lt;p>&lt;em>2) Quadratic discriminant analysis (QDA):&lt;/em>&lt;/p>
&lt;p>QDA is a generalization of LDA as a classifer. As mentioned above, LDA must
assume that the class contidtional distributions are Gaussian with the same
covariance matrix, if we want it to do any classification for us.&lt;/p>
&lt;p>QDA doesn&amp;rsquo;t make this homoskedasticity assumption (assumption number 2 above),
and attempts to estimate the covariance of all classes. While this might seem
like a more robust algorithm (fewer assumptions! Occam&amp;rsquo;s razor!), this means
there is a much larger number of parameters to estimate. In fact, the number of
parameters grows quadratically with the number of classes! So unless you can
guarantee that your covariance estimates are reliable, you might not want to use
QDA.&lt;/p>
&lt;p>After all of this, there might be some confusion about the relationship between
LDA, QDA, what&amp;rsquo;s for dimensionality reduction, what&amp;rsquo;s for classification, etc.
&lt;a href="https://stats.stackexchange.com/questions/71489/three-versions-of-discriminant-analysis-differences-and-how-to-use-them/71571#71571">This CrossValidated
post&lt;/a>
and everything that it links to, might help clear things up.&lt;/p>
&lt;p>&lt;em>3) Analysis of variance (ANOVA):&lt;/em>&lt;/p>
&lt;p>LDA and &lt;a href="https://en.wikipedia.org/wiki/Analysis_of_variance">ANOVA&lt;/a> seem to have
similar aims: both try to “decompose” an observed variable into several
explanatory/discriminatory variables. However, there is an important difference
that &lt;a href="https://en.wikipedia.org/wiki/Linear_discriminant_analysis">the Wikipedia article on
LDA&lt;/a> puts very
succinctly (my emphases):&lt;/p>
&lt;blockquote>
&lt;p>LDA is closely related to analysis of variance (ANOVA) and regression
analysis, which also attempt to express one dependent variable as a linear
combination of other features or measurements. However, ANOVA uses
&lt;strong>categorical&lt;/strong> independent variables and a &lt;strong>continuous&lt;/strong> dependent variable,
whereas discriminant analysis has &lt;strong>continuous&lt;/strong> independent variables and a
&lt;strong>categorical&lt;/strong> dependent variable (i.e. the class label).&lt;/p>
&lt;/blockquote></content></entry><entry><title>Portfolio Risk Analytics and Performance Attribution with Pyfolio</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/pyfolio/"/><id>https://www.georgeho.org/pyfolio/</id><updated>2017-12-16T00:00:00Z</updated><published>2017-12-16T00:00:00Z</published><content type="html">&lt;p>I was lucky enough to have the chance to intern at
&lt;a href="https://www.quantopian.com/">Quantopian&lt;/a> this summer. During that time I
contributed some exciting stuff to their open-source portfolio analytics engine,
&lt;a href="https://github.com/quantopian/pyfolio">&lt;code>pyfolio&lt;/code>&lt;/a>, and learnt a truckload of
stuff while doing it! In this blog post, I&amp;rsquo;ll describe and walk through two of
the new features that I authored: the risk and performance attribution tear
sheets.&lt;/p>
&lt;center>
&lt;img
src="https://www.georgeho.org/assets/images/pyfolio-logo.png"
alt="Pyfolio logo">
&lt;/center>
&lt;h2 id="risk-analytics">Risk Analytics&lt;/h2>
&lt;p>A well-known truth of algorithmic trading is that it&amp;rsquo;s insufficient to merely
maximize the returns of your algorithm: you must also do so while minimizing the
risk it takes on board. This idea is probably most famously codified in the
&lt;a href="https://en.wikipedia.org/wiki/Sharpe_ratio#Definition">Sharpe ratio&lt;/a>, which
divides by the volatility of the returns stream in order to give a measure of
the “risk-adjusted returns”.&lt;/p>
&lt;p>However, the volatility of returns is a rather poor proxy for the amount of
“risk” that an algorithm takes on. What if our algo loaded all of its money in
the real estate sector? What if the algo shorted extremely large-cap stocks?
What if half of our portfolio is in illiquid, impossible-to-exit positions?&lt;/p>
&lt;p>These are all “risky” behavior for an algorithm to have, and we&amp;rsquo;d like to know
about and understand this kind of behavior before we seriously consider investing
money in the algo. However, these formulations of risk are neither captured nor
quantified by the volatility of returns (as in the Sharpe ratio). Finally,
there is no easy, free, open-source way to get this sort of analysis.&lt;/p>
&lt;p>Enter &lt;code>pyfolio&lt;/code>&amp;rsquo;s new risk tear sheet! It addresses all the problems outlined
above, and more. Let&amp;rsquo;s jump right in with an example.&lt;/p>
&lt;p>&lt;img src="https://www.georgeho.org/assets/images/pyfolio-risk-tear-sheet.png" alt="Example risk tear sheet">&lt;/p>
&lt;p>(This example risk tear sheet came from the &lt;a href="https://github.com/quantopian/pyfolio/pull/391">original pull
request&lt;/a>, and may therefore be
out of date)&lt;/p>
&lt;p>The first 4 plots show the exposure to common style factors: specifically, the
size of the company (natural log of the market cap), mean reversion (measured
by the &lt;a href="http://www.investopedia.com/terms/m/macd.asp">MACD Signal&lt;/a>), long-term
momentum, and volatility.
A style factor is best explained with examples: mean reversion, momentum,
volatility and the Fama-French canonical factors (SMB, HML, UMD) are all
examples of style factors. They are factors that indicate broad market trends
(instead of being characteristic to individual stocks, like sectors or market
caps) and characterize a particular &lt;em>style&lt;/em> of investing (e.g. mean reversion,
trend-following strategies, etc.).
The analysis is not limited to 4 style factors, though: &lt;code>pyfolio&lt;/code> will handle
as many as you pass in (but see below for a possible complication). As we can
see, the algorithm has a significant exposure to the MACD signal, which may or
may not worry us. For instance, it wouldn&amp;rsquo;t worry us if we knew that it was a
mean-reversion algo, but we would raise some eyebrows if it was something
else… perhaps the author &lt;em>wanted&lt;/em> to write a wonderful, event-driven
sentiment algo, but inadvertently &lt;em>ended up&lt;/em> writing a mean reversion algo!
One important caveat here is that &lt;code>pyfolio&lt;/code> requires you to supply your own
style factors, for every stock in your universe. This is an unfortunately large
complication for the average user, as it would require you to formulate and
implement your own risk model — I explain this in greater detail below.&lt;/p>
&lt;p>The next 3 plots show the exposures to sectors. This first plot shows us how much
the algorithm longed or shorted a specific sector: above the x-axis if it
longed, and below if it shorted. The second plot simply shows the gross exposure
to each sector: taking the absolute value of the positions before normalizing.
The last plot shows the net exposure to each sector: taking the long position
&lt;em>less the short position&lt;/em> before normalizing. This particular algo looks
beautiful: it is equally exposed to all sectors, and not overly exposed to any
one of them. Evidently, this algo must be taking account its sector exposures
in its trading logic: given what we know from above, perhaps it is longing the
top 10 most “mean reverting” stocks in each sector at the start of every
week… This analysis requires no addition data other than your algorithm&amp;rsquo;s
positions: you can supply your own sectors if you like, but if not, the analysis
will default to the &lt;a href="https://www.quantopian.com/help/fundamentals#asset-classification">Morningstar sector
mappings&lt;/a>
(specifically, the &lt;code>morningstar_sector_code&lt;/code> field), available for free on the
Quantopian platform.&lt;/p>
&lt;p>The next 3 plots show the exposures to market caps. In every other respect, it
is identical to the previous 3 plots. These plots look fairly reasonable: most
algos spend most of their positions in large and mega cap names, and have almost
no positions in micro cap stocks. (Quantopian actually discourages investing in
micro cap stocks by pushing users towards using the &lt;a href="https://www.quantopian.com/posts/the-q500us-and-q1500us">Q500 or
Q1500&lt;/a> as a tradeable
universe). This analysis uses &lt;a href="https://www.quantopian.com/help/fundamentals#valuation">Morningstar&amp;rsquo;s &lt;code>market cap&lt;/code>
field&lt;/a>.&lt;/p>
&lt;p>The last 2 plots show the portfolio&amp;rsquo;s exposure to illiquidity (or low trading
volume). This one is a bit trickier to understand: every the end of every day,
we take the number of shares held in each position and divide that by the
total volume. That gives us a number per position per day. We find the 10th
percentile of this number (i.e. the most illiquid) and plot that as a time
series. So it is a measure of how exposed our portfolio is to illiquid stocks.
The first plot shows the illiquid exposure in our long and short positions,
respectively: that is, it takes the number of shares held in each long/short
position, and divides it by the daily total volume. The second plot shows the
gross illiquid exposure, taking the absolute value of positions before
dividing. So it looks like for this particular algo, for the 10% most illiquid
stock in our portfolio, our position accounts for around 0.2–0.6% (&lt;em>not&lt;/em>
0.002–0.006%!) of market volume, on any given day. That&amp;rsquo;s an acceptably low
number! This analysis obviously requires daily volume data per stock, but that&amp;rsquo;s
freely available on Quantopian&amp;rsquo;s platform.&lt;/p>
&lt;p>That&amp;rsquo;s it for the risk tear sheet! There are some more cool ideas in the
works (there always are), such as including plots to show a portfolio&amp;rsquo;s
concentration risk exposure, or a portfolio&amp;rsquo;s exposure to penny stocks. If you
have any suggestions, please file a &lt;a href="https://github.com/quantopian/pyfolio/issues">new GitHub
issue&lt;/a> to let the dev team know!
Pyfolio is open-source and under active development, and outside contributions
are always loved and appreciated. Alternatively, if you just want to find out
more about the nuts and bolts (i.e. the math and the data) that goes into risk
tear sheet, you can dig around &lt;a href="https://github.com/quantopian/pyfolio/tree/master/pyfolio">the source code
itself&lt;/a>!&lt;/p>
&lt;h2 id="risk-models-and-performance-attribution">Risk Models and Performance Attribution&lt;/h2>
&lt;p>There are two things in the discussion of the risk tear sheet that are worth
talking about in further detail:&lt;/p>
&lt;ol>
&lt;li>I mentioned how the computation of style factor exposures (i.e. the first 4
plots) required your own “risk model” (whatever that is), and&lt;/li>
&lt;li>It was nice that we can guess at the inner workings of the algo, just by
seeing its exposure to common factors. E.g., I guessed that the example algo
was a sector-neutral mean reversion algo, because it was equally exposed to
all 11 sectors, and had a high (in magnitude) exposure to the MACD signal.&lt;/li>
&lt;/ol>
&lt;p>I&amp;rsquo;ll talk about both points in order.&lt;/p>
&lt;p>In order to find out your exposure to a style factor, you obviously must first
know how much each stock is affected by the style factor. But how do you get
that? That is what a risk model is for!&lt;/p>
&lt;p>At the end of every period (usually every trading day), the risk model wakes
up, looks at all the pricing data and style factor data for that day.
It then tries to explain as best it can how much each stock was affected by
each style factor. The end result is that each stock will have a couple of
numbers associated with it, one for every style factor. These numbers indicate
how sensitive the stock&amp;rsquo;s returns were to movements in the style factors. These
numbers are called &lt;em>factor loadings&lt;/em> or &lt;em>betas&lt;/em> (although I prefer “factor
loadings” because a lot of things in quant finance are called “beta”).&lt;/p>
&lt;p>Even better, there&amp;rsquo;s no reason why the risk model should limit itself to style
factors! I previously made the distinction between style factors and other
factors such as sectors: theoretically, a risk model should also be able to find
out how sensitive a stock&amp;rsquo;s returns are to movements in its sector: compute a
“sector factor loading”, if you will. Collectively, all the factors that we want
the risk model to consider — be they sector, style or otherwise — are called
&lt;em>common factors&lt;/em>.&lt;/p>
&lt;p>Clearly, having a risk model allows us to do a whole lot of stuff! This is
because, if we want to know how style factors and other prevailing market trends
are affecting our &lt;em>portfolio&lt;/em>, we must first know how they affect the &lt;em>stocks&lt;/em>
in our portfolio. Or, to be a bit more ambitious, if we knew how style factors
and prevailing market trends are impacting our &lt;em>universe&lt;/em> of stocks, then we&amp;rsquo;re
well on the way to knowing how they&amp;rsquo;re impacting our portfolio! The value of
this kind of portfolio analysis should, of course, be self-evident.&lt;/p>
&lt;p>So, suppose we have a risk model. How do we get from a &lt;em>stock-level&lt;/em> understanding
of how market trends are affecting us, to a &lt;em>portfolio-level&lt;/em> understanding of the
same? The answer to this question is called &lt;em>performance attribution&lt;/em>, and is
one of the main reasons a risk model is worth having.&lt;/p>
&lt;p>Instead of prattling on about performance attribution, it&amp;rsquo;d just be easier to
show you the miracles it can do. Below are some (fake, made up) examples of some
analysis performance attribution can give us:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>Date: 08–23–2017
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Factor PnL ($)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------- --------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Total PnL -1,000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Technology 70
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Real Estate -40
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Momentum -780
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mean Reversion 100
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Volatility -110
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Stock-Specific 480
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The table shows that today, our algo suffered a $1000 loss, and the breakdown of
that loss indicates that the main culprit is momentum. In other words, our poor
performance today is mostly attributable to the poor performance of the momentum
factor (hence the name, “performance attribution”). The sector factors account
for very little PnL, while the other style factors (mean reversion and
volatility) drive fairly significant profits and losses, but the real smoking
gun here is the fact that momentum completely tanked today.&lt;/p>
&lt;p>There are a few more useful summary statistics that performance attribution can
give us! Traditional computations for the alpha and the Sharpe ratio of a
strategy usually take into account the performance of the market: i.e., the
traditional alpha is a measure of how much our strategy &lt;em>outperformed&lt;/em> the
market, and the traditional Sharpe ratio is a measure of the same, but
accounting for the volatility of returns. These may be dubbed &lt;em>single-factor
alphas&lt;/em>, because they only measure performance once one factor has been
accounted for — namely, the market. In reality, we would like to not only
account for the market, but also any other common factors, such as style or
sector. This leads to the concept of the &lt;em>multi-factor alpha and Sharpe ratio&lt;/em>,
which is exactly the same as the alpha and Sharpe ratio we&amp;rsquo;re familiar with, but
taking into account a lot more factors. In other words, whereas the returns in
excess of the market is quantified by the single factor alpha, the returns in
excess of the market, momentum, mean reversion, volatility etc., is
quantified by the multi factor alpha. The same goes for the single factor and
multi factor Sharpe, in the case of risk-adjusted returns.&lt;/p>
&lt;p>Adding performance attribution capabilities to &lt;code>pyfolio&lt;/code> is an active project! A
couple of pull requests have already been merged to this effect, so definitely
stay tuned! A new version of &lt;code>pyfolio&lt;/code> will probably be made once performance
attribution is up and running. As always, feel free to
&lt;a href="https://github.com/quantopian/pyfolio">contribute to &lt;code>pyfolio&lt;/code>&lt;/a>, be it by
making feature requests, issues with bugs, or submitting a pull request!&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Update (12–16–2017):&lt;/strong> Quantopian recently launched their risk model for
anyone to use &amp;mdash; this is a great resource that usually only large and
deep-pocketed financial institutions have access to. Check it out
&lt;a href="https://www.quantopian.com/risk-model">here&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Update (05–11–2018):&lt;/strong> Quantopian&amp;rsquo;s now integrated pyfolio analytics into
their backtest engine! This makes it much easier to see how your algorithm
stacks up against expectations. Check out the announcement
&lt;a href="https://www.quantopian.com/posts/improved-backtest-analysis">here&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Update (05–29–2018):&lt;/strong> Quantopian recently published a white paper on how the
risk model works! Read all about it
&lt;a href="https://www.quantopian.com/papers/risk">here&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Update (12-16-2020):&lt;/strong> &lt;a href="https://www.bloomberg.com/news/articles/2020-12-16/quant-trading-platform-quantopian-closes-down">Quantopian has been acquired by
Robinhood.&lt;/a>
Sorry for all the broken links to &lt;code>www.quantopian.com&lt;/code>.&lt;/p></content></entry><entry><title>Modelling Hate Speech on Reddit — A Three-Act Play (Slide Deck)</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/reddit-slides/"/><id>https://www.georgeho.org/reddit-slides/</id><updated>2017-11-08T00:00:00Z</updated><published>2017-11-08T00:00:00Z</published><content type="html">&lt;p>This is a follow-up post to my first post on a recent project to &lt;a href="https://www.georgeho.org/reddit-clusters/">model hate
speech on Reddit&lt;/a>. If you haven&amp;rsquo;t
taken a look at my first post, please do!&lt;/p>
&lt;p>I recently gave a talk on the technical, data science side of the project,
describing not just the final result, but also the trajectory of the whole
project: stumbling blocks, dead ends and all. Below is the slide deck: enjoy!&lt;/p>
&lt;h2 id="abstract">Abstract&lt;/h2>
&lt;p>Reddit is the one of the most popular discussion websites today, and is
famously broad-minded in what it allows to be said on its forums: however,
where there is free speech, there are invariably pockets of hate speech.&lt;/p>
&lt;p>In this talk, I present a recent project to model hate speech on Reddit. In
three acts, I chronicle the thought processes and stumbling blocks of the
project, with each act applying a different form of machine learning:
supervised learning, topic modelling and text clustering. I conclude with the
current state of the project: a system that allows the modelling and
summarization of entire subreddits, and possible future directions. Rest
assured that both the talk and the slides have been scrubbed to be safe for
work!&lt;/p>
&lt;h2 id="slides">Slides&lt;/h2>
&lt;blockquote class="embedly-card">&lt;h4>&lt;a href="https://speakerdeck.com/_eigenfoo/modelling-hate-speech-on-reddit-a-three-act-play">Modelling Hate Speech on Reddit - A Three-Act Play&lt;/a>&lt;/h4>&lt;p>Reddit is the one of the most popular discussion websites today, and is famously broad-minded in what it allows to be said on its forums: however, where there is free speech, there are invariably pockets of hate speech. In this talk, I present a recent project to model hate speech on Reddit.&lt;/p>&lt;/blockquote>
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8">&lt;/script></content></entry><entry><title>Hello World!</title><link rel="alternate" type="text/html" href="https://www.georgeho.org/hello/"/><id>https://www.georgeho.org/hello/</id><updated>2017-07-29T00:00:00Z</updated><published>2017-07-29T00:00:00Z</published><content type="html">&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Utah_teapot">The Utah teapot!&lt;/a> (Basically the
“hello world” of computer graphics).&lt;/p>
&lt;p>&lt;img src="https://www.georgeho.org/assets/images/utah-teapot.png" alt="The Utah teapot">&lt;/p>
&lt;p>This is the first post of what will (hopefully) be a cool and interesting blog.
Hope you like it!&lt;/p>
&lt;p>For those who are interested, this website is based off &lt;a href="https://mmistakes.github.io/minimal-mistakes/">the Minimal Mistakes
theme&lt;/a> by Michael Rose, generated
with &lt;a href="https://jekyllrb.com">Jekyll&lt;/a>, hosted by &lt;a href="https://pages.github.com/">GitHub
Pages&lt;/a> and served using
&lt;a href="https://www.cloudflare.com/">Cloudflare&lt;/a>. I&amp;rsquo;ve had no complaints with this
blogging stack: the only thing I pay for is the custom
&lt;a href="https://eigenfoo.xyz/">&lt;code>eigenfoo.xyz&lt;/code>&lt;/a> domain name, which costs the same as
maybe two or three cups of coffee a year.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Update (2022-03-06):&lt;/strong> I&amp;rsquo;ve since made several changes to this blog, which
you can read about in &lt;a href="https://www.georgeho.org/migrating-to-hugo">a subsequent blog post&lt;/a>.&lt;/p></content></entry></feed>